/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * DirectAccessUrl
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T14:17:06.136707300+08:00[Asia/Ulaanbaatar]")
public class DirectAccessUrl {
  public static final String SERIALIZED_NAME_CONTENT_URL = "contentUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private String contentUrl;

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private Boolean attachment;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;


  public DirectAccessUrl contentUrl(String contentUrl) {
    
    this.contentUrl = contentUrl;
    return this;
  }

   /**
   * The direct access URL of a binary content
   * @return contentUrl
  **/
  @ApiModelProperty(required = true, value = "The direct access URL of a binary content")

  public String getContentUrl() {
    return contentUrl;
  }


  public void setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
  }


  public DirectAccessUrl attachment(Boolean attachment) {
    
    this.attachment = attachment;
    return this;
  }

   /**
   * Flag to control the download method, **true** for attachment URL, **false** for embedded URL
   * @return attachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag to control the download method, **true** for attachment URL, **false** for embedded URL")

  public Boolean getAttachment() {
    return attachment;
  }


  public void setAttachment(Boolean attachment) {
    this.attachment = attachment;
  }


  public DirectAccessUrl expiresAt(OffsetDateTime expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The direct access URL would become invalid when the expiry date is reached
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The direct access URL would become invalid when the expiry date is reached")

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectAccessUrl directAccessUrl = (DirectAccessUrl) o;
    return Objects.equals(this.contentUrl, directAccessUrl.contentUrl) &&
        Objects.equals(this.attachment, directAccessUrl.attachment) &&
        Objects.equals(this.expiresAt, directAccessUrl.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentUrl, attachment, expiresAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectAccessUrl {\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

