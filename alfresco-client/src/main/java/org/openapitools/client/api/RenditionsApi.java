/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DirectAccessUrlBodyCreate;
import org.openapitools.client.model.DirectAccessUrlEntry;
import org.openapitools.client.model.Error;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.RenditionBodyCreate;
import org.openapitools.client.model.RenditionEntry;
import org.openapitools.client.model.RenditionPaging;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RenditionsApi {
    private ApiClient localVarApiClient;

    public RenditionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RenditionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createRendition
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or is not a file or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRenditionCall(String nodeId, RenditionBodyCreate renditionBodyCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = renditionBodyCreate;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRenditionValidateBeforeCall(String nodeId, RenditionBodyCreate renditionBodyCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling createRendition(Async)");
        }
        
        // verify the required parameter 'renditionBodyCreate' is set
        if (renditionBodyCreate == null) {
            throw new ApiException("Missing the required parameter 'renditionBodyCreate' when calling createRendition(Async)");
        }
        

        okhttp3.Call localVarCall = createRenditionCall(nodeId, renditionBodyCreate, _callback);
        return localVarCall;

    }

    /**
     * Create rendition
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;  Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {      \&quot;id\&quot;: \&quot;doclib\&quot;   },   {      \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or is not a file or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void createRendition(String nodeId, RenditionBodyCreate renditionBodyCreate) throws ApiException {
        createRenditionWithHttpInfo(nodeId, renditionBodyCreate);
    }

    /**
     * Create rendition
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;  Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {      \&quot;id\&quot;: \&quot;doclib\&quot;   },   {      \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or is not a file or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createRenditionWithHttpInfo(String nodeId, RenditionBodyCreate renditionBodyCreate) throws ApiException {
        okhttp3.Call localVarCall = createRenditionValidateBeforeCall(nodeId, renditionBodyCreate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create rendition (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;  Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {      \&quot;id\&quot;: \&quot;doclib\&quot;   },   {      \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or is not a file or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRenditionAsync(String nodeId, RenditionBodyCreate renditionBodyCreate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRenditionValidateBeforeCall(nodeId, renditionBodyCreate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRendition
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRenditionCall(String nodeId, String renditionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions/{renditionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRenditionValidateBeforeCall(String nodeId, String renditionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteRendition(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling deleteRendition(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRenditionCall(nodeId, renditionId, _callback);
        return localVarCall;

    }

    /**
     * Delete rendition
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition identified by **renditionId** of **nodeId**.  If the rendition is successfully deleted then the content for that rendition node will be cleared. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRendition(String nodeId, String renditionId) throws ApiException {
        deleteRenditionWithHttpInfo(nodeId, renditionId);
    }

    /**
     * Delete rendition
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition identified by **renditionId** of **nodeId**.  If the rendition is successfully deleted then the content for that rendition node will be cleared. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRenditionWithHttpInfo(String nodeId, String renditionId) throws ApiException {
        okhttp3.Call localVarCall = deleteRenditionValidateBeforeCall(nodeId, renditionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete rendition (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition identified by **renditionId** of **nodeId**.  If the rendition is successfully deleted then the content for that rendition node will be cleared. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRenditionAsync(String nodeId, String renditionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRenditionValidateBeforeCall(nodeId, renditionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRendition
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenditionCall(String nodeId, String renditionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions/{renditionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRenditionValidateBeforeCall(String nodeId, String renditionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getRendition(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getRendition(Async)");
        }
        

        okhttp3.Call localVarCall = getRenditionCall(nodeId, renditionId, _callback);
        return localVarCall;

    }

    /**
     * Get rendition information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return RenditionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionEntry getRendition(String nodeId, String renditionId) throws ApiException {
        ApiResponse<RenditionEntry> localVarResp = getRenditionWithHttpInfo(nodeId, renditionId);
        return localVarResp.getData();
    }

    /**
     * Get rendition information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return ApiResponse&lt;RenditionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionEntry> getRenditionWithHttpInfo(String nodeId, String renditionId) throws ApiException {
        okhttp3.Call localVarCall = getRenditionValidateBeforeCall(nodeId, renditionId, null);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rendition information (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenditionAsync(String nodeId, String renditionId, final ApiCallback<RenditionEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRenditionValidateBeforeCall(nodeId, renditionId, _callback);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRenditionContent
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenditionContentCall(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions/{renditionId}/content"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment", attachment));
        }

        if (placeholder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeholder", placeholder));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRenditionContentValidateBeforeCall(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getRenditionContent(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getRenditionContent(Async)");
        }
        

        okhttp3.Call localVarCall = getRenditionContentCall(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder, _callback);
        return localVarCall;

    }

    /**
     * Get rendition content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File getRenditionContent(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder) throws ApiException {
        ApiResponse<File> localVarResp = getRenditionContentWithHttpInfo(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder);
        return localVarResp.getData();
    }

    /**
     * Get rendition content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getRenditionContentWithHttpInfo(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder) throws ApiException {
        okhttp3.Call localVarCall = getRenditionContentValidateBeforeCall(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rendition content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenditionContentAsync(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRenditionContentValidateBeforeCall(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRenditions
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRenditionsCall(String nodeId, String where, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRenditionsValidateBeforeCall(String nodeId, String where, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listRenditions(Async)");
        }
        

        okhttp3.Call localVarCall = listRenditionsCall(nodeId, where, _callback);
        return localVarCall;

    }

    /**
     * List renditions
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return RenditionPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionPaging listRenditions(String nodeId, String where) throws ApiException {
        ApiResponse<RenditionPaging> localVarResp = listRenditionsWithHttpInfo(nodeId, where);
        return localVarResp.getData();
    }

    /**
     * List renditions
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return ApiResponse&lt;RenditionPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionPaging> listRenditionsWithHttpInfo(String nodeId, String where) throws ApiException {
        okhttp3.Call localVarCall = listRenditionsValidateBeforeCall(nodeId, where, null);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List renditions (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRenditionsAsync(String nodeId, String where, final ApiCallback<RenditionPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRenditionsValidateBeforeCall(nodeId, where, _callback);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestRenditionDirectAccessUrl
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestRenditionDirectAccessUrlCall(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestContentUrlBodyCreate;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/renditions/{renditionId}/request-direct-access-url"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestRenditionDirectAccessUrlValidateBeforeCall(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestRenditionDirectAccessUrl(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling requestRenditionDirectAccessUrl(Async)");
        }
        

        okhttp3.Call localVarCall = requestRenditionDirectAccessUrlCall(nodeId, renditionId, requestContentUrlBodyCreate, _callback);
        return localVarCall;

    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return DirectAccessUrlEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DirectAccessUrlEntry requestRenditionDirectAccessUrl(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        ApiResponse<DirectAccessUrlEntry> localVarResp = requestRenditionDirectAccessUrlWithHttpInfo(nodeId, renditionId, requestContentUrlBodyCreate);
        return localVarResp.getData();
    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return ApiResponse&lt;DirectAccessUrlEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectAccessUrlEntry> requestRenditionDirectAccessUrlWithHttpInfo(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        okhttp3.Call localVarCall = requestRenditionDirectAccessUrlValidateBeforeCall(nodeId, renditionId, requestContentUrlBodyCreate, null);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a direct access content URL (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestRenditionDirectAccessUrlAsync(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback<DirectAccessUrlEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestRenditionDirectAccessUrlValidateBeforeCall(nodeId, renditionId, requestContentUrlBodyCreate, _callback);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
