/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArchiveContentRequest;
import org.openapitools.client.model.ContentStorageInfo;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.RestoreArchivedContentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageInfoApi {
    private ApiClient localVarApiClient;

    public StorageInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getStorageProperties
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePropertiesCall(String nodeId, String contentPropName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/storage-info/{contentPropName}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", localVarApiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePropertiesValidateBeforeCall(String nodeId, String contentPropName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getStorageProperties(Async)");
        }
        
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling getStorageProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getStoragePropertiesCall(nodeId, contentPropName, _callback);
        return localVarCall;

    }

    /**
     * Retrieve storage properties for given content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @return ContentStorageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ContentStorageInfo getStorageProperties(String nodeId, String contentPropName) throws ApiException {
        ApiResponse<ContentStorageInfo> localVarResp = getStoragePropertiesWithHttpInfo(nodeId, contentPropName);
        return localVarResp.getData();
    }

    /**
     * Retrieve storage properties for given content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @return ApiResponse&lt;ContentStorageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentStorageInfo> getStoragePropertiesWithHttpInfo(String nodeId, String contentPropName) throws ApiException {
        okhttp3.Call localVarCall = getStoragePropertiesValidateBeforeCall(nodeId, contentPropName, null);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve storage properties for given content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePropertiesAsync(String nodeId, String contentPropName, final ApiCallback<ContentStorageInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePropertiesValidateBeforeCall(nodeId, contentPropName, _callback);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersionStorageProperties
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionStoragePropertiesCall(String nodeId, String versionId, String contentPropName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", localVarApiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionStoragePropertiesValidateBeforeCall(String nodeId, String versionId, String contentPropName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getVersionStorageProperties(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getVersionStorageProperties(Async)");
        }
        
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling getVersionStorageProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getVersionStoragePropertiesCall(nodeId, versionId, contentPropName, _callback);
        return localVarCall;

    }

    /**
     * Retrieve storage properties for given version content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given version content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @return ContentStorageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ContentStorageInfo getVersionStorageProperties(String nodeId, String versionId, String contentPropName) throws ApiException {
        ApiResponse<ContentStorageInfo> localVarResp = getVersionStoragePropertiesWithHttpInfo(nodeId, versionId, contentPropName);
        return localVarResp.getData();
    }

    /**
     * Retrieve storage properties for given version content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given version content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @return ApiResponse&lt;ContentStorageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentStorageInfo> getVersionStoragePropertiesWithHttpInfo(String nodeId, String versionId, String contentPropName) throws ApiException {
        okhttp3.Call localVarCall = getVersionStoragePropertiesValidateBeforeCall(nodeId, versionId, contentPropName, null);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve storage properties for given version content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given version content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionStoragePropertiesAsync(String nodeId, String versionId, String contentPropName, final ApiCallback<ContentStorageInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionStoragePropertiesValidateBeforeCall(nodeId, versionId, contentPropName, _callback);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestArchiveContent
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestArchiveContentCall(String nodeId, String contentPropName, ArchiveContentRequest archiveContentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = archiveContentRequest;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/storage-info/{contentPropName}/archive"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", localVarApiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestArchiveContentValidateBeforeCall(String nodeId, String contentPropName, ArchiveContentRequest archiveContentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestArchiveContent(Async)");
        }
        
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestArchiveContent(Async)");
        }
        

        okhttp3.Call localVarCall = requestArchiveContentCall(nodeId, contentPropName, archiveContentRequest, _callback);
        return localVarCall;

    }

    /**
     * Request to send given content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void requestArchiveContent(String nodeId, String contentPropName, ArchiveContentRequest archiveContentRequest) throws ApiException {
        requestArchiveContentWithHttpInfo(nodeId, contentPropName, archiveContentRequest);
    }

    /**
     * Request to send given content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestArchiveContentWithHttpInfo(String nodeId, String contentPropName, ArchiveContentRequest archiveContentRequest) throws ApiException {
        okhttp3.Call localVarCall = requestArchiveContentValidateBeforeCall(nodeId, contentPropName, archiveContentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request to send given content to archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestArchiveContentAsync(String nodeId, String contentPropName, ArchiveContentRequest archiveContentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestArchiveContentValidateBeforeCall(nodeId, contentPropName, archiveContentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestArchiveVersionContent
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestArchiveVersionContentCall(String nodeId, String versionId, String contentPropName, ArchiveContentRequest archiveContentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = archiveContentRequest;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}/archive"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", localVarApiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestArchiveVersionContentValidateBeforeCall(String nodeId, String versionId, String contentPropName, ArchiveContentRequest archiveContentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestArchiveVersionContent(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling requestArchiveVersionContent(Async)");
        }
        
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestArchiveVersionContent(Async)");
        }
        

        okhttp3.Call localVarCall = requestArchiveVersionContentCall(nodeId, versionId, contentPropName, archiveContentRequest, _callback);
        return localVarCall;

    }

    /**
     * Request to send given version content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given version content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void requestArchiveVersionContent(String nodeId, String versionId, String contentPropName, ArchiveContentRequest archiveContentRequest) throws ApiException {
        requestArchiveVersionContentWithHttpInfo(nodeId, versionId, contentPropName, archiveContentRequest);
    }

    /**
     * Request to send given version content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given version content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestArchiveVersionContentWithHttpInfo(String nodeId, String versionId, String contentPropName, ArchiveContentRequest archiveContentRequest) throws ApiException {
        okhttp3.Call localVarCall = requestArchiveVersionContentValidateBeforeCall(nodeId, versionId, contentPropName, archiveContentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request to send given version content to archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given version content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param archiveContentRequest Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow archive. Invalid archive paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already archived </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestArchiveVersionContentAsync(String nodeId, String versionId, String contentPropName, ArchiveContentRequest archiveContentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestArchiveVersionContentValidateBeforeCall(nodeId, versionId, contentPropName, archiveContentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestRestoreContentFromArchive
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: n**nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestRestoreContentFromArchiveCall(String nodeId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = restoreArchivedContentRequest;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/storage-info/{contentPropName}/archive-restore"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", localVarApiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestRestoreContentFromArchiveValidateBeforeCall(String nodeId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestRestoreContentFromArchive(Async)");
        }
        
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestRestoreContentFromArchive(Async)");
        }
        

        okhttp3.Call localVarCall = requestRestoreContentFromArchiveCall(nodeId, contentPropName, restoreArchivedContentRequest, _callback);
        return localVarCall;

    }

    /**
     * Request to restore given content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: n**nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void requestRestoreContentFromArchive(String nodeId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest) throws ApiException {
        requestRestoreContentFromArchiveWithHttpInfo(nodeId, contentPropName, restoreArchivedContentRequest);
    }

    /**
     * Request to restore given content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: n**nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestRestoreContentFromArchiveWithHttpInfo(String nodeId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest) throws ApiException {
        okhttp3.Call localVarCall = requestRestoreContentFromArchiveValidateBeforeCall(nodeId, contentPropName, restoreArchivedContentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request to restore given content from archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: n**nodeId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestRestoreContentFromArchiveAsync(String nodeId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestRestoreContentFromArchiveValidateBeforeCall(nodeId, contentPropName, restoreArchivedContentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestRestoreVersionContentFromArchive
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestRestoreVersionContentFromArchiveCall(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = restoreArchivedContentRequest;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}/archive-restore"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", localVarApiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestRestoreVersionContentFromArchiveValidateBeforeCall(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestRestoreVersionContentFromArchive(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling requestRestoreVersionContentFromArchive(Async)");
        }
        
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestRestoreVersionContentFromArchive(Async)");
        }
        

        okhttp3.Call localVarCall = requestRestoreVersionContentFromArchiveCall(nodeId, versionId, contentPropName, restoreArchivedContentRequest, _callback);
        return localVarCall;

    }

    /**
     * Request to restore given version content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given version content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void requestRestoreVersionContentFromArchive(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest) throws ApiException {
        requestRestoreVersionContentFromArchiveWithHttpInfo(nodeId, versionId, contentPropName, restoreArchivedContentRequest);
    }

    /**
     * Request to restore given version content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given version content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestRestoreVersionContentFromArchiveWithHttpInfo(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest) throws ApiException {
        okhttp3.Call localVarCall = requestRestoreVersionContentFromArchiveValidateBeforeCall(nodeId, versionId, contentPropName, restoreArchivedContentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request to restore given version content from archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given version content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#39;:&#39;) or underscore (&#39;_&#39;) character (e.g., &#39;cm:content&#39; or &#39;cm_content&#39;).  (required)
     * @param restoreArchivedContentRequest Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#39;High&#39; restore priority translates to &#39;Expedited&#39; Glacier restore tier in AWS S3 and &#39;High&#39; rehydrate priority in Azure Blob. &#39;Standard&#39; restore priority translates to &#39;Standard&#39; Glacier restore tier in AWS S3 and &#39;Standard&#39; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response (request accepted) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file Content&#39;s storage state does not allow restore. Invalid restore paramters.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **contentPropName** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Content already restored or restoration is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestRestoreVersionContentFromArchiveAsync(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest restoreArchivedContentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestRestoreVersionContentFromArchiveValidateBeforeCall(nodeId, versionId, contentPropName, restoreArchivedContentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
