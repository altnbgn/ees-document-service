/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DirectAccessUrlBodyCreate;
import org.openapitools.client.model.DirectAccessUrlEntry;
import org.openapitools.client.model.Error;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.RenditionBodyCreate;
import org.openapitools.client.model.RenditionEntry;
import org.openapitools.client.model.RenditionPaging;
import org.openapitools.client.model.RevertBody;
import org.openapitools.client.model.VersionEntry;
import org.openapitools.client.model.VersionPaging;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VersionsApi {
    private ApiClient localVarApiClient;

    public VersionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VersionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createVersionRendition
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVersionRenditionCall(String nodeId, String versionId, RenditionBodyCreate renditionBodyCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = renditionBodyCreate;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/renditions"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVersionRenditionValidateBeforeCall(String nodeId, String versionId, RenditionBodyCreate renditionBodyCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling createVersionRendition(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling createVersionRendition(Async)");
        }
        
        // verify the required parameter 'renditionBodyCreate' is set
        if (renditionBodyCreate == null) {
            throw new ApiException("Missing the required parameter 'renditionBodyCreate' when calling createVersionRendition(Async)");
        }
        

        okhttp3.Call localVarCall = createVersionRenditionCall(nodeId, versionId, renditionBodyCreate, _callback);
        return localVarCall;

    }

    /**
     * Create rendition for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  An asynchronous request to create a rendition for version of file **nodeId** and **versionId**.  The version rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;   Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {       \&quot;id\&quot;: \&quot;doclib\&quot;   },   {       \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void createVersionRendition(String nodeId, String versionId, RenditionBodyCreate renditionBodyCreate) throws ApiException {
        createVersionRenditionWithHttpInfo(nodeId, versionId, renditionBodyCreate);
    }

    /**
     * Create rendition for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  An asynchronous request to create a rendition for version of file **nodeId** and **versionId**.  The version rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;   Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {       \&quot;id\&quot;: \&quot;doclib\&quot;   },   {       \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createVersionRenditionWithHttpInfo(String nodeId, String versionId, RenditionBodyCreate renditionBodyCreate) throws ApiException {
        okhttp3.Call localVarCall = createVersionRenditionValidateBeforeCall(nodeId, versionId, renditionBodyCreate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create rendition for a file version (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  An asynchronous request to create a rendition for version of file **nodeId** and **versionId**.  The version rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;   Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {       \&quot;id\&quot;: \&quot;doclib\&quot;   },   {       \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionBodyCreate The rendition \&quot;id\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionBodyCreate** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> All requested renditions already exist </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Renditions/thumbnails are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVersionRenditionAsync(String nodeId, String versionId, RenditionBodyCreate renditionBodyCreate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVersionRenditionValidateBeforeCall(nodeId, versionId, renditionBodyCreate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVersion
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Cannot delete the last remaining version </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVersionCall(String nodeId, String versionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVersionValidateBeforeCall(String nodeId, String versionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteVersion(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVersionCall(nodeId, versionId, _callback);
        return localVarCall;

    }

    /**
     * Delete a version
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Delete the version identified by **versionId** and **nodeId*.  If the version is successfully deleted then the content and metadata for that versioned node will be deleted and will no longer appear in the version history. This operation cannot be undone.  If the most recent version is deleted the live node will revert to the next most recent version.  We currently do not allow the last version to be deleted. If you wish to clear the history then you can remove the \&quot;cm:versionable\&quot; aspect (via update node) which will also disable versioning. In this case, you can re-enable versioning by adding back the \&quot;cm:versionable\&quot; aspect or using the version params (majorVersion and comment) on a subsequent file content update. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Cannot delete the last remaining version </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVersion(String nodeId, String versionId) throws ApiException {
        deleteVersionWithHttpInfo(nodeId, versionId);
    }

    /**
     * Delete a version
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Delete the version identified by **versionId** and **nodeId*.  If the version is successfully deleted then the content and metadata for that versioned node will be deleted and will no longer appear in the version history. This operation cannot be undone.  If the most recent version is deleted the live node will revert to the next most recent version.  We currently do not allow the last version to be deleted. If you wish to clear the history then you can remove the \&quot;cm:versionable\&quot; aspect (via update node) which will also disable versioning. In this case, you can re-enable versioning by adding back the \&quot;cm:versionable\&quot; aspect or using the version params (majorVersion and comment) on a subsequent file content update. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Cannot delete the last remaining version </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVersionWithHttpInfo(String nodeId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(nodeId, versionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a version (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Delete the version identified by **versionId** and **nodeId*.  If the version is successfully deleted then the content and metadata for that versioned node will be deleted and will no longer appear in the version history. This operation cannot be undone.  If the most recent version is deleted the live node will revert to the next most recent version.  We currently do not allow the last version to be deleted. If you wish to clear the history then you can remove the \&quot;cm:versionable\&quot; aspect (via update node) which will also disable versioning. In this case, you can re-enable versioning by adding back the \&quot;cm:versionable\&quot; aspect or using the version params (majorVersion and comment) on a subsequent file content update. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Cannot delete the last remaining version </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVersionAsync(String nodeId, String versionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(nodeId, versionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVersionRendition
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **versionId** or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the version rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId**, **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVersionRenditionCall(String nodeId, String versionId, String renditionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVersionRenditionValidateBeforeCall(String nodeId, String versionId, String renditionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteVersionRendition(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteVersionRendition(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling deleteVersionRendition(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVersionRenditionCall(nodeId, versionId, renditionId, _callback);
        return localVarCall;

    }

    /**
     * Delete rendition for a version
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition for **renditionId** of version **versionId** of **nodeId**.  If the rendition is successfully deleted then the content  for that rendition node will be cleared. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **versionId** or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the version rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId**, **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVersionRendition(String nodeId, String versionId, String renditionId) throws ApiException {
        deleteVersionRenditionWithHttpInfo(nodeId, versionId, renditionId);
    }

    /**
     * Delete rendition for a version
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition for **renditionId** of version **versionId** of **nodeId**.  If the rendition is successfully deleted then the content  for that rendition node will be cleared. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **versionId** or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the version rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId**, **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVersionRenditionWithHttpInfo(String nodeId, String versionId, String renditionId) throws ApiException {
        okhttp3.Call localVarCall = deleteVersionRenditionValidateBeforeCall(nodeId, versionId, renditionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete rendition for a version (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition for **renditionId** of version **versionId** of **nodeId**.  If the rendition is successfully deleted then the content  for that rendition node will be cleared. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format or **versionId** or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete the version rendition </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId**, **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVersionRenditionAsync(String nodeId, String versionId, String renditionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVersionRenditionValidateBeforeCall(nodeId, versionId, renditionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersion
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionCall(String nodeId, String versionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionValidateBeforeCall(String nodeId, String versionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getVersion(Async)");
        }
        

        okhttp3.Call localVarCall = getVersionCall(nodeId, versionId, _callback);
        return localVarCall;

    }

    /**
     * Get version information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version information for **versionId** of file node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @return VersionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public VersionEntry getVersion(String nodeId, String versionId) throws ApiException {
        ApiResponse<VersionEntry> localVarResp = getVersionWithHttpInfo(nodeId, versionId);
        return localVarResp.getData();
    }

    /**
     * Get version information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version information for **versionId** of file node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @return ApiResponse&lt;VersionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionEntry> getVersionWithHttpInfo(String nodeId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = getVersionValidateBeforeCall(nodeId, versionId, null);
        Type localVarReturnType = new TypeToken<VersionEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get version information (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version information for **versionId** of file node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionAsync(String nodeId, String versionId, final ApiCallback<VersionEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionValidateBeforeCall(nodeId, versionId, _callback);
        Type localVarReturnType = new TypeToken<VersionEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersionContent
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionContentCall(String nodeId, String versionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/content"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment", attachment));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionContentValidateBeforeCall(String nodeId, String versionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getVersionContent(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getVersionContent(Async)");
        }
        

        okhttp3.Call localVarCall = getVersionContentCall(nodeId, versionId, attachment, ifModifiedSince, range, _callback);
        return localVarCall;

    }

    /**
     * Get version content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version content for **versionId** of file node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File getVersionContent(String nodeId, String versionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        ApiResponse<File> localVarResp = getVersionContentWithHttpInfo(nodeId, versionId, attachment, ifModifiedSince, range);
        return localVarResp.getData();
    }

    /**
     * Get version content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version content for **versionId** of file node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getVersionContentWithHttpInfo(String nodeId, String versionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        okhttp3.Call localVarCall = getVersionContentValidateBeforeCall(nodeId, versionId, attachment, ifModifiedSince, range, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get version content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version content for **versionId** of file node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionContentAsync(String nodeId, String versionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionContentValidateBeforeCall(nodeId, versionId, attachment, ifModifiedSince, range, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersionRendition
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionRenditionCall(String nodeId, String versionId, String renditionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionRenditionValidateBeforeCall(String nodeId, String versionId, String renditionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getVersionRendition(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getVersionRendition(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getVersionRendition(Async)");
        }
        

        okhttp3.Call localVarCall = getVersionRenditionCall(nodeId, versionId, renditionId, _callback);
        return localVarCall;

    }

    /**
     * Get rendition information for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition information for **renditionId** of version of file **nodeId** and **versionId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return RenditionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionEntry getVersionRendition(String nodeId, String versionId, String renditionId) throws ApiException {
        ApiResponse<RenditionEntry> localVarResp = getVersionRenditionWithHttpInfo(nodeId, versionId, renditionId);
        return localVarResp.getData();
    }

    /**
     * Get rendition information for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition information for **renditionId** of version of file **nodeId** and **versionId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return ApiResponse&lt;RenditionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionEntry> getVersionRenditionWithHttpInfo(String nodeId, String versionId, String renditionId) throws ApiException {
        okhttp3.Call localVarCall = getVersionRenditionValidateBeforeCall(nodeId, versionId, renditionId, null);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rendition information for a file version (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition information for **renditionId** of version of file **nodeId** and **versionId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionRenditionAsync(String nodeId, String versionId, String renditionId, final ApiCallback<RenditionEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionRenditionValidateBeforeCall(nodeId, versionId, renditionId, _callback);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersionRenditionContent
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionRenditionContentCall(String nodeId, String versionId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/content"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment", attachment));
        }

        if (placeholder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeholder", placeholder));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionRenditionContentValidateBeforeCall(String nodeId, String versionId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getVersionRenditionContent(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getVersionRenditionContent(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getVersionRenditionContent(Async)");
        }
        

        okhttp3.Call localVarCall = getVersionRenditionContentCall(nodeId, versionId, renditionId, attachment, ifModifiedSince, range, placeholder, _callback);
        return localVarCall;

    }

    /**
     * Get rendition content for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition content for **renditionId** of version of file **nodeId** and **versionId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File getVersionRenditionContent(String nodeId, String versionId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder) throws ApiException {
        ApiResponse<File> localVarResp = getVersionRenditionContentWithHttpInfo(nodeId, versionId, renditionId, attachment, ifModifiedSince, range, placeholder);
        return localVarResp.getData();
    }

    /**
     * Get rendition content for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition content for **renditionId** of version of file **nodeId** and **versionId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getVersionRenditionContentWithHttpInfo(String nodeId, String versionId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder) throws ApiException {
        okhttp3.Call localVarCall = getVersionRenditionContentValidateBeforeCall(nodeId, versionId, renditionId, attachment, ifModifiedSince, range, placeholder, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rendition content for a file version (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition content for **renditionId** of version of file **nodeId** and **versionId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionRenditionContentAsync(String nodeId, String versionId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionRenditionContentValidateBeforeCall(nodeId, versionId, renditionId, attachment, ifModifiedSince, range, placeholder, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVersionHistory
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the version node. The following optional fields can be requested: * properties * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Target **nodeId** does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVersionHistoryCall(String nodeId, List<String> include, List<String> fields, Integer skipCount, Integer maxItems, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (skipCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCount", skipCount));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxItems", maxItems));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVersionHistoryValidateBeforeCall(String nodeId, List<String> include, List<String> fields, Integer skipCount, Integer maxItems, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listVersionHistory(Async)");
        }
        

        okhttp3.Call localVarCall = listVersionHistoryCall(nodeId, include, fields, skipCount, maxItems, _callback);
        return localVarCall;

    }

    /**
     * List version history
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version history as an ordered list of versions for the specified **nodeId**.  The list is ordered in descending modified order. So the most recent version is first and the original version is last in the list. 
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the version node. The following optional fields can be requested: * properties * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @return VersionPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Target **nodeId** does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public VersionPaging listVersionHistory(String nodeId, List<String> include, List<String> fields, Integer skipCount, Integer maxItems) throws ApiException {
        ApiResponse<VersionPaging> localVarResp = listVersionHistoryWithHttpInfo(nodeId, include, fields, skipCount, maxItems);
        return localVarResp.getData();
    }

    /**
     * List version history
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version history as an ordered list of versions for the specified **nodeId**.  The list is ordered in descending modified order. So the most recent version is first and the original version is last in the list. 
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the version node. The following optional fields can be requested: * properties * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @return ApiResponse&lt;VersionPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Target **nodeId** does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionPaging> listVersionHistoryWithHttpInfo(String nodeId, List<String> include, List<String> fields, Integer skipCount, Integer maxItems) throws ApiException {
        okhttp3.Call localVarCall = listVersionHistoryValidateBeforeCall(nodeId, include, fields, skipCount, maxItems, null);
        Type localVarReturnType = new TypeToken<VersionPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List version history (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version history as an ordered list of versions for the specified **nodeId**.  The list is ordered in descending modified order. So the most recent version is first and the original version is last in the list. 
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the version node. The following optional fields can be requested: * properties * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Target **nodeId** does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVersionHistoryAsync(String nodeId, List<String> include, List<String> fields, Integer skipCount, Integer maxItems, final ApiCallback<VersionPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVersionHistoryValidateBeforeCall(nodeId, include, fields, skipCount, maxItems, _callback);
        Type localVarReturnType = new TypeToken<VersionPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVersionRenditions
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVersionRenditionsCall(String nodeId, String versionId, String where, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/renditions"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVersionRenditionsValidateBeforeCall(String nodeId, String versionId, String where, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listVersionRenditions(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling listVersionRenditions(Async)");
        }
        

        okhttp3.Call localVarCall = listVersionRenditionsCall(nodeId, versionId, where, _callback);
        return localVarCall;

    }

    /**
     * List renditions for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return RenditionPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionPaging listVersionRenditions(String nodeId, String versionId, String where) throws ApiException {
        ApiResponse<RenditionPaging> localVarResp = listVersionRenditionsWithHttpInfo(nodeId, versionId, where);
        return localVarResp.getData();
    }

    /**
     * List renditions for a file version
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return ApiResponse&lt;RenditionPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionPaging> listVersionRenditionsWithHttpInfo(String nodeId, String versionId, String where) throws ApiException {
        okhttp3.Call localVarCall = listVersionRenditionsValidateBeforeCall(nodeId, versionId, where, null);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List renditions for a file version (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVersionRenditionsAsync(String nodeId, String versionId, String where, final ApiCallback<RenditionPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVersionRenditionsValidateBeforeCall(nodeId, versionId, where, _callback);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestVersionDirectAccessUrl
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestVersionDirectAccessUrlCall(String nodeId, String versionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestContentUrlBodyCreate;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/request-direct-access-url"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestVersionDirectAccessUrlValidateBeforeCall(String nodeId, String versionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestVersionDirectAccessUrl(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling requestVersionDirectAccessUrl(Async)");
        }
        

        okhttp3.Call localVarCall = requestVersionDirectAccessUrlCall(nodeId, versionId, requestContentUrlBodyCreate, _callback);
        return localVarCall;

    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return DirectAccessUrlEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DirectAccessUrlEntry requestVersionDirectAccessUrl(String nodeId, String versionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        ApiResponse<DirectAccessUrlEntry> localVarResp = requestVersionDirectAccessUrlWithHttpInfo(nodeId, versionId, requestContentUrlBodyCreate);
        return localVarResp.getData();
    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return ApiResponse&lt;DirectAccessUrlEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectAccessUrlEntry> requestVersionDirectAccessUrlWithHttpInfo(String nodeId, String versionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        okhttp3.Call localVarCall = requestVersionDirectAccessUrlValidateBeforeCall(nodeId, versionId, requestContentUrlBodyCreate, null);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a direct access content URL (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestVersionDirectAccessUrlAsync(String nodeId, String versionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback<DirectAccessUrlEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestVersionDirectAccessUrlValidateBeforeCall(nodeId, versionId, requestContentUrlBodyCreate, _callback);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestVersionRenditionDirectAccessUrl
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  It can be used to set the **attachment** flag, which controls the download method of the generated URL (attachment DAU vs embedded DAU). It defaults to **true**, meaning the value for the Content Disposition response header will be **attachment**.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestVersionRenditionDirectAccessUrlCall(String nodeId, String versionId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestContentUrlBodyCreate;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/request-direct-access-url"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestVersionRenditionDirectAccessUrlValidateBeforeCall(String nodeId, String versionId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestVersionRenditionDirectAccessUrl(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling requestVersionRenditionDirectAccessUrl(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling requestVersionRenditionDirectAccessUrl(Async)");
        }
        

        okhttp3.Call localVarCall = requestVersionRenditionDirectAccessUrlCall(nodeId, versionId, renditionId, requestContentUrlBodyCreate, _callback);
        return localVarCall;

    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.2 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  It can be used to set the **attachment** flag, which controls the download method of the generated URL (attachment DAU vs embedded DAU). It defaults to **true**, meaning the value for the Content Disposition response header will be **attachment**.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  (optional)
     * @return DirectAccessUrlEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DirectAccessUrlEntry requestVersionRenditionDirectAccessUrl(String nodeId, String versionId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        ApiResponse<DirectAccessUrlEntry> localVarResp = requestVersionRenditionDirectAccessUrlWithHttpInfo(nodeId, versionId, renditionId, requestContentUrlBodyCreate);
        return localVarResp.getData();
    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.2 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  It can be used to set the **attachment** flag, which controls the download method of the generated URL (attachment DAU vs embedded DAU). It defaults to **true**, meaning the value for the Content Disposition response header will be **attachment**.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  (optional)
     * @return ApiResponse&lt;DirectAccessUrlEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectAccessUrlEntry> requestVersionRenditionDirectAccessUrlWithHttpInfo(String nodeId, String versionId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        okhttp3.Call localVarCall = requestVersionRenditionDirectAccessUrlValidateBeforeCall(nodeId, versionId, renditionId, requestContentUrlBodyCreate, null);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a direct access content URL (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  It can be used to set the **attachment** flag, which controls the download method of the generated URL (attachment DAU vs embedded DAU). It defaults to **true**, meaning the value for the Content Disposition response header will be **attachment**.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestVersionRenditionDirectAccessUrlAsync(String nodeId, String versionId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback<DirectAccessUrlEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestVersionRenditionDirectAccessUrlValidateBeforeCall(nodeId, versionId, renditionId, requestContentUrlBodyCreate, _callback);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revertVersion
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param revertBody Optionally, specify a version comment and whether this should be a major version, or not. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid, or **revertBody** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to revert the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to revert the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertVersionCall(String nodeId, String versionId, RevertBody revertBody, List<String> fields, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = revertBody;

        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/revert"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revertVersionValidateBeforeCall(String nodeId, String versionId, RevertBody revertBody, List<String> fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'revertBody' is set
        if (revertBody == null) {
            throw new ApiException("Missing the required parameter 'revertBody' when calling revertVersion(Async)");
        }
        

        okhttp3.Call localVarCall = revertVersionCall(nodeId, versionId, revertBody, fields, _callback);
        return localVarCall;

    }

    /**
     * Revert a version
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to revert the version identified by **versionId** and **nodeId** to the live node.  If the node is successfully reverted then the content and metadata for that versioned node will be promoted to the live node and a new version will appear in the version history. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param revertBody Optionally, specify a version comment and whether this should be a major version, or not. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return VersionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid, or **revertBody** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to revert the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to revert the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public VersionEntry revertVersion(String nodeId, String versionId, RevertBody revertBody, List<String> fields) throws ApiException {
        ApiResponse<VersionEntry> localVarResp = revertVersionWithHttpInfo(nodeId, versionId, revertBody, fields);
        return localVarResp.getData();
    }

    /**
     * Revert a version
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to revert the version identified by **versionId** and **nodeId** to the live node.  If the node is successfully reverted then the content and metadata for that versioned node will be promoted to the live node and a new version will appear in the version history. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param revertBody Optionally, specify a version comment and whether this should be a major version, or not. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return ApiResponse&lt;VersionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid, or **revertBody** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to revert the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to revert the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionEntry> revertVersionWithHttpInfo(String nodeId, String versionId, RevertBody revertBody, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = revertVersionValidateBeforeCall(nodeId, versionId, revertBody, fields, null);
        Type localVarReturnType = new TypeToken<VersionEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revert a version (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to revert the version identified by **versionId** and **nodeId** to the live node.  If the node is successfully reverted then the content and metadata for that versioned node will be promoted to the live node and a new version will appear in the version history. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param revertBody Optionally, specify a version comment and whether this should be a major version, or not. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid, or **revertBody** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to revert the versioned node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **versionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to revert the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertVersionAsync(String nodeId, String versionId, RevertBody revertBody, List<String> fields, final ApiCallback<VersionEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = revertVersionValidateBeforeCall(nodeId, versionId, revertBody, fields, _callback);
        Type localVarReturnType = new TypeToken<VersionEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
