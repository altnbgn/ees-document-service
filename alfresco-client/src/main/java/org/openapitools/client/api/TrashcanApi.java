/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletedNodeBodyRestore;
import org.openapitools.client.model.DeletedNodeEntry;
import org.openapitools.client.model.DeletedNodesPaging;
import org.openapitools.client.model.DirectAccessUrlBodyCreate;
import org.openapitools.client.model.DirectAccessUrlEntry;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.NodeEntry;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.RenditionEntry;
import org.openapitools.client.model.RenditionPaging;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrashcanApi {
    private ApiClient localVarApiClient;

    public TrashcanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrashcanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteDeletedNode
     * @param nodeId The identifier of a node. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to permanently delete the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeletedNodeCall(String nodeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeletedNodeValidateBeforeCall(String nodeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteDeletedNode(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDeletedNodeCall(nodeId, _callback);
        return localVarCall;

    }

    /**
     * Permanently delete a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Permanently deletes the deleted node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to permanently delete the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeletedNode(String nodeId) throws ApiException {
        deleteDeletedNodeWithHttpInfo(nodeId);
    }

    /**
     * Permanently delete a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Permanently deletes the deleted node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to permanently delete the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeletedNodeWithHttpInfo(String nodeId) throws ApiException {
        okhttp3.Call localVarCall = deleteDeletedNodeValidateBeforeCall(nodeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permanently delete a deleted node (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Permanently deletes the deleted node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to permanently delete the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeletedNodeAsync(String nodeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeletedNodeValidateBeforeCall(nodeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArchivedNodeRendition
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedNodeRenditionCall(String nodeId, String renditionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}/renditions/{renditionId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArchivedNodeRenditionValidateBeforeCall(String nodeId, String renditionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getArchivedNodeRendition(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getArchivedNodeRendition(Async)");
        }
        

        okhttp3.Call localVarCall = getArchivedNodeRenditionCall(nodeId, renditionId, _callback);
        return localVarCall;

    }

    /**
     * Get rendition information for a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return RenditionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionEntry getArchivedNodeRendition(String nodeId, String renditionId) throws ApiException {
        ApiResponse<RenditionEntry> localVarResp = getArchivedNodeRenditionWithHttpInfo(nodeId, renditionId);
        return localVarResp.getData();
    }

    /**
     * Get rendition information for a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return ApiResponse&lt;RenditionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionEntry> getArchivedNodeRenditionWithHttpInfo(String nodeId, String renditionId) throws ApiException {
        okhttp3.Call localVarCall = getArchivedNodeRenditionValidateBeforeCall(nodeId, renditionId, null);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rendition information for a deleted node (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedNodeRenditionAsync(String nodeId, String renditionId, final ApiCallback<RenditionEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArchivedNodeRenditionValidateBeforeCall(nodeId, renditionId, _callback);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArchivedNodeRenditionContent
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedNodeRenditionContentCall(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}/renditions/{renditionId}/content"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment", attachment));
        }

        if (placeholder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeholder", placeholder));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArchivedNodeRenditionContentValidateBeforeCall(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getArchivedNodeRenditionContent(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getArchivedNodeRenditionContent(Async)");
        }
        

        okhttp3.Call localVarCall = getArchivedNodeRenditionContentCall(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder, _callback);
        return localVarCall;

    }

    /**
     * Get rendition content of a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File getArchivedNodeRenditionContent(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder) throws ApiException {
        ApiResponse<File> localVarResp = getArchivedNodeRenditionContentWithHttpInfo(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder);
        return localVarResp.getData();
    }

    /**
     * Get rendition content of a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getArchivedNodeRenditionContentWithHttpInfo(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder) throws ApiException {
        okhttp3.Call localVarCall = getArchivedNodeRenditionContentValidateBeforeCall(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rendition content of a deleted node (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** or **renditionId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedNodeRenditionContentAsync(String nodeId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, Boolean placeholder, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArchivedNodeRenditionContentValidateBeforeCall(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedNode
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * permissions * definition  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to view the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedNodeCall(String nodeId, List<String> include, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedNodeValidateBeforeCall(String nodeId, List<String> include, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getDeletedNode(Async)");
        }
        

        okhttp3.Call localVarCall = getDeletedNodeCall(nodeId, include, _callback);
        return localVarCall;

    }

    /**
     * Get a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the specific deleted node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * permissions * definition  (optional)
     * @return DeletedNodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to view the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeletedNodeEntry getDeletedNode(String nodeId, List<String> include) throws ApiException {
        ApiResponse<DeletedNodeEntry> localVarResp = getDeletedNodeWithHttpInfo(nodeId, include);
        return localVarResp.getData();
    }

    /**
     * Get a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the specific deleted node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * permissions * definition  (optional)
     * @return ApiResponse&lt;DeletedNodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to view the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedNodeEntry> getDeletedNodeWithHttpInfo(String nodeId, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = getDeletedNodeValidateBeforeCall(nodeId, include, null);
        Type localVarReturnType = new TypeToken<DeletedNodeEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a deleted node (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the specific deleted node **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * permissions * definition  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to view the deleted node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedNodeAsync(String nodeId, List<String> include, final ApiCallback<DeletedNodeEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedNodeValidateBeforeCall(nodeId, include, _callback);
        Type localVarReturnType = new TypeToken<DeletedNodeEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedNodeContent
     * @param nodeId The identifier of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to retrieve content of **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedNodeContentCall(String nodeId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}/content"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment", attachment));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedNodeContentValidateBeforeCall(String nodeId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getDeletedNodeContent(Async)");
        }
        

        okhttp3.Call localVarCall = getDeletedNodeContentCall(nodeId, attachment, ifModifiedSince, range, _callback);
        return localVarCall;

    }

    /**
     * Get deleted node content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the deleted node with identifier **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to retrieve content of **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File getDeletedNodeContent(String nodeId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        ApiResponse<File> localVarResp = getDeletedNodeContentWithHttpInfo(nodeId, attachment, ifModifiedSince, range);
        return localVarResp.getData();
    }

    /**
     * Get deleted node content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the deleted node with identifier **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to retrieve content of **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getDeletedNodeContentWithHttpInfo(String nodeId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        okhttp3.Call localVarCall = getDeletedNodeContentValidateBeforeCall(nodeId, attachment, ifModifiedSince, range, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get deleted node content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the deleted node with identifier **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to retrieve content of **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedNodeContentAsync(String nodeId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedNodeContentValidateBeforeCall(nodeId, attachment, ifModifiedSince, range, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDeletedNodeRenditions
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeletedNodeRenditionsCall(String nodeId, String where, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}/renditions"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeletedNodeRenditionsValidateBeforeCall(String nodeId, String where, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listDeletedNodeRenditions(Async)");
        }
        

        okhttp3.Call localVarCall = listDeletedNodeRenditionsCall(nodeId, where, _callback);
        return localVarCall;

    }

    /**
     * List renditions for a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return RenditionPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionPaging listDeletedNodeRenditions(String nodeId, String where) throws ApiException {
        ApiResponse<RenditionPaging> localVarResp = listDeletedNodeRenditionsWithHttpInfo(nodeId, where);
        return localVarResp.getData();
    }

    /**
     * List renditions for a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @return ApiResponse&lt;RenditionPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionPaging> listDeletedNodeRenditionsWithHttpInfo(String nodeId, String where) throws ApiException {
        okhttp3.Call localVarCall = listDeletedNodeRenditionsValidateBeforeCall(nodeId, where, null);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List renditions for a deleted node (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#39;CREATED&#39;) &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param where A string to restrict the returned objects by using a predicate. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeletedNodeRenditionsAsync(String nodeId, String where, final ApiCallback<RenditionPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeletedNodeRenditionsValidateBeforeCall(nodeId, where, _callback);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDeletedNodes
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * properties * permissions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeletedNodesCall(Integer skipCount, Integer maxItems, List<String> include, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleted-nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCount", skipCount));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxItems", maxItems));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeletedNodesValidateBeforeCall(Integer skipCount, Integer maxItems, List<String> include, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listDeletedNodesCall(skipCount, maxItems, include, _callback);
        return localVarCall;

    }

    /**
     * List deleted nodes
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of deleted nodes for the current user.  If the current user is an administrator deleted nodes for all users will be returned.  The list of deleted nodes will be ordered with the most recently deleted node at the top of the list. 
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * properties * permissions  (optional)
     * @return DeletedNodesPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeletedNodesPaging listDeletedNodes(Integer skipCount, Integer maxItems, List<String> include) throws ApiException {
        ApiResponse<DeletedNodesPaging> localVarResp = listDeletedNodesWithHttpInfo(skipCount, maxItems, include);
        return localVarResp.getData();
    }

    /**
     * List deleted nodes
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of deleted nodes for the current user.  If the current user is an administrator deleted nodes for all users will be returned.  The list of deleted nodes will be ordered with the most recently deleted node at the top of the list. 
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * properties * permissions  (optional)
     * @return ApiResponse&lt;DeletedNodesPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedNodesPaging> listDeletedNodesWithHttpInfo(Integer skipCount, Integer maxItems, List<String> include) throws ApiException {
        okhttp3.Call localVarCall = listDeletedNodesValidateBeforeCall(skipCount, maxItems, include, null);
        Type localVarReturnType = new TypeToken<DeletedNodesPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deleted nodes (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of deleted nodes for the current user.  If the current user is an administrator deleted nodes for all users will be returned.  The list of deleted nodes will be ordered with the most recently deleted node at the top of the list. 
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isFavorite * isDirectLinkEnabled * isLocked * path * properties * permissions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeletedNodesAsync(Integer skipCount, Integer maxItems, List<String> include, final ApiCallback<DeletedNodesPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeletedNodesValidateBeforeCall(skipCount, maxItems, include, _callback);
        Type localVarReturnType = new TypeToken<DeletedNodesPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestArchivedNodeRenditionDirectAccessUrl
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible    </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestArchivedNodeRenditionDirectAccessUrlCall(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestContentUrlBodyCreate;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}/renditions/{renditionId}/request-direct-access-url"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestArchivedNodeRenditionDirectAccessUrlValidateBeforeCall(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestArchivedNodeRenditionDirectAccessUrl(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling requestArchivedNodeRenditionDirectAccessUrl(Async)");
        }
        

        okhttp3.Call localVarCall = requestArchivedNodeRenditionDirectAccessUrlCall(nodeId, renditionId, requestContentUrlBodyCreate, _callback);
        return localVarCall;

    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return DirectAccessUrlEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible    </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DirectAccessUrlEntry requestArchivedNodeRenditionDirectAccessUrl(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        ApiResponse<DirectAccessUrlEntry> localVarResp = requestArchivedNodeRenditionDirectAccessUrlWithHttpInfo(nodeId, renditionId, requestContentUrlBodyCreate);
        return localVarResp.getData();
    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return ApiResponse&lt;DirectAccessUrlEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible    </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectAccessUrlEntry> requestArchivedNodeRenditionDirectAccessUrlWithHttpInfo(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        okhttp3.Call localVarCall = requestArchivedNodeRenditionDirectAccessUrlValidateBeforeCall(nodeId, renditionId, requestContentUrlBodyCreate, null);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a direct access content URL (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible    </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestArchivedNodeRenditionDirectAccessUrlAsync(String nodeId, String renditionId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback<DirectAccessUrlEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestArchivedNodeRenditionDirectAccessUrlValidateBeforeCall(nodeId, renditionId, requestContentUrlBodyCreate, _callback);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestDeletedNodeDirectAccessUrl
     * @param nodeId The identifier of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestDeletedNodeDirectAccessUrlCall(String nodeId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestContentUrlBodyCreate;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}/request-direct-access-url"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestDeletedNodeDirectAccessUrlValidateBeforeCall(String nodeId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestDeletedNodeDirectAccessUrl(Async)");
        }
        

        okhttp3.Call localVarCall = requestDeletedNodeDirectAccessUrlCall(nodeId, requestContentUrlBodyCreate, _callback);
        return localVarCall;

    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return DirectAccessUrlEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DirectAccessUrlEntry requestDeletedNodeDirectAccessUrl(String nodeId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        ApiResponse<DirectAccessUrlEntry> localVarResp = requestDeletedNodeDirectAccessUrlWithHttpInfo(nodeId, requestContentUrlBodyCreate);
        return localVarResp.getData();
    }

    /**
     * Generate a direct access content URL
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @return ApiResponse&lt;DirectAccessUrlEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectAccessUrlEntry> requestDeletedNodeDirectAccessUrlWithHttpInfo(String nodeId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate) throws ApiException {
        okhttp3.Call localVarCall = requestDeletedNodeDirectAccessUrlValidateBeforeCall(nodeId, requestContentUrlBodyCreate, null);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a direct access content URL (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     * @param nodeId The identifier of a node. (required)
     * @param requestContentUrlBodyCreate Direct Access URL options and flags.  Note: It is up to the actual ContentStore implementation if it can fulfil this request or not.  The **attachment** flag controls the download method of the generated URL. It defaults  to **true**, meaning the value for the Content Disposition response header will be **attachment**.  **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false** is ignored, and the attachment will be returned in the response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or is not a file  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The actual ContentStore implementation can&#39;t fulfil this request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestDeletedNodeDirectAccessUrlAsync(String nodeId, DirectAccessUrlBodyCreate requestContentUrlBodyCreate, final ApiCallback<DirectAccessUrlEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestDeletedNodeDirectAccessUrlValidateBeforeCall(nodeId, requestContentUrlBodyCreate, _callback);
        Type localVarReturnType = new TypeToken<DirectAccessUrlEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreDeletedNode
     * @param nodeId The identifier of a node. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param deletedNodeBodyRestore The targetParentId if the node is restored to a new location. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **targetNodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to restore the deleted node or user does not have permission to the target node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist or the restore destination parent node does not exists  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Node name already exists in the restore destination </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to restore the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreDeletedNodeCall(String nodeId, List<String> fields, DeletedNodeBodyRestore deletedNodeBodyRestore, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deletedNodeBodyRestore;

        // create path and map variables
        String localVarPath = "/deleted-nodes/{nodeId}/restore"
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreDeletedNodeValidateBeforeCall(String nodeId, List<String> fields, DeletedNodeBodyRestore deletedNodeBodyRestore, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling restoreDeletedNode(Async)");
        }
        

        okhttp3.Call localVarCall = restoreDeletedNodeCall(nodeId, fields, deletedNodeBodyRestore, _callback);
        return localVarCall;

    }

    /**
     * Restore a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to restore the deleted node **nodeId** to its original location or to a new location.  If the node is successfully restored to its former primary parent, then only the primary child association will be restored, including recursively for any primary children. It should be noted that no other secondary child associations or peer associations will be restored, for any of the nodes within the primary parent-child hierarchy of restored nodes, irrespective of whether these associations were to nodes within or outside of the restored hierarchy.  Also, any previously shared link will not be restored since it is deleted at the time of delete of each node. 
     * @param nodeId The identifier of a node. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param deletedNodeBodyRestore The targetParentId if the node is restored to a new location. (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **targetNodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to restore the deleted node or user does not have permission to the target node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist or the restore destination parent node does not exists  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Node name already exists in the restore destination </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to restore the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NodeEntry restoreDeletedNode(String nodeId, List<String> fields, DeletedNodeBodyRestore deletedNodeBodyRestore) throws ApiException {
        ApiResponse<NodeEntry> localVarResp = restoreDeletedNodeWithHttpInfo(nodeId, fields, deletedNodeBodyRestore);
        return localVarResp.getData();
    }

    /**
     * Restore a deleted node
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to restore the deleted node **nodeId** to its original location or to a new location.  If the node is successfully restored to its former primary parent, then only the primary child association will be restored, including recursively for any primary children. It should be noted that no other secondary child associations or peer associations will be restored, for any of the nodes within the primary parent-child hierarchy of restored nodes, irrespective of whether these associations were to nodes within or outside of the restored hierarchy.  Also, any previously shared link will not be restored since it is deleted at the time of delete of each node. 
     * @param nodeId The identifier of a node. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param deletedNodeBodyRestore The targetParentId if the node is restored to a new location. (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **targetNodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to restore the deleted node or user does not have permission to the target node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist or the restore destination parent node does not exists  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Node name already exists in the restore destination </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to restore the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeEntry> restoreDeletedNodeWithHttpInfo(String nodeId, List<String> fields, DeletedNodeBodyRestore deletedNodeBodyRestore) throws ApiException {
        okhttp3.Call localVarCall = restoreDeletedNodeValidateBeforeCall(nodeId, fields, deletedNodeBodyRestore, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restore a deleted node (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to restore the deleted node **nodeId** to its original location or to a new location.  If the node is successfully restored to its former primary parent, then only the primary child association will be restored, including recursively for any primary children. It should be noted that no other secondary child associations or peer associations will be restored, for any of the nodes within the primary parent-child hierarchy of restored nodes, irrespective of whether these associations were to nodes within or outside of the restored hierarchy.  Also, any previously shared link will not be restored since it is deleted at the time of delete of each node. 
     * @param nodeId The identifier of a node. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param deletedNodeBodyRestore The targetParentId if the node is restored to a new location. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** or **targetNodeId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to restore the deleted node or user does not have permission to the target node </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist or the restore destination parent node does not exists  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Node name already exists in the restore destination </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Model integrity exception trying to restore the node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreDeletedNodeAsync(String nodeId, List<String> fields, DeletedNodeBodyRestore deletedNodeBodyRestore, final ApiCallback<NodeEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreDeletedNodeValidateBeforeCall(nodeId, fields, deletedNodeBodyRestore, _callback);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
