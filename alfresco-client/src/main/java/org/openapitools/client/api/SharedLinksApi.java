/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.RenditionEntry;
import org.openapitools.client.model.RenditionPaging;
import org.openapitools.client.model.SharedLinkBodyCreate;
import org.openapitools.client.model.SharedLinkBodyEmail;
import org.openapitools.client.model.SharedLinkEntry;
import org.openapitools.client.model.SharedLinkPaging;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SharedLinksApi {
    private ApiClient localVarApiClient;

    public SharedLinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SharedLinksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createSharedLink
     * @param sharedLinkBodyCreate The nodeId to create a shared link for. (required)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or does not identify a file, or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date has already passed  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to create **sharedId** (for example, no read permission) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Shared link already exists for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSharedLinkCall(SharedLinkBodyCreate sharedLinkBodyCreate, List<String> include, List<String> fields, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sharedLinkBodyCreate;

        // create path and map variables
        String localVarPath = "/shared-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSharedLinkValidateBeforeCall(SharedLinkBodyCreate sharedLinkBodyCreate, List<String> include, List<String> fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedLinkBodyCreate' is set
        if (sharedLinkBodyCreate == null) {
            throw new ApiException("Missing the required parameter 'sharedLinkBodyCreate' when calling createSharedLink(Async)");
        }
        

        okhttp3.Call localVarCall = createSharedLinkCall(sharedLinkBodyCreate, include, fields, _callback);
        return localVarCall;

    }

    /**
     * Create a shared link to a file
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set, so the shared link would become invalid when the expiry date is reached. For example:  &#x60;&#x60;&#x60;JSON   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-3333333333\&quot;,     \&quot;expiresAt\&quot;: \&quot;2017-03-23T23:00:00.000+0000\&quot;   } &#x60;&#x60;&#x60;  **Note:** You can create shared links to more than one file specifying a list of **nodeId**s in the JSON body like this:  &#x60;&#x60;&#x60;JSON [   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-4444444444\&quot;   },   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-5555555555\&quot;   } ] &#x60;&#x60;&#x60; If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  &#x60;&#x60;&#x60;JSON {   \&quot;list\&quot;: {     \&quot;pagination\&quot;: {       \&quot;count\&quot;: 2,       \&quot;hasMoreItems\&quot;: false,       \&quot;totalItems\&quot;: 2,       \&quot;skipCount\&quot;: 0,       \&quot;maxItems\&quot;: 100     },     \&quot;entries\&quot;: [       {         \&quot;entry\&quot;: {           ...         }       },       {         \&quot;entry\&quot;: {           ...         }       }     ]   } } &#x60;&#x60;&#x60; 
     * @param sharedLinkBodyCreate The nodeId to create a shared link for. (required)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return SharedLinkEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or does not identify a file, or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date has already passed  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to create **sharedId** (for example, no read permission) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Shared link already exists for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedLinkEntry createSharedLink(SharedLinkBodyCreate sharedLinkBodyCreate, List<String> include, List<String> fields) throws ApiException {
        ApiResponse<SharedLinkEntry> localVarResp = createSharedLinkWithHttpInfo(sharedLinkBodyCreate, include, fields);
        return localVarResp.getData();
    }

    /**
     * Create a shared link to a file
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set, so the shared link would become invalid when the expiry date is reached. For example:  &#x60;&#x60;&#x60;JSON   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-3333333333\&quot;,     \&quot;expiresAt\&quot;: \&quot;2017-03-23T23:00:00.000+0000\&quot;   } &#x60;&#x60;&#x60;  **Note:** You can create shared links to more than one file specifying a list of **nodeId**s in the JSON body like this:  &#x60;&#x60;&#x60;JSON [   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-4444444444\&quot;   },   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-5555555555\&quot;   } ] &#x60;&#x60;&#x60; If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  &#x60;&#x60;&#x60;JSON {   \&quot;list\&quot;: {     \&quot;pagination\&quot;: {       \&quot;count\&quot;: 2,       \&quot;hasMoreItems\&quot;: false,       \&quot;totalItems\&quot;: 2,       \&quot;skipCount\&quot;: 0,       \&quot;maxItems\&quot;: 100     },     \&quot;entries\&quot;: [       {         \&quot;entry\&quot;: {           ...         }       },       {         \&quot;entry\&quot;: {           ...         }       }     ]   } } &#x60;&#x60;&#x60; 
     * @param sharedLinkBodyCreate The nodeId to create a shared link for. (required)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return ApiResponse&lt;SharedLinkEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or does not identify a file, or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date has already passed  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to create **sharedId** (for example, no read permission) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Shared link already exists for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedLinkEntry> createSharedLinkWithHttpInfo(SharedLinkBodyCreate sharedLinkBodyCreate, List<String> include, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = createSharedLinkValidateBeforeCall(sharedLinkBodyCreate, include, fields, null);
        Type localVarReturnType = new TypeToken<SharedLinkEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a shared link to a file (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set, so the shared link would become invalid when the expiry date is reached. For example:  &#x60;&#x60;&#x60;JSON   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-3333333333\&quot;,     \&quot;expiresAt\&quot;: \&quot;2017-03-23T23:00:00.000+0000\&quot;   } &#x60;&#x60;&#x60;  **Note:** You can create shared links to more than one file specifying a list of **nodeId**s in the JSON body like this:  &#x60;&#x60;&#x60;JSON [   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-4444444444\&quot;   },   {     \&quot;nodeId\&quot;: \&quot;1ff9da1a-ee2f-4b9c-8c34-5555555555\&quot;   } ] &#x60;&#x60;&#x60; If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  &#x60;&#x60;&#x60;JSON {   \&quot;list\&quot;: {     \&quot;pagination\&quot;: {       \&quot;count\&quot;: 2,       \&quot;hasMoreItems\&quot;: false,       \&quot;totalItems\&quot;: 2,       \&quot;skipCount\&quot;: 0,       \&quot;maxItems\&quot;: 100     },     \&quot;entries\&quot;: [       {         \&quot;entry\&quot;: {           ...         }       },       {         \&quot;entry\&quot;: {           ...         }       }     ]   } } &#x60;&#x60;&#x60; 
     * @param sharedLinkBodyCreate The nodeId to create a shared link for. (required)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **nodeId** is not a valid format, or does not identify a file, or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date has already passed  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to create **sharedId** (for example, no read permission) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **nodeId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Shared link already exists for **nodeId** </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSharedLinkAsync(SharedLinkBodyCreate sharedLinkBodyCreate, List<String> include, List<String> fields, final ApiCallback<SharedLinkEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSharedLinkValidateBeforeCall(sharedLinkBodyCreate, include, fields, _callback);
        Type localVarReturnType = new TypeToken<SharedLinkEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSharedLink
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete **sharedId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSharedLinkCall(String sharedId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared-links/{sharedId}"
            .replaceAll("\\{" + "sharedId" + "\\}", localVarApiClient.escapeString(sharedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSharedLinkValidateBeforeCall(String sharedId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedId' is set
        if (sharedId == null) {
            throw new ApiException("Missing the required parameter 'sharedId' when calling deleteSharedLink(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSharedLinkCall(sharedId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the shared link with identifier **sharedId**. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete **sharedId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSharedLink(String sharedId) throws ApiException {
        deleteSharedLinkWithHttpInfo(sharedId);
    }

    /**
     * Deletes a shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the shared link with identifier **sharedId**. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete **sharedId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSharedLinkWithHttpInfo(String sharedId) throws ApiException {
        okhttp3.Call localVarCall = deleteSharedLinkValidateBeforeCall(sharedId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a shared link (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the shared link with identifier **sharedId**. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Current user does not have permission to delete **sharedId** </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSharedLinkAsync(String sharedId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSharedLinkValidateBeforeCall(sharedId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailSharedLink
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param sharedLinkBodyEmail The shared link email to send. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format or **sharedLinkBodyEmail** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist or **client** is not registered  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailSharedLinkCall(String sharedId, SharedLinkBodyEmail sharedLinkBodyEmail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sharedLinkBodyEmail;

        // create path and map variables
        String localVarPath = "/shared-links/{sharedId}/email"
            .replaceAll("\\{" + "sharedId" + "\\}", localVarApiClient.escapeString(sharedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailSharedLinkValidateBeforeCall(String sharedId, SharedLinkBodyEmail sharedLinkBodyEmail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedId' is set
        if (sharedId == null) {
            throw new ApiException("Missing the required parameter 'sharedId' when calling emailSharedLink(Async)");
        }
        
        // verify the required parameter 'sharedLinkBodyEmail' is set
        if (sharedLinkBodyEmail == null) {
            throw new ApiException("Missing the required parameter 'sharedLinkBodyEmail' when calling emailSharedLink(Async)");
        }
        

        okhttp3.Call localVarCall = emailSharedLinkCall(sharedId, sharedLinkBodyEmail, _callback);
        return localVarCall;

    }

    /**
     * Email shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Sends email with app-specific url including identifier **sharedId**.  The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;myClient\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;, \&quot;joe.bloggs@acme.com\&quot;] } &#x60;&#x60;&#x60; A plain text message property can be optionally provided in the request body to customise the sent email. Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco). For example, to email a shared link with a messages and a locale: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;myClient\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;, \&quot;joe.bloggs@acme.com\&quot;],     \&quot;message\&quot;: \&quot;myMessage\&quot;,     \&quot;locale\&quot;:\&quot;en-GB\&quot; } &#x60;&#x60;&#x60; **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box  share is registered as a default client, so you could pass **share** as the client name: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;share\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;] } &#x60;&#x60;&#x60; 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param sharedLinkBodyEmail The shared link email to send. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format or **sharedLinkBodyEmail** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist or **client** is not registered  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void emailSharedLink(String sharedId, SharedLinkBodyEmail sharedLinkBodyEmail) throws ApiException {
        emailSharedLinkWithHttpInfo(sharedId, sharedLinkBodyEmail);
    }

    /**
     * Email shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Sends email with app-specific url including identifier **sharedId**.  The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;myClient\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;, \&quot;joe.bloggs@acme.com\&quot;] } &#x60;&#x60;&#x60; A plain text message property can be optionally provided in the request body to customise the sent email. Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco). For example, to email a shared link with a messages and a locale: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;myClient\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;, \&quot;joe.bloggs@acme.com\&quot;],     \&quot;message\&quot;: \&quot;myMessage\&quot;,     \&quot;locale\&quot;:\&quot;en-GB\&quot; } &#x60;&#x60;&#x60; **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box  share is registered as a default client, so you could pass **share** as the client name: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;share\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;] } &#x60;&#x60;&#x60; 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param sharedLinkBodyEmail The shared link email to send. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format or **sharedLinkBodyEmail** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist or **client** is not registered  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> emailSharedLinkWithHttpInfo(String sharedId, SharedLinkBodyEmail sharedLinkBodyEmail) throws ApiException {
        okhttp3.Call localVarCall = emailSharedLinkValidateBeforeCall(sharedId, sharedLinkBodyEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Email shared link (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Sends email with app-specific url including identifier **sharedId**.  The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;myClient\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;, \&quot;joe.bloggs@acme.com\&quot;] } &#x60;&#x60;&#x60; A plain text message property can be optionally provided in the request body to customise the sent email. Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco). For example, to email a shared link with a messages and a locale: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;myClient\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;, \&quot;joe.bloggs@acme.com\&quot;],     \&quot;message\&quot;: \&quot;myMessage\&quot;,     \&quot;locale\&quot;:\&quot;en-GB\&quot; } &#x60;&#x60;&#x60; **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box  share is registered as a default client, so you could pass **share** as the client name: &#x60;&#x60;&#x60;JSON {     \&quot;client\&quot;: \&quot;share\&quot;,     \&quot;recipientEmails\&quot;: [\&quot;john.doe@acme.com\&quot;] } &#x60;&#x60;&#x60; 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param sharedLinkBodyEmail The shared link email to send. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format or **sharedLinkBodyEmail** invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist or **client** is not registered  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailSharedLinkAsync(String sharedId, SharedLinkBodyEmail sharedLinkBodyEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailSharedLinkValidateBeforeCall(sharedId, sharedLinkBodyEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSharedLink
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkCall(String sharedId, List<String> fields, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared-links/{sharedId}"
            .replaceAll("\\{" + "sharedId" + "\\}", localVarApiClient.escapeString(sharedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedLinkValidateBeforeCall(String sharedId, List<String> fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedId' is set
        if (sharedId == null) {
            throw new ApiException("Missing the required parameter 'sharedId' when calling getSharedLink(Async)");
        }
        

        okhttp3.Call localVarCall = getSharedLinkCall(sharedId, fields, _callback);
        return localVarCall;

    }

    /**
     * Get a shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets minimal information for the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return SharedLinkEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedLinkEntry getSharedLink(String sharedId, List<String> fields) throws ApiException {
        ApiResponse<SharedLinkEntry> localVarResp = getSharedLinkWithHttpInfo(sharedId, fields);
        return localVarResp.getData();
    }

    /**
     * Get a shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets minimal information for the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return ApiResponse&lt;SharedLinkEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedLinkEntry> getSharedLinkWithHttpInfo(String sharedId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getSharedLinkValidateBeforeCall(sharedId, fields, null);
        Type localVarReturnType = new TypeToken<SharedLinkEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a shared link (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets minimal information for the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkAsync(String sharedId, List<String> fields, final ApiCallback<SharedLinkEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedLinkValidateBeforeCall(sharedId, fields, _callback);
        Type localVarReturnType = new TypeToken<SharedLinkEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSharedLinkContent
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkContentCall(String sharedId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared-links/{sharedId}/content"
            .replaceAll("\\{" + "sharedId" + "\\}", localVarApiClient.escapeString(sharedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment", attachment));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedLinkContentValidateBeforeCall(String sharedId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedId' is set
        if (sharedId == null) {
            throw new ApiException("Missing the required parameter 'sharedId' when calling getSharedLinkContent(Async)");
        }
        

        okhttp3.Call localVarCall = getSharedLinkContentCall(sharedId, attachment, ifModifiedSince, range, _callback);
        return localVarCall;

    }

    /**
     * Get shared link content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File getSharedLinkContent(String sharedId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        ApiResponse<File> localVarResp = getSharedLinkContentWithHttpInfo(sharedId, attachment, ifModifiedSince, range);
        return localVarResp.getData();
    }

    /**
     * Get shared link content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getSharedLinkContentWithHttpInfo(String sharedId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        okhttp3.Call localVarCall = getSharedLinkContentValidateBeforeCall(sharedId, attachment, ifModifiedSince, range, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shared link content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkContentAsync(String sharedId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedLinkContentValidateBeforeCall(sharedId, attachment, ifModifiedSince, range, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSharedLinkRendition
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId**  or **renditionId** does not exist (ie. not CREATED)  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkRenditionCall(String sharedId, String renditionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared-links/{sharedId}/renditions/{renditionId}"
            .replaceAll("\\{" + "sharedId" + "\\}", localVarApiClient.escapeString(sharedId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedLinkRenditionValidateBeforeCall(String sharedId, String renditionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedId' is set
        if (sharedId == null) {
            throw new ApiException("Missing the required parameter 'sharedId' when calling getSharedLinkRendition(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getSharedLinkRendition(Async)");
        }
        

        okhttp3.Call localVarCall = getSharedLinkRenditionCall(sharedId, renditionId, _callback);
        return localVarCall;

    }

    /**
     * Get shared link rendition information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return RenditionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId**  or **renditionId** does not exist (ie. not CREATED)  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionEntry getSharedLinkRendition(String sharedId, String renditionId) throws ApiException {
        ApiResponse<RenditionEntry> localVarResp = getSharedLinkRenditionWithHttpInfo(sharedId, renditionId);
        return localVarResp.getData();
    }

    /**
     * Get shared link rendition information
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @return ApiResponse&lt;RenditionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId**  or **renditionId** does not exist (ie. not CREATED)  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionEntry> getSharedLinkRenditionWithHttpInfo(String sharedId, String renditionId) throws ApiException {
        okhttp3.Call localVarCall = getSharedLinkRenditionValidateBeforeCall(sharedId, renditionId, null);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shared link rendition information (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId**  or **renditionId** does not exist (ie. not CREATED)  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkRenditionAsync(String sharedId, String renditionId, final ApiCallback<RenditionEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedLinkRenditionValidateBeforeCall(sharedId, renditionId, _callback);
        Type localVarReturnType = new TypeToken<RenditionEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSharedLinkRenditionContent
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkRenditionContentCall(String sharedId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared-links/{sharedId}/renditions/{renditionId}/content"
            .replaceAll("\\{" + "sharedId" + "\\}", localVarApiClient.escapeString(sharedId.toString()))
            .replaceAll("\\{" + "renditionId" + "\\}", localVarApiClient.escapeString(renditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment", attachment));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedLinkRenditionContentValidateBeforeCall(String sharedId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedId' is set
        if (sharedId == null) {
            throw new ApiException("Missing the required parameter 'sharedId' when calling getSharedLinkRenditionContent(Async)");
        }
        
        // verify the required parameter 'renditionId' is set
        if (renditionId == null) {
            throw new ApiException("Missing the required parameter 'renditionId' when calling getSharedLinkRenditionContent(Async)");
        }
        

        okhttp3.Call localVarCall = getSharedLinkRenditionContentCall(sharedId, renditionId, attachment, ifModifiedSince, range, _callback);
        return localVarCall;

    }

    /**
     * Get shared link rendition content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public File getSharedLinkRenditionContent(String sharedId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        ApiResponse<File> localVarResp = getSharedLinkRenditionContentWithHttpInfo(sharedId, renditionId, attachment, ifModifiedSince, range);
        return localVarResp.getData();
    }

    /**
     * Get shared link rendition content
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getSharedLinkRenditionContentWithHttpInfo(String sharedId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range) throws ApiException {
        okhttp3.Call localVarCall = getSharedLinkRenditionContentValidateBeforeCall(sharedId, renditionId, attachment, ifModifiedSince, range, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shared link rendition content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param renditionId The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     * @param ifModifiedSince Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     * @param range The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Content has not been modified since the date provided in the If-Modified-Since header </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Content is archived and is inaccessible  </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharedLinkRenditionContentAsync(String sharedId, String renditionId, Boolean attachment, OffsetDateTime ifModifiedSince, String range, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedLinkRenditionContentValidateBeforeCall(sharedId, renditionId, attachment, ifModifiedSince, range, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSharedLinkRenditions
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSharedLinkRenditionsCall(String sharedId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared-links/{sharedId}/renditions"
            .replaceAll("\\{" + "sharedId" + "\\}", localVarApiClient.escapeString(sharedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSharedLinkRenditionsValidateBeforeCall(String sharedId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sharedId' is set
        if (sharedId == null) {
            throw new ApiException("Missing the required parameter 'sharedId' when calling listSharedLinkRenditions(Async)");
        }
        

        okhttp3.Call localVarCall = listSharedLinkRenditionsCall(sharedId, _callback);
        return localVarCall;

    }

    /**
     * List renditions for a shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information, including the rendition id, for each rendition where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @return RenditionPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RenditionPaging listSharedLinkRenditions(String sharedId) throws ApiException {
        ApiResponse<RenditionPaging> localVarResp = listSharedLinkRenditionsWithHttpInfo(sharedId);
        return localVarResp.getData();
    }

    /**
     * List renditions for a shared link
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information, including the rendition id, for each rendition where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @return ApiResponse&lt;RenditionPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenditionPaging> listSharedLinkRenditionsWithHttpInfo(String sharedId) throws ApiException {
        okhttp3.Call localVarCall = listSharedLinkRenditionsValidateBeforeCall(sharedId, null);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List renditions for a shared link (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information, including the rendition id, for each rendition where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     * @param sharedId The identifier of a shared link to a file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: **sharedId** is not a valid format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **sharedId** does not exist  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSharedLinkRenditionsAsync(String sharedId, final ApiCallback<RenditionPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSharedLinkRenditionsValidateBeforeCall(sharedId, _callback);
        Type localVarReturnType = new TypeToken<RenditionPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSharedLinks
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param where Optionally filter the list by \&quot;sharedByUser\&quot; userid of person who shared the link (can also use -me-)  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  (optional)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSharedLinksCall(Integer skipCount, Integer maxItems, String where, List<String> include, List<String> fields, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCount", skipCount));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxItems", maxItems));
        }

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSharedLinksValidateBeforeCall(Integer skipCount, Integer maxItems, String where, List<String> include, List<String> fields, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listSharedLinksCall(skipCount, maxItems, where, include, fields, _callback);
        return localVarCall;

    }

    /**
     * List shared links
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Get a list of links that the current user has read permission on source node.  The list is ordered in descending modified order.  **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately. 
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param where Optionally filter the list by \&quot;sharedByUser\&quot; userid of person who shared the link (can also use -me-)  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  (optional)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return SharedLinkPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedLinkPaging listSharedLinks(Integer skipCount, Integer maxItems, String where, List<String> include, List<String> fields) throws ApiException {
        ApiResponse<SharedLinkPaging> localVarResp = listSharedLinksWithHttpInfo(skipCount, maxItems, where, include, fields);
        return localVarResp.getData();
    }

    /**
     * List shared links
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Get a list of links that the current user has read permission on source node.  The list is ordered in descending modified order.  **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately. 
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param where Optionally filter the list by \&quot;sharedByUser\&quot; userid of person who shared the link (can also use -me-)  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  (optional)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @return ApiResponse&lt;SharedLinkPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedLinkPaging> listSharedLinksWithHttpInfo(Integer skipCount, Integer maxItems, String where, List<String> include, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = listSharedLinksValidateBeforeCall(skipCount, maxItems, where, include, fields, null);
        Type localVarReturnType = new TypeToken<SharedLinkPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List shared links (asynchronously)
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Get a list of links that the current user has read permission on source node.  The list is ordered in descending modified order.  **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately. 
     * @param skipCount The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     * @param maxItems The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     * @param where Optionally filter the list by \&quot;sharedByUser\&quot; userid of person who shared the link (can also use -me-)  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  (optional)
     * @param include Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     * @param fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter: value of **maxItems** or **skipCount** is invalid  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Shared links are disabled for the system </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSharedLinksAsync(Integer skipCount, Integer maxItems, String where, List<String> include, List<String> fields, final ApiCallback<SharedLinkPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSharedLinksValidateBeforeCall(skipCount, maxItems, where, include, fields, _callback);
        Type localVarReturnType = new TypeToken<SharedLinkPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
