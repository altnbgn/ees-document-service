openapi: 3.0.1
info:
  description: |
    **Core API**

    Provides access to the core features of Alfresco Content Services.
  title: Alfresco Content Services REST API
  version: "1"
servers:
- url: /alfresco/api/-default-/public/alfresco/versions/1
security:
- basicAuth: []
tags:
- description: Retrieve and clear audit entries
  name: audit
- description: Retrieve and execute actions
  name: actions
- description: Retrieve and manage activities
  name: activities
- description: Retrieve and manage comments
  name: comments
- description: Create and manage downloads
  name: downloads
- description: Retrieve and manage favorites
  name: favorites
- description: Retrieve and manage networks
  name: networks
- description: Retrieve and manage nodes
  name: nodes
- description: Retrieve and manage people
  name: people
- description: Retrieve and manage groups
  name: groups
- description: Retrieve and manage preferences
  name: preferences
- description: Check readiness and liveness of the repository
  name: probes
- description: Find nodes, sites, and people using a simple search term
  name: queries
- description: Retrieve and manage ratings
  name: ratings
- description: Retrieve and manage file renditions
  name: renditions
- description: Retrieve and manage public shared links
  name: shared-links
- description: Retrieve and manage sites
  name: sites
- description: Storage information for content
  name: storage-info
- description: Retrieve and manage tags
  name: tags
- description: Retrieve and manage deleted nodes
  name: trashcan
- description: Retrieve and manage versions
  name: versions
paths:
  /nodes/{nodeId}/comments:
    get:
      description: Gets a list of comments for the node **nodeId**, sorted chronologically
        with the newest comment first.
      operationId: listComments
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** exists but does not identify a file or a folder,
            or the value of **maxItems** is invalid, or the value of **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission read comments on the node
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List comments
      tags:
      - comments
      x-accepts: application/json
    post:
      description: |
        Creates a comment on node **nodeId**. You specify the comment in a JSON body like this:

        ```JSON
        {
          "content": "This is a comment"
        }
        ```

        **Note:** You can create more than one comment by
        specifying a list of comments in the JSON body like this:

        ```JSON
        [
          {
            "content": "This is a comment"
          },
          {
            "content": "This is another comment"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createComment
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
        description: The comment text. Note that you can also provide a list of comments.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **commentBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to create a comment
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "405":
          content: {}
          description: Cannot comment on a node of this type
        "409":
          content: {}
          description: |
            **nodeId** is locked and you are not the lock owner
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a comment
      tags:
      - comments
      x-codegen-request-body-name: commentBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/comments/{commentId}:
    delete:
      description: Deletes the comment **commentId** from node **nodeId**.
      operationId: deleteComment
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a comment.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to delete a comment
        "404":
          content: {}
          description: |
            **nodeId** or **commentId** does not exist
        "409":
          content: {}
          description: |
            **nodeId** is locked and you are not the lock owner
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a comment
      tags:
      - comments
      x-accepts: application/json
    put:
      description: Updates an existing comment **commentId** on node **nodeId**.
      operationId: updateComment
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a comment.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
        description: The JSON representing the comment to be updated.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **commentBodyUpdate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to update a comment
        "404":
          content: {}
          description: |
            **nodeId** or **commentId** does not exist
        "409":
          content: {}
          description: |
            **nodeId** is locked and you are not the lock owner
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a comment
      tags:
      - comments
      x-codegen-request-body-name: commentBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/ratings:
    get:
      description: Gets a list of ratings for node **nodeId**.
      operationId: listRatings
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List ratings
      tags:
      - ratings
      x-accepts: application/json
    post:
      description: Create a rating for the node with identifier **nodeId**
      operationId: createRating
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingBody'
        description: |
          For "myRating" the type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.

          For example, to "like" a file the following body would be used:

          ```JSON
            {
              "id": "likes",
              "myRating": true
            }
          ```
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **ratingBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "405":
          content: {}
          description: Cannot rate a node of this type
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a rating
      tags:
      - ratings
      x-codegen-request-body-name: ratingBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/ratings/{ratingId}:
    delete:
      description: Deletes rating **ratingId** from node **nodeId**.
      operationId: deleteRating
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a rating.
        in: path
        name: ratingId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: unknown rating scheme specified
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a rating
      tags:
      - ratings
      x-accepts: application/json
    get:
      description: Get the specific rating **ratingId** on node **nodeId**.
      operationId: getRating
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a rating.
        in: path
        name: ratingId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: unknown rating scheme specified
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a rating
      tags:
      - ratings
      x-accepts: application/json
  /nodes/{nodeId}/tags:
    get:
      description: Gets a list of tags for node **nodeId**.
      operationId: listTagsForNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to read tags on the node
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List tags for a node
      tags:
      - tags
      x-accepts: application/json
    post:
      description: |
        Creates a tag on the node **nodeId**. You specify the tag in a JSON body like this:

        ```JSON
        {
          "tag":"test-tag-1"
        }
        ```

        **Note:** You can create more than one tag by
        specifying a list of tags in the JSON body like this:

        ```JSON
        [
          {
            "tag":"test-tag-1"
          },
          {
            "tag":"test-tag-2"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                 ...
                }
              }
            ]
          }
        }
        ```
      operationId: createTagForNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagBody'
        description: The new tag
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **tagBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to create tags on the node
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "405":
          content: {}
          description: Cannot tag a node of this type
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a tag for a node
      tags:
      - tags
      x-codegen-request-body-name: tagBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/tags/{tagId}:
    delete:
      description: Deletes tag **tagId** from node **nodeId**.
      operationId: deleteTagFromNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a tag.
        in: path
        name: tagId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to delete the tag
        "404":
          content: {}
          description: |
            **nodeId** or **tagId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a tag from a node
      tags:
      - tags
      x-accepts: application/json
  /nodes/{nodeId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the node **nodeId**.

        If **nodeId** is a folder, then its children are also deleted.

        Deleted nodes move to the trashcan unless the **permanent** query parameter is **true** and the current user is the owner of the node or an admin.

        Deleting a node deletes it from its primary parent and also from any secondary parents. Peer associations are also deleted, where the deleted
        node is either a source or target of an association. This applies recursively to any hierarchy of primary children of the deleted node.

        **Note:** If the node is not permanently deleted, and is later successfully restored to its former primary parent, then the primary
        child association is restored. This applies recursively for any primary children. No other secondary child associations or
        peer associations are restored for any of the nodes in the primary parent-child hierarchy of restored nodes, regardless of whether the original
        associations were to nodes inside or outside the restored hierarchy.
      operationId: deleteNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          If **true** then the node is deleted permanently, without moving to the trashcan.
          Only the owner of the node or an admin can permanently delete the node.
        in: query
        name: permanent
        schema:
          default: false
          type: boolean
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "409":
          content: {}
          description: |
            **nodeId** is locked and cannot be deleted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Get information for node **nodeId**.

        You can use the **include** parameter to return additional information.
      operationId: getNode
      parameters:
      - description: |
          The identifier of a node. You can also use one of these well-known aliases:
          * -my-
          * -shared-
          * -root-
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A path relative to the **nodeId**. If you set this,
          information is returned on the node resolved by this path.
        in: query
        name: relativePath
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to retrieve **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Updates the node **nodeId**. For example, you can rename a file or folder:
        ```JSON
        {
          "name":"My new name"
        }
        ```
        You can also set or update one or more properties:
        ```JSON
        {
          "properties":
          {
            "cm:title":"Folder title"
          }
        }
        ```
        You can update multi-value properties of a node which supports properties of type multiple.
         ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"custom:destination",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder",
            "custom:locations": [
                                 "location NewX",
                                 "location NewY"
                                ]
          }
        }
        ```

        **Note:** setting properties of type d:content and d:category are not supported.

        **Note:** if you want to add or remove aspects, then you must use **GET /nodes/{nodeId}** first to get the complete set of *aspectNames*.

        You can add (or remove) *locallySet* permissions, if any, in addition to any inherited permissions.
        You can also optionally disable (or re-enable) inherited permissions via *isInheritanceEnabled* flag:
        ```JSON
        {
          "permissions":
            {
              "isInheritanceEnabled": false,
              "locallySet":
                [
                  {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
                  {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
                ]
            }
        }
        ```
        **Note:** if you want to add or remove locally set permissions then you must use **GET /nodes/{nodeId}** first to get the complete set of *locallySet* permissions.

        **Note:** Currently there is no optimistic locking for updates, so they are applied in "last one wins" order.
      operationId: updateNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyUpdate'
        description: The node information to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: the update request is invalid or **nodeId** is not a valid format or **nodeBodyUpdate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to update **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "409":
          content: {}
          description: Updated name clashes with an existing node in the current parent
            folder
        "422":
          content: {}
          description: Model integrity exception including a file name containing
            invalid characters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/children:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of children of the parent node **nodeId**.

        Minimal information for each child is returned by default.

        You can use the **include** parameter to return additional information.

        The list of child nodes includes primary children and secondary children, if there are any.

        You can use the **include** parameter (include=association) to return child association details
        for each child, including the **assocTyp**e and the **isPrimary** flag.

        The default sort order for the returned list is for folders to be sorted before files, and by ascending name.

        You can override the default using **orderBy** to specify one or more fields to sort by. The default order is always ascending, but
        you can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.

        For example, specifying ```orderBy=name DESC``` returns a mixed folder/file list in descending **name** order.

        You can use any of the following fields to order the results:
        * isFolder
        * name
        * mimeType
        * nodeType
        * sizeInBytes
        * modifiedAt
        * createdAt
        * modifiedByUser
        * createdByUser
      operationId: listNodeChildren
      parameters:
      - description: |
          The identifier of a node. You can also use one of these well-known aliases:
          * -my-
          * -shared-
          * -root-
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Optionally filter the list. Here are some examples:

          *   ```where=(isFolder=true)```

          *   ```where=(isFile=true)```

          *   ```where=(nodeType='my:specialNodeType')```

          *   ```where=(nodeType='my:specialNodeType INCLUDESUBTYPES')```

          *   ```where=(isPrimary=true)```

          *   ```where=(assocType='my:specialAssocType')```

          *   ```where=(isPrimary=false and assocType='my:specialAssocType')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * aspectNames
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * properties
          * permissions
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Return information on children in the folder resolved by this
          path. The path is relative to **nodeId**.
        in: query
        name: relativePath
        schema:
          type: string
      - description: Also include **source** in addition to **entries** with folder
          information on the parent node – either the specified parent **nodeId**,
          or as resolved by **relativePath**.
        in: query
        name: includeSource
        schema:
          type: boolean
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeChildAssociationPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, **nodeId** is not a folder or **orderBy** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to retrieve children
            of **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List node children
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a node and add it as a primary child of node **nodeId**.

        This endpoint supports both JSON and multipart/form-data (file upload).

        **Using multipart/form-data**

        Use the **filedata** field to represent the content to upload, for example, the following curl command will
        create a node with the contents of test.txt in the test user's home folder.

        ```curl -utest:test -X POST host:port/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children -F filedata=@test.txt```

        You can use the **name** field to give an alternative name for the new file.

        You can use the **nodeType** field to create a specific type. The default is cm:content.

        You can use the **renditions** field to create renditions (e.g. doclib) asynchronously upon upload.
        Also, as requesting rendition is a background process,
        any rendition failure (e.g. No transformer is currently available) will not fail the whole upload and has the potential to silently fail.

        Use **overwrite** to overwrite an existing file, matched by name. If the file is versionable,
        the existing content is replaced. It is not possible to overwrite an existing file which is not versionable.

        When you overwrite existing content, you can set the **majorVersion** boolean field to **true** to indicate a major version
        should be created. The default for **majorVersion** is **false**.

        When you overwrite existing content, you can use the **comment** field to add a version comment that appears in the
        version history. This also enables versioning of this node, if it is not already versioned.

        You can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then
        the API method tries to create a unique name using an integer suffix.

        You can use the **relativePath** field to specify the folder structure to create relative to the node **nodeId**.
        Folders in the **relativePath** that do not exist are created before the node is created.

        Any other field provided will be treated as a property to set on the newly created node.

        **Note:** setting properties of type d:content and d:category are not supported.

        **Note:** When creating a new node using multipart/form-data by default versioning is enabled and set to MAJOR Version.
        Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.

        | **versioningEnabled** | **majorVersion** | **Version Type** |
        |-----------------------|------------------|------------------|
        |        unset          |        unset     |    MAJOR         |
        |        unset          |        true      |    MAJOR         |
        |        unset          |        false     |    MINOR         |
        |        true           |        unset     |    MAJOR         |
        |        true           |        true      |    MAJOR         |
        |        true           |        false     |    MINOR         |
        |        false          |        true      |    Unversioned   |
        |        false          |        false     |    Unversioned   |
        |        false          |        true      |    Unversioned   |
        <br>

        **Using JSON**

        You must specify at least a **name** and **nodeType**. For example, to create a folder:
        ```JSON
        {
          "name":"My Folder",
          "nodeType":"cm:folder"
        }
        ```

        You can create an empty file like this:
        ```JSON
        {
          "name":"My text file.txt",
          "nodeType":"cm:content"
        }
        ```
        You can update binary content using the ```PUT /nodes/{nodeId}``` API method.

        You can create a folder, or other node, inside a folder hierarchy:
        ```JSON
        {
          "name":"My Special Folder",
          "nodeType":"cm:folder",
          "relativePath":"X/Y/Z"
        }
        ```
        The **relativePath** specifies the folder structure to create relative to the node **nodeId**. Folders in the
        **relativePath** that do not exist are created before the node is created.

        You can set properties when you create a new node:
        ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"cm:folder",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder"
          }
        }
        ```

        You can set multi-value properties when you create a new node which supports properties of type multiple.
         ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"custom:destination",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder",
            "custom:locations": [
                                 "location X",
                                 "location Y"
                                ]
          }
        }
        ```

        Any missing aspects are applied automatically. For example, **cm:titled** in the JSON shown above. You can set aspects
        explicitly, if needed, using an **aspectNames** field.

        **Note:** setting properties of type d:content and d:category are not supported.

        You can also optionally disable (or enable) inherited permissions via *isInheritanceEnabled* flag:
        ```JSON
        {
          "permissions":
            {
              "isInheritanceEnabled": false,
              "locallySet":
                [
                  {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
                  {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
                ]
            }
        }
        ```

        Typically, for files and folders, the primary children are created within the parent folder using the default "cm:contains" assocType.
        If the content model allows then it is also possible to create primary children with a different assoc type. For example:
        ```JSON
        {
          "name":"My Node",
          "nodeType":"my:specialNodeType",
          "association":
          {
            "assocType":"my:specialAssocType"
          }
        }
        ```

        Additional associations can be added after creating a node. You can also add associations at the time the node is created. This is
        required, for example, if the content model specifies that a node has mandatory associations to one or more existing nodes. You can optionally
        specify an array of **secondaryChildren** to create one or more secondary child associations, such that the newly created node acts as a parent node.
        You can optionally specify an array of **targets** to create one or more peer associations such that the newly created node acts as a source node.
        For example, to associate one or more secondary children at time of creation:
        ```JSON
        {
          "name":"My Folder",
          "nodeType":"cm:folder",
          "secondaryChildren":
            [ {"childId":"abcde-01234-...", "assocType":"my:specialChildAssocType"} ]
        }
        ```
        For example, to associate one or more targets at time of creation:
        ```JSON
        {
          "name":"My Folder",
          "nodeType":"cm:folder",
          "targets":
            [ {"targetId":"abcde-01234-...", "assocType":"my:specialPeerAssocType"} ]
        }
        ```

        **Note:** You can create more than one child by
        specifying a list of nodes in the JSON body. For example, the following JSON
        body creates two folders inside the specified **nodeId**, if the **nodeId** identifies
        a folder:

        ```JSON
        [
          {
            "name":"My Folder 1",
            "nodeType":"cm:folder"
          },
          {
            "name":"My Folder 2",
            "nodeType":"cm:folder"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
        **Note:** When creating a new node using JSON by default versioning is disabled.
        Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.

        | **versioningEnabled** | **majorVersion** | **Version Type** |
        |-----------------------|------------------|------------------|
        |        unset          |        unset     |    Unversioned   |
        |        unset          |        true      |    MAJOR         |
        |        unset          |        false     |    MINOR         |
        |        true           |        unset     |    MAJOR         |
        |        true           |        true      |    MAJOR         |
        |        true           |        false     |    MINOR         |
        |        false          |        true      |    Unversioned   |
        |        false          |        false     |    Unversioned   |
        |        false          |        true      |    Unversioned   |
        <br>
      operationId: createNode
      parameters:
      - description: |
          The identifier of a node. You can also use one of these well-known aliases:
          * -my-
          * -shared-
          * -root-
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: If true, then  a name clash will cause an attempt to auto rename
          by finding a unique name using an integer suffix.
        in: query
        name: autoRename
        schema:
          type: boolean
      - description: If true, then created node will be version *1.0 MAJOR*. If false,
          then created node will be version *0.1 MINOR*.
        in: query
        name: majorVersion
        schema:
          type: boolean
      - description: If true, then created node will be versioned. If false, then
          created node will be unversioned and auto-versioning disabled.
        in: query
        name: versioningEnabled
        schema:
          type: boolean
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NodeBodyCreate'
        description: The node information to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format or **nodeBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to create children of
            **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **renditionId** does not exist
        "409":
          content: {}
          description: New name clashes with an existing node in the current parent
            folder
        "413":
          content: {}
          description: Content exceeds individual file size limit configured for the
            network or system
        "415":
          content: {}
          description: Content Type is not supported
        "422":
          content: {}
          description: Model integrity exception including a file name containing
            invalid characters
        "507":
          content: {}
          description: Content exceeds overall storage quota limit configured for
            the network or system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/copy:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Copies the node **nodeId** to the parent folder node **targetParentId**. You specify the **targetParentId** in the request body.

        The new node has the same name as the source node unless you specify a new **name** in the request body.

        If the source **nodeId** is a folder, then all of its children are also copied.

        If the source **nodeId** is a file, it's properties, aspects and tags are copied, it's ratings, comments and locks are not.
      operationId: copyNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyCopy'
        description: The targetParentId and, optionally, a new name which should include
          the file extension.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format or **nodeBodyCopy** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to copy **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "409":
          content: {}
          description: New name clashes with an existing node in the destination parent
            folder
        "422":
          content: {}
          description: Model integrity exception including a file name containing
            invalid characters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Copy a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyCopy
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/lock:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Places a lock on node **nodeId**.

        **Note:** you can only lock files. More specifically, a node can only be locked if it is
        of type `cm:content` or a subtype of `cm:content`.

        The lock is owned by the current user, and prevents other users or processes from making updates to the node until the lock is released.

        If the **timeToExpire** is not set or is zero, then the lock never expires.  Otherwise, the **timeToExpire** is the number of seconds before the lock expires.

        When a lock expires, the lock is released.

        If the node is already locked, and the user is the lock owner, then the lock is renewed with the new **timeToExpire**.

        By default, a lock is applied that allows the owner to update or delete the node.
        You can use **type** to change the lock type to one of the following:
        * **ALLOW_OWNER_CHANGES** (default) changes to the node can be made only by the lock owner. This enum is the same value as the deprecated WRITE_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API. This is the default value.
        * **FULL** no changes by any user are allowed. This enum is the same value as the deprecated READ_ONLY_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API.

        By default, a lock is persisted in the database. You can create a volatile in-memory lock by setting the **lifetime** property to EPHEMERAL.
        You might choose use EPHEMERAL locks, for example, if you are taking frequent short-term locks that you don't need
        to be kept over a restart of the repository. In this case you don't need the
        overhead of writing the locks to the database.

        If a lock on the node cannot be taken, then an error is returned.
      operationId: lockNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyLock'
        description: Lock details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or **nodeBodyLock** is invalid,
            or a lock was attempted on a node that is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: |
            Current user does not have permission to lock **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "422":
          content: {}
          description: |
            **nodeId** could not be locked
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Lock a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyLock
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/unlock:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes a lock on node **nodeId**.

        The current user must be the owner of the locks or have admin rights, otherwise an error is returned.

        If a lock on the node cannot be released, then an error is returned.
      operationId: unlockNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: |
            Current user does not have permission to unlock **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "422":
          content: {}
          description: |
            **nodeId** could not be unlocked
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Unlock a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/move:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Move the node **nodeId** to the parent folder node **targetParentId**.

        The **targetParentId** is specified in the in request body.

        The moved node retains its name unless you specify a new **name** in the request body.

        If the source **nodeId** is a folder, then its children are also moved.

        The move will effectively change the primary parent.
      operationId: moveNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyMove'
        description: The targetParentId and, optionally, a new name which should include
          the file extension.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or **targetParentId** is not a folder,
            or **nodeBodyMove** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to move **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "409":
          content: {}
          description: New name clashes with an existing node in the destination parent
            folder
        "422":
          content: {}
          description: Model integrity exception including a file name containing
            invalid characters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Move a node
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyMove
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the node with identifier **nodeId**.
      operationId: getNodeContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to retrieve content of
            **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: |
            Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get node content
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/octet-stream
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Updates the content of the node with identifier **nodeId**.

        The request body for this endpoint can be any text or binary stream.

        The **majorVersion** and **comment** parameters can be used to control versioning behaviour. If the content is versionable,
        a new minor version is created by default.

        Optionally a new **name** parameter can also be specified that must be unique within the parent folder. If specified and valid then this
        will rename the node. If invalid then an error is returned and the content is not updated.

        **Note:** This API method accepts any content type, but for testing with this tool text based content can be provided.
        This is because the OpenAPI Specification does not allow a wildcard to be provided or the ability for
        tooling to accept an arbitrary file.
      operationId: updateNodeContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          If **true**, create a major version.
          Setting this parameter also enables versioning of this node, if it is not already versioned.
        in: query
        name: majorVersion
        schema:
          default: false
          type: boolean
      - description: |
          Add a version comment which will appear in version history.
          Setting this parameter also enables versioning of this node, if it is not already versioned.
        in: query
        name: comment
        schema:
          type: string
      - description: |
          Optional new name. This should include the file extension.
          The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
          The character `.` must not be used at the end of the name.
        in: query
        name: name
        schema:
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        description: The binary content
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to update **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "409":
          content: {}
          description: Optional new name clashes with an existing node in the current
            parent folder
        "413":
          content: {}
          description: Content exceeds individual file size limit (configured for
            network/system)
        "422":
          content: {}
          description: Model integrity exception including a file name containing
            invalid characters
        "507":
          content: {}
          description: Content exceeds overall storage quota limit configured for
            the network/system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update node content
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: contentBodyUpdate
      x-contentType: application/octet-stream
      x-accepts: application/json
  /nodes/{nodeId}/request-direct-access-url:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.1 and newer versions.
        Generate a direct access content url for the given **nodeId**.
      operationId: requestNodeDirectAccessUrl
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectAccessUrlBodyCreate'
        description: "Direct Access URL options and flags.\n\nNote: It is up to the\
          \ actual ContentStore implementation if it can fulfil this\nrequest or not.\n\
          \nThe **attachment** flag controls the download method of the generated\
          \ URL. It defaults \nto **true**, meaning the value for the Content Disposition\
          \ response header will be **attachment**.\n\n**true** enables a web browser\
          \ to download the file as an attachment.\n**false** means a web browser\
          \ may preview the file in a new tab or window.\n\nYou can only set this\
          \ parameter to **false** if the content type of the file is in the supported\
          \ list;\nfor example, certain image files and PDF files.\n\nIf the content\
          \ type is not supported for preview, then a value of **false** is ignored,\
          \ and\nthe attachment will be returned in the response.\n"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectAccessUrlEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "501":
          content: {}
          description: The actual ContentStore implementation can't fulfil this request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Generate a direct access content URL
      tags:
      - nodes
      x-alfresco-since: 7.1.0
      x-codegen-request-body-name: requestContentUrlBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/renditions:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.

        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.

        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**
        clause will return just the CREATED renditions:

        ```
        (status='CREATED')
        ```
      operationId: listRenditions
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List renditions
      tags:
      - renditions
      x-alfresco-since: "5.2"
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        An asynchronous request to create a rendition for file **nodeId**.

        The rendition is specified by name **id** in the request body:
        ```JSON
        {
          "id":"doclib"
        }
        ```
         Multiple names may be specified as a comma separated list or using a list format:
        ```JSON
        [
          {
             "id": "doclib"
          },
          {
             "id": "avatar"
          }
        ]
        ```
      operationId: createRendition
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenditionBodyCreate'
        description: The rendition "id".
        required: true
      responses:
        "202":
          content: {}
          description: Request accepted
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format or is not a file
            or **renditionBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **renditionId** does not exist
        "409":
          content: {}
          description: All requested renditions already exist
        "501":
          content: {}
          description: Renditions/thumbnails are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create rendition
      tags:
      - renditions
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: renditionBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/renditions/{renditionId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.

        Delete the rendition identified by **renditionId** of **nodeId**.

        If the rendition is successfully deleted then the content for that rendition node
        will be cleared.
      operationId: deleteRendition
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete the rendition
        "404":
          content: {}
          description: |
            **nodeId** or **renditionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete rendition
      tags:
      - renditions
      x-alfresco-since: 7.1.1
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition information for **renditionId** of file **nodeId**.
      operationId: getRendition
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **renditionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition information
      tags:
      - renditions
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/renditions/{renditionId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for **renditionId** of file **nodeId**.
      operationId: getRenditionContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      - description: |
          If **true** and there is no rendition for this **nodeId** and **renditionId**,
          then the placeholder image for the mime type of this rendition is returned, rather
          than a 404 response.
        in: query
        name: placeholder
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **renditionId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition content
      tags:
      - renditions
      x-alfresco-since: "5.2"
      x-accepts: application/octet-stream
  /nodes/{nodeId}/renditions/{renditionId}/request-direct-access-url:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.1 and newer versions.
        Generate a direct access content url for the given **nodeId**.
      operationId: requestRenditionDirectAccessUrl
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectAccessUrlBodyCreate'
        description: "Direct Access URL options and flags.\n\nNote: It is up to the\
          \ actual ContentStore implementation if it can fulfil this\nrequest or not.\n\
          \nThe **attachment** flag controls the download method of the generated\
          \ URL. It defaults \nto **true**, meaning the value for the Content Disposition\
          \ response header will be **attachment**.\n\n**true** enables a web browser\
          \ to download the file as an attachment.\n**false** means a web browser\
          \ may preview the file in a new tab or window.\n\nYou can only set this\
          \ parameter to **false** if the content type of the file is in the supported\
          \ list;\nfor example, certain image files and PDF files.\n\nIf the content\
          \ type is not supported for preview, then a value of **false** is ignored,\
          \ and\nthe attachment will be returned in the response.\n"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectAccessUrlEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "501":
          content: {}
          description: The actual ContentStore implementation can't fulfil this request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Generate a direct access content URL
      tags:
      - renditions
      x-alfresco-since: 7.1.0
      x-codegen-request-body-name: requestContentUrlBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/secondary-children:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of secondary child nodes that are associated with the current parent **nodeId**, via a secondary child association.
      operationId: listSecondaryChildren
      parameters:
      - description: |
          The identifier of a parent node. You can also use one of these well-known aliases:
          * -my-
          * -shared-
          * -root-
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Optionally filter the list by assocType. Here's an example:

          *   ```where=(assocType='my:specialAssocType')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * aspectNames
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: Also include **source** (in addition to **entries**) with folder
          information on **nodeId**
        in: query
        name: includeSource
        schema:
          type: boolean
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeChildAssociationPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Parent **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List secondary children
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a secondary child association, with the given association type, between the parent **nodeId** and a child node.

        **Note:** You can create more than one secondary child association by
        specifying a list of associations in the JSON body like this:

        ```JSON
        [
          {
            "childId": "string",
            "assocType": "string"
          },
          {
            "childId": "string",
            "assocType": "string"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSecondaryChildAssociation
      parameters:
      - description: The identifier of a parent node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChildAssociationBody'
        description: The child node id and assoc type.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildAssociationEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format,
            or **secondaryChildAssociationBodyCreate** invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to create secondary children
            of **nodeId**
        "404":
          content: {}
          description: Parent **nodeId** or **childId** does not exist
        "409":
          content: {}
          description: An association of this assoc type already exists between these
            two nodes
        "422":
          content: {}
          description: Model integrity exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create secondary child
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: secondaryChildAssociationBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/secondary-children/{childId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Delete secondary child associations between the parent **nodeId** and child nodes for the given association type.

        If the association type is **not** specified, then all secondary child associations, of any type in the direction
        from parent to secondary child, will be deleted. The child will still have a primary parent and may still be
        associated as a secondary child with other secondary parents.
      operationId: deleteSecondaryChildAssociation
      parameters:
      - description: The identifier of a parent node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a child node.
        in: path
        name: childId
        required: true
        schema:
          type: string
      - description: Only delete associations of this type.
        in: query
        name: assocType
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **assocType** is unknown or you are trying to delete a primary **assocType**.
            Use delete node instead
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Parent **nodeId** or **childId** does not exist (with given
            assocType, if specified)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete secondary child or children
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/parents:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of parent nodes that are associated with the current child **nodeId**.

        The list includes both the primary parent and any secondary parents.
      operationId: listParents
      parameters:
      - description: |
          The identifier of a child node. You can also use one of these well-known aliases:
          * -my-
          * -shared-
          * -root-
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Optionally filter the list by **assocType** and/or **isPrimary**. Here are some example filters:

          *   ```where=(assocType='my:specialAssocType')```

          *   ```where=(isPrimary=true)```

          *   ```where=(isPrimary=false and assocType='my:specialAssocType')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * aspectNames
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: Also include **source** (in addition to **entries**) with folder
          information on **nodeId**
        in: query
        name: includeSource
        schema:
          type: boolean
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Child **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List parents
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/targets:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of target nodes that are associated with the current source **nodeId**.
      operationId: listTargetAssociations
      parameters:
      - description: The identifier of a source node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Optionally filter the list by **assocType**. Here's an example:

          *   ```where=(assocType='my:specialAssocType')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * aspectNames
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Source **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List target associations
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create an association, with the given association type, between the source **nodeId** and a target node.

        **Note:** You can create more than one association by
        specifying a list of associations in the JSON body like this:

        ```JSON
        [
          {
             "targetId": "string",
             "assocType": "string"
          },
          {
            "targetId": "string",
            "assocType": "string"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createAssociation
      parameters:
      - description: The identifier of a source node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationBody'
        description: The target node id and assoc type.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format,
            or **associationBodyCreate** invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Source **nodeId** or **targetId** does not exist
        "409":
          content: {}
          description: An association of this assoc type already exists between these
            two nodes
        "422":
          content: {}
          description: Model integrity exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create node association
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: associationBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/targets/{targetId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Delete an association, or associations, from the source **nodeId* to a target node for the given association type.

        If the association type is **not** specified, then all peer associations, of any type, in the direction
        from source to target, are deleted.

        **Note:** After removal of the peer association, or associations, from source to target, the two nodes may still have peer associations
        in the other direction.
      operationId: deleteAssociation
      parameters:
      - description: The identifier of a source node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a target node.
        in: path
        name: targetId
        required: true
        schema:
          type: string
      - description: Only delete associations of this type.
        in: query
        name: assocType
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format, or **targetId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Source **nodeId** or **targetId** does not exist (with given
            assocType, if specified)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete node association(s)
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/sources:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of source nodes that are associated with the current target **nodeId**.
      operationId: listSourceAssociations
      parameters:
      - description: The identifier of a target node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Optionally filter the list by **assocType**. Here's an example:

          *   ```where=(assocType='my:specialAssocType')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * aspectNames
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format or **assocType** is unknown
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Target **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List source associations
      tags:
      - nodes
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/versions:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version history as an ordered list of versions for the specified **nodeId**.

        The list is ordered in descending modified order. So the most recent version is first and
        the original version is last in the list.
      operationId: listVersionHistory
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the version node. The following optional fields can be requested:
          * properties
          * aspectNames
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: Target **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List version history
      tags:
      - versions
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Delete the version identified by **versionId** and **nodeId*.

        If the version is successfully deleted then the content and metadata for that versioned node
        will be deleted and will no longer appear in the version history. This operation cannot be undone.

        If the most recent version is deleted the live node will revert to the next most recent version.

        We currently do not allow the last version to be deleted. If you wish to clear the history then you
        can remove the "cm:versionable" aspect (via update node) which will also disable versioning. In this
        case, you can re-enable versioning by adding back the "cm:versionable" aspect or using the version
        params (majorVersion and comment) on a subsequent file content update.
      operationId: deleteVersion
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or exists but does not identify a file, or **versionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete the versioned
            node
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** does not exist
        "422":
          content: {}
          description: Cannot delete the last remaining version
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a version
      tags:
      - versions
      x-alfresco-since: "5.2"
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version information for **versionId** of file node **nodeId**.
      operationId: getVersion
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get version information
      tags:
      - versions
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version content for **versionId** of file node **nodeId**.
      operationId: getVersionContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get version content
      tags:
      - versions
      x-alfresco-since: "5.2"
      x-accepts: application/octet-stream
  /nodes/{nodeId}/versions/{versionId}/request-direct-access-url:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.1 and newer versions.
        Generate a direct access content url for the given **nodeId**.
      operationId: requestVersionDirectAccessUrl
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectAccessUrlBodyCreate'
        description: "Direct Access URL options and flags.\n\nNote: It is up to the\
          \ actual ContentStore implementation if it can fulfil this\nrequest or not.\n\
          \nThe **attachment** flag controls the download method of the generated\
          \ URL. It defaults \nto **true**, meaning the value for the Content Disposition\
          \ response header will be **attachment**.\n\n**true** enables a web browser\
          \ to download the file as an attachment.\n**false** means a web browser\
          \ may preview the file in a new tab or window.\n\nYou can only set this\
          \ parameter to **false** if the content type of the file is in the supported\
          \ list;\nfor example, certain image files and PDF files.\n\nIf the content\
          \ type is not supported for preview, then a value of **false** is ignored,\
          \ and\nthe attachment will be returned in the response.\n"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectAccessUrlEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "501":
          content: {}
          description: The actual ContentStore implementation can't fulfil this request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Generate a direct access content URL
      tags:
      - versions
      x-alfresco-since: 7.1.0
      x-codegen-request-body-name: requestContentUrlBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/revert:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Attempts to revert the version identified by **versionId** and **nodeId** to the live node.

        If the node is successfully reverted then the content and metadata for that versioned node
        will be promoted to the live node and a new version will appear in the version history.
      operationId: revertVersion
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevertBody'
        description: Optionally, specify a version comment and whether this should
          be a major version, or not.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or it exists
            but does not identify a file, or **versionId** is invalid,
            or **revertBody** invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to revert the versioned
            node
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** does not exist
        "422":
          content: {}
          description: Model integrity exception trying to revert the node
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Revert a version
      tags:
      - versions
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: revertBody
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/renditions:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.

        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.

        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**
        clause will return just the CREATED renditions:

        ```
        (status='CREATED')
        ```
      operationId: listVersionRenditions
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List renditions for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        An asynchronous request to create a rendition for version of file **nodeId** and **versionId**.

        The version rendition is specified by name **id** in the request body:
        ```JSON
        {
          "id":"doclib"
        }
        ```
          Multiple names may be specified as a comma separated list or using a list format:
        ```JSON
        [
          {
              "id": "doclib"
          },
          {
              "id": "avatar"
          }
        ]
        ```
      operationId: createVersionRendition
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenditionBodyCreate'
        description: The rendition "id".
        required: true
      responses:
        "202":
          content: {}
          description: Request accepted
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid,
            or **renditionBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
        "409":
          content: {}
          description: All requested renditions already exist
        "501":
          content: {}
          description: Renditions/thumbnails are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create rendition for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
      x-codegen-request-body-name: renditionBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.

        Delete the rendition for **renditionId** of version **versionId** of **nodeId**.

        If the rendition is successfully deleted then the content  for that rendition node
        will be cleared.
      operationId: deleteVersionRendition
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format or **versionId** or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete the version
            rendition
        "404":
          content: {}
          description: |
            **nodeId**, **versionId** or **renditionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete rendition for a version
      tags:
      - versions
      x-alfresco-since: 7.1.1
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets the rendition information for **renditionId** of version of file **nodeId** and **versionId**.
      operationId: getVersionRendition
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition information for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets the rendition content for **renditionId** of version of file **nodeId** and **versionId**.
      operationId: getVersionRenditionContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      - description: |
          If **true** and there is no rendition for this **nodeId** and **renditionId**,
          then the placeholder image for the mime type of this rendition is returned, rather
          than a 404 response.
        in: query
        name: placeholder
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition content for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
      x-accepts: application/octet-stream
  /nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/request-direct-access-url:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.2 and newer versions.
        Generate a direct access content url for the given **nodeId**.
      operationId: requestVersionRenditionDirectAccessUrl
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectAccessUrlBodyCreate'
        description: |
          Direct Access URL options and flags.

          It can be used to set the **attachment** flag, which controls the download method of
          the generated URL (attachment DAU vs embedded DAU). It defaults to **true**, meaning
          the value for the Content Disposition response header will be **attachment**.

          Note: It is up to the actual ContentStore implementation if it can fulfil this
          request or not.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectAccessUrlEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "501":
          content: {}
          description: The actual ContentStore implementation can't fulfil this request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Generate a direct access content URL
      tags:
      - versions
      x-alfresco-since: 7.2.0
      x-codegen-request-body-name: requestContentUrlBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/action-definitions:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Retrieve the list of actions that may be executed against the given **nodeId**.

        The default sort order for the returned list is for actions to be sorted by ascending name.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        * name
        * title
      operationId: nodeActions
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionList'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve actions for a node
      tags:
      - actions
      x-alfresco-since: 5.2.2
      x-accepts: application/json
  /nodes/{nodeId}/storage-info/{contentPropName}:
    get:
      description: "**Note:** this endpoint is available in Alfresco 7.2.0 and newer\
        \ versions.\nIt also requires at least one specific implementation of underlying\
        \ functionality in Cloud Connector(s).\n\nGets storage properties for given\
        \ content.\n\nPlease find below sample responses for this endpoint when Alfresco\
        \ Content Connector for AWS S3 is installed.\n\nSimilar responses will be\
        \ returned when Alfresco Content Connector for Azure Blob is installed, albeit\
        \ it with \nsome native storage properties with x-ms- prefix instead of x-amz-\
        \ prefix.\n\nStandard storage class:\n```json\n{\n  \"entry\": {\n    \"storageProperties\"\
        : {\n      \"x-alf-archived\": \"false\"\n    },\n    \"id\": \"cm:content\"\
        \n  }\n}\n```\nIntelligent tiering storage class:\n```json\n{\n  \"entry\"\
        : {\n    \"storageProperties\": {\n      \"x-alf-archived\": \"false\",\n\
        \      \"x-amz-storage-class\": \"INTELLIGENT_TIERING\"\n    },\n    \"id\"\
        : \"cm:content\"\n  }\n}\n```\nGlacier archive storage class (no restore request\
        \ ongoing or submitted):\n```json\n{\n  \"entry\": {\n    \"storageProperties\"\
        : {\n      \"x-alf-archived\": \"true\",\n      \"x-amz-storage-class\": \"\
        GLACIER\"\n    },\n    \"id\": \"cm:content\"\n  }\n}\n```\nGlacier archive\
        \ storage class (restore request ongoing, not completed):\n```json\n{\n  \"\
        entry\": {\n    \"storageProperties\": {\n      \"x-alf-archive-restore-in-progress\"\
        : \"true\",\n      \"x-amz-restore\": \"ongoing-request=\\\"true\\\"\",\n\
        \      \"x-alf-archived\": \"true\",\n      \"x-amz-storage-class\": \"GLACIER\"\
        \n    },\n    \"id\": \"cm:content\"\n  }\n}\n```\nGlacier archive storage\
        \ class (restore request completed):\n```json\n{\n  \"entry\": {\n    \"storageProperties\"\
        : {\n      \"x-alf-archive-restore-in-progress\": \"false\",\n      \"x-amz-restore\"\
        : \"ongoing-request=\\\"false\\\", expiry-date=\\\"Fri Nov 26 01:00:00 CET\
        \ 2021\\\"\",\n      \"x-alf-archive-restore-expiry\": \"2021-11-26T00:00:00.000Z\"\
        ,\n      \"x-alf-archived\": \"false\",\n      \"x-amz-storage-class\": \"\
        GLACIER\"\n    },\n    \"id\": \"cm:content\"\n  }\n}\n```\n"
      operationId: getStorageProperties
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The namespace-prefix property name of content.
          Delimiter between namespace-prefix and property name can be either colon (':') or underscore ('_') character (e.g., 'cm:content' or 'cm_content').
        in: path
        name: contentPropName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentStorageInfo'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Not authorized
        "404":
          content: {}
          description: |
            **nodeId** or **contentPropName** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve storage properties for given content
      tags:
      - storage-info
      x-alfresco-since: 7.2.0
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}:
    get:
      description: "**Note:** this endpoint is available in Alfresco 7.2.0 and newer\
        \ versions.\nIt also requires at least one specific implementation of underlying\
        \ functionality in Cloud Connector(s).\n\nGets storage properties for given\
        \ version content.\n\nPlease find below sample responses for this endpoint\
        \ when Alfresco Content Connector for AWS S3 is installed.\n\nSimilar responses\
        \ will be returned when Alfresco Content Connector for Azure Blob is installed,\
        \ albeit it with \nsome native storage properties with x-ms- prefix instead\
        \ of x-amz- prefix.\n\nStandard storage class:\n```json\n{\n  \"entry\": {\n\
        \    \"storageProperties\": {\n      \"x-alf-archived\": \"false\"\n    },\n\
        \    \"id\": \"cm:content\"\n  }\n}\n```\nIntelligent tiering storage class:\n\
        ```json\n{\n  \"entry\": {\n    \"storageProperties\": {\n      \"x-alf-archived\"\
        : \"false\",\n      \"x-amz-storage-class\": \"INTELLIGENT_TIERING\"\n   \
        \ },\n    \"id\": \"cm:content\"\n  }\n}\n```\nGlacier archive storage class\
        \ (no restore request ongoing or submitted):\n```json\n{\n  \"entry\": {\n\
        \    \"storageProperties\": {\n      \"x-alf-archived\": \"true\",\n     \
        \ \"x-amz-storage-class\": \"GLACIER\"\n    },\n    \"id\": \"cm:content\"\
        \n  }\n}\n```\nGlacier archive storage class (restore request ongoing, not\
        \ completed):\n```json\n{\n  \"entry\": {\n    \"storageProperties\": {\n\
        \      \"x-alf-archive-restore-in-progress\": \"true\",\n      \"x-amz-restore\"\
        : \"ongoing-request=\\\"true\\\"\",\n      \"x-alf-archived\": \"true\",\n\
        \      \"x-amz-storage-class\": \"GLACIER\"\n    },\n    \"id\": \"cm:content\"\
        \n  }\n}\n```\nGlacier archive storage class (restore request completed):\n\
        ```json\n{\n  \"entry\": {\n    \"storageProperties\": {\n      \"x-alf-archive-restore-in-progress\"\
        : \"false\",\n      \"x-amz-restore\": \"ongoing-request=\\\"false\\\", expiry-date=\\\
        \"Fri Nov 26 01:00:00 CET 2021\\\"\",\n      \"x-alf-archive-restore-expiry\"\
        : \"2021-11-26T00:00:00.000Z\",\n      \"x-alf-archived\": \"false\",\n  \
        \    \"x-amz-storage-class\": \"GLACIER\"\n    },\n    \"id\": \"cm:content\"\
        \n  }\n}\n```\n"
      operationId: getVersionStorageProperties
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: |
          The namespace-prefix property name of content.
          Delimiter between namespace-prefix and property name can be either colon (':') or underscore ('_') character (e.g., 'cm:content' or 'cm_content').
        in: path
        name: contentPropName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentStorageInfo'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Not authorized
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** or **contentPropName** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve storage properties for given version content
      tags:
      - storage-info
      x-alfresco-since: 7.2.0
      x-accepts: application/json
  /nodes/{nodeId}/storage-info/{contentPropName}/archive:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions.
        It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).

        Request to send given content to archive.
      operationId: requestArchiveContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The namespace-prefix property name of content.
          Delimiter between namespace-prefix and property name can be either colon (':') or underscore ('_') character (e.g., 'cm:content' or 'cm_content').
        in: path
        name: contentPropName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveContentRequest'
        description: |
          Archive content request parameters - currently not supported by any Alfresco Cloud Connector.
          Body is not mandatory.
          Request body example:
          ```JSON
          {
            "archiveParams": {
                          "x-amz-storage-class": "GLACIER"
                        }
          }
          ```
        required: false
      responses:
        "200":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** or **contentPropName** is not a valid format, or is not a file
            Content's storage state does not allow archive.
            Invalid archive paramters.
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Not authorized
        "404":
          content: {}
          description: |
            **nodeId** or **contentPropName** does not exist
        "409":
          content: {}
          description: Content already archived
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Request to send given content to archive
      tags:
      - storage-info
      x-alfresco-since: 7.2.0
      x-codegen-request-body-name: archiveContentRequest
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}/archive:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions.
        It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).

        Request to send given version content to archive.
      operationId: requestArchiveVersionContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: |
          The namespace-prefix property name of content.
          Delimiter between namespace-prefix and property name can be either colon (':') or underscore ('_') character (e.g., 'cm:content' or 'cm_content').
        in: path
        name: contentPropName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveContentRequest'
        description: |
          Archive content request parameters - currently not supported by any Alfresco Cloud Connector.
          Body is not mandatory.
          Request body example:
          ```JSON
          {
            "archiveParams": {
                          "x-amz-storage-class": "GLACIER"
                        }
          }
          ```
        required: false
      responses:
        "200":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file
            Content's storage state does not allow archive.
            Invalid archive paramters.
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Not authorized
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** or **contentPropName** does not exist
        "409":
          content: {}
          description: Content already archived
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Request to send given version content to archive
      tags:
      - storage-info
      x-alfresco-since: 7.2.0
      x-codegen-request-body-name: archiveContentRequest
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/storage-info/{contentPropName}/archive-restore:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions.
        It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).

        Request to restore given content from archive.
      operationId: requestRestoreContentFromArchive
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The namespace-prefix property name of content.
          Delimiter between namespace-prefix and property name can be either colon (':') or underscore ('_') character (e.g., 'cm:content' or 'cm_content').
        in: path
        name: contentPropName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreArchivedContentRequest'
        description: |
          Restore content from archive request parameters.
          At the moment there is one parameter being supported which is restore priority.
          'High' restore priority translates to 'Expedited' Glacier restore tier in AWS S3 and 'High' rehydrate priority in Azure Blob.
          'Standard' restore priority translates to 'Standard' Glacier restore tier in AWS S3 and 'Standard' rehydrate priority in Azure Blob.
          Body is not mandatory.
          High restore priority request body example:
          ```JSON
          {
            "restorePriority": "High"
          }
          ```
          Standard restore priority request body example:
          ```JSON
          {
            "restorePriority": "Standard"
          }
          ```
        required: false
      responses:
        "202":
          content: {}
          description: Successful response (request accepted)
        "400":
          content: {}
          description: |
            Invalid parameter: n**nodeId** or **contentPropName** is not a valid format, or is not a file
            Content's storage state does not allow restore.
            Invalid restore paramters.
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Not authorized
        "404":
          content: {}
          description: |
            **nodeId** or **contentPropName** does not exist
        "409":
          content: {}
          description: Content already restored or restoration is already in progress
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Request to restore given content from archive
      tags:
      - storage-info
      x-alfresco-since: 7.2.0
      x-codegen-request-body-name: restoreArchivedContentRequest
      x-contentType: application/json
      x-accepts: application/json
  /nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}/archive-restore:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions.
        It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).

        Request to restore given version content from archive.
      operationId: requestRestoreVersionContentFromArchive
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The identifier of a version, ie. version label, within the version
          history of a node.
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: |
          The namespace-prefix property name of content.
          Delimiter between namespace-prefix and property name can be either colon (':') or underscore ('_') character (e.g., 'cm:content' or 'cm_content').
        in: path
        name: contentPropName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreArchivedContentRequest'
        description: |
          Restore content from archive request parameters.
          At the moment there is one parameter being supported which is restore priority.
          'High' restore priority translates to 'Expedited' Glacier restore tier in AWS S3 and 'High' rehydrate priority in Azure Blob.
          'Standard' restore priority translates to 'Standard' Glacier restore tier in AWS S3 and 'Standard' rehydrate priority in Azure Blob.
          Body is not mandatory.
          High restore priority request body example:
          ```JSON
          {
            "restorePriority": "High"
          }
          ```
          Standard restore priority request body example:
          ```JSON
          {
            "restorePriority": "Standard"
          }
          ```
        required: false
      responses:
        "202":
          content: {}
          description: Successful response (request accepted)
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** or **versionId** or **contentPropName** is not a valid format, or is not a file
            Content's storage state does not allow restore.
            Invalid restore paramters.
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Not authorized
        "404":
          content: {}
          description: |
            **nodeId** or **versionId** or **contentPropName** does not exist
        "409":
          content: {}
          description: Content already restored or restoration is already in progress
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Request to restore given version content from archive
      tags:
      - storage-info
      x-alfresco-since: 7.2.0
      x-codegen-request-body-name: restoreArchivedContentRequest
      x-contentType: application/json
      x-accepts: application/json
  /deleted-nodes:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of deleted nodes for the current user.

        If the current user is an administrator deleted nodes for all users will be returned.

        The list of deleted nodes will be ordered with the most recently deleted node at the top of the list.
      operationId: listDeletedNodes
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * aspectNames
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * properties
          * permissions
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedNodesPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List deleted nodes
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /deleted-nodes/{nodeId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Permanently deletes the deleted node **nodeId**.
      operationId: deleteDeletedNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to permanently delete the deleted
            node
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Permanently delete a deleted node
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the specific deleted node **nodeId**.
      operationId: getDeletedNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * association
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * permissions
          * definition
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedNodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to view the deleted node
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a deleted node
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /deleted-nodes/{nodeId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the deleted node with identifier **nodeId**.
      operationId: getDeletedNodeContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to retrieve content of
            **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get deleted node content
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-accepts: application/octet-stream
  /deleted-nodes/{nodeId}/request-direct-access-url:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.1 and newer versions.
        Generate a direct access content url for the given **nodeId**.
      operationId: requestDeletedNodeDirectAccessUrl
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectAccessUrlBodyCreate'
        description: "Direct Access URL options and flags.\n\nNote: It is up to the\
          \ actual ContentStore implementation if it can fulfil this\nrequest or not.\n\
          \nThe **attachment** flag controls the download method of the generated\
          \ URL. It defaults \nto **true**, meaning the value for the Content Disposition\
          \ response header will be **attachment**.\n\n**true** enables a web browser\
          \ to download the file as an attachment.\n**false** means a web browser\
          \ may preview the file in a new tab or window.\n\nYou can only set this\
          \ parameter to **false** if the content type of the file is in the supported\
          \ list;\nfor example, certain image files and PDF files.\n\nIf the content\
          \ type is not supported for preview, then a value of **false** is ignored,\
          \ and\nthe attachment will be returned in the response.\n"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectAccessUrlEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "501":
          content: {}
          description: The actual ContentStore implementation can't fulfil this request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Generate a direct access content URL
      tags:
      - trashcan
      x-alfresco-since: 7.1.0
      x-codegen-request-body-name: requestContentUrlBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /deleted-nodes/{nodeId}/restore:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Attempts to restore the deleted node **nodeId** to its original location or to a new location.

        If the node is successfully restored to its former primary parent, then only the
        primary child association will be restored, including recursively for any primary
        children. It should be noted that no other secondary child associations or peer
        associations will be restored, for any of the nodes within the primary parent-child
        hierarchy of restored nodes, irrespective of whether these associations were to
        nodes within or outside of the restored hierarchy.

        Also, any previously shared link will not be restored since it is deleted at the time
        of delete of each node.
      operationId: restoreDeletedNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletedNodeBodyRestore'
        description: The targetParentId if the node is restored to a new location.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** or **targetNodeId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to restore the deleted node or
            user does not have permission to the target node
        "404":
          content: {}
          description: |
            **nodeId** does not exist or the restore destination parent node does not exists
        "409":
          content: {}
          description: Node name already exists in the restore destination
        "422":
          content: {}
          description: Model integrity exception trying to restore the node
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Restore a deleted node
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: deletedNodeBodyRestore
      x-contentType: application/json
      x-accepts: application/json
  /deleted-nodes/{nodeId}/renditions:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.

        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.

        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**
        clause will return just the CREATED renditions:

        ```
        (status='CREATED')
        ```
      operationId: listDeletedNodeRenditions
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List renditions for a deleted node
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /deleted-nodes/{nodeId}/renditions/{renditionId}:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition information for **renditionId** of file **nodeId**.
      operationId: getArchivedNodeRendition
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **renditionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition information for a deleted node
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /deleted-nodes/{nodeId}/renditions/{renditionId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for **renditionId** of file **nodeId**.
      operationId: getArchivedNodeRenditionContent
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      - description: |
          If **true** and there is no rendition for this **nodeId** and **renditionId**,
          then the placeholder image for the mime type of this rendition is returned, rather
          than a 404 response.
        in: query
        name: placeholder
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** or **renditionId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition content of a deleted node
      tags:
      - trashcan
      x-alfresco-since: "5.2"
      x-accepts: application/octet-stream
  /deleted-nodes/{nodeId}/renditions/{renditionId}/request-direct-access-url:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.1 and newer versions.
        Generate a direct access content url for the given **nodeId**.
      operationId: requestArchivedNodeRenditionDirectAccessUrl
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectAccessUrlBodyCreate'
        description: "Direct Access URL options and flags.\n\nNote: It is up to the\
          \ actual ContentStore implementation if it can fulfil this\nrequest or not.\n\
          \nThe **attachment** flag controls the download method of the generated\
          \ URL. It defaults \nto **true**, meaning the value for the Content Disposition\
          \ response header will be **attachment**.\n\n**true** enables a web browser\
          \ to download the file as an attachment.\n**false** means a web browser\
          \ may preview the file in a new tab or window.\n\nYou can only set this\
          \ parameter to **false** if the content type of the file is in the supported\
          \ list;\nfor example, certain image files and PDF files.\n\nIf the content\
          \ type is not supported for preview, then a value of **false** is ignored,\
          \ and\nthe attachment will be returned in the response.\n"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectAccessUrlEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission for **nodeId**
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "412":
          content: {}
          description: "Content is archived and is inaccessible  \n"
        "501":
          content: {}
          description: The actual ContentStore implementation can't fulfil this request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Generate a direct access content URL
      tags:
      - trashcan
      x-alfresco-since: 7.1.0
      x-codegen-request-body-name: requestContentUrlBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /downloads:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Creates a new download node asynchronously, the content of which will be the zipped content of the **nodeIds** specified in the JSON body like this:

        ```JSON
        {
            "nodeIds":
             [
               "c8bb482a-ff3c-4704-a3a3-de1c83ccd84c",
               "cffa62db-aa01-493d-9594-058bc058eeb1"
             ]
        }
        ```

        **Note:** The content of the download node can be obtained using the **GET /nodes/{downloadId}/content** endpoint
      operationId: createDownload
      parameters:
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadBodyCreate'
        description: The nodeIds the content of which will be zipped, which zip will
          be set as the content of our download node.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadEntry'
          description: The request to create a download node was accepted
        "400":
          content: {}
          description: |
            Invalid parameter: **DownloadBodyCreate** is invalid due to incorrect syntax, or **nodeIds** is empty, or **nodeIds** contains a duplicate **nodeId**
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to add a certain **nodeId**
            to the zip
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a new download
      tags:
      - downloads
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: DownloadBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /downloads/{downloadId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Cancels the creation of a download request.

        **Note:** The download node can be deleted using the **DELETE /nodes/{downloadId}** endpoint

        By default, if the download node is not deleted it will be picked up by a cleaner job which removes download nodes older than a configurable amount of time (default is 1 hour)

        Information about the existing progress at the time of cancelling can be retrieved by calling the **GET /downloads/{downloadId}** endpoint

        The cancel operation is done asynchronously.
      operationId: cancelDownload
      parameters:
      - description: The identifier of a download node.
        in: path
        name: downloadId
        required: true
        schema:
          type: string
      responses:
        "202":
          content: {}
          description: The request to cancel a download was accepted
        "400":
          content: {}
          description: |
            Invalid parameter: **downloadId** is invalid, or **downloadId** does not point to a node of download type
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission cancel the **downloadId**
            node
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Cancel a download
      tags:
      - downloads
      x-alfresco-since: 5.2.1
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Retrieve status information for download node **downloadId**
      operationId: getDownload
      parameters:
      - description: The identifier of a download node.
        in: path
        name: downloadId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadEntry'
          description: Download node information
        "400":
          content: {}
          description: |
            Invalid parameter: **downloadId** is invalid, or **downloadId** does not point to a node of download type
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to get information about
            **downloadId** node
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a download
      tags:
      - downloads
      x-alfresco-since: 5.2.1
      x-accepts: application/json
  /people:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        List people.

        You can use the **include** parameter to return any additional information.

        The default sort order for the returned list is for people to be sorted by ascending id.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        * id
        * firstName
        * lastName
      operationId: listPeople
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Returns additional information about the person. The following optional fields can be requested:
          * properties
          * aspectNames
          * capabilities
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List people
      tags:
      - people
      x-alfresco-since: "5.2"
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a person.

        If applicable, the given person's login access can also be optionally disabled.

        You must have admin rights to create a person.

        You can set custom properties when you create a person:
        ```JSON
        {
          "id": "abeecher",
          "firstName": "Alice",
          "lastName": "Beecher",
          "displayName": "Alice Beecher",
          "email": "abeecher@example.com",
          "password": "secret",
          "properties":
          {
            "my:property": "The value"
          }
        }
        ```
        **Note:** setting properties of type d:content and d:category are not supported.
      operationId: createPerson
      parameters:
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonBodyCreate'
        description: The person details.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **personBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to create a person
        "409":
          content: {}
          description: Person within given *id* already exists
        "422":
          content: {}
          description: Model integrity exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create person
      tags:
      - people
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: personBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}:
    get:
      description: |
        Gets information for the person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a person
      tags:
      - people
      x-accepts: application/json
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Update the given person's details.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        If applicable, the given person's login access can also be optionally disabled or re-enabled.

        You must have admin rights to update a person — unless updating your own details.

        If you are changing your password, as a non-admin user, then the existing password must also
        be supplied (using the oldPassword field in addition to the new password value).

        Admin users cannot be disabled by setting enabled to false.

        Non-admin users may not disable themselves.

        You can set custom properties when you update a person:
        ```JSON
        {
          "firstName": "Alice",
          "properties":
          {
            "my:property": "The value"
          }
        }
        ```
        **Note:** setting properties of type d:content and d:category are not supported.
      operationId: updatePerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonBodyUpdate'
        description: The person details.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: the update request is invalid or **personId** is not a valid format or **personBodyUpdate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to update a person
        "404":
          content: {}
          description: |
            **personId** does not exist
        "422":
          content: {}
          description: Model integrity exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update person
      tags:
      - people
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: personBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}/activities:
    get:
      description: |
        Gets a list of activities for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listActivitiesForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A filter to include the user's activities only `me`, other user's activities only `others`'
        in: query
        name: who
        schema:
          type: string
      - description: Include only activity feed entries relating to this site.
        in: query
        name: siteId
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, or **who** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have access to the activities for **personId**
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List activities
      tags:
      - activities
      x-accepts: application/json
  /people/{personId}/favorite-sites:
    get:
      deprecated: true
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites` instead.

        Gets a list of a person's favorite sites.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listFavoriteSitesForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List favorite sites
      tags:
      - favorites
      x-accepts: application/json
    post:
      deprecated: true
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites` instead.

        Create a site favorite for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         **Note:** You can favorite more than one site by
        specifying a list of sites in the JSON body like this:

        ```JSON
        [
          {
            "id": "test-site-1"
          },
          {
            "id": "test-site-2"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSiteFavorite
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSiteBodyCreate'
        description: The id of the site to favorite.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteSiteEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **favoriteSiteBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          content: {}
          description: |
            **personId** does not exist
        "409":
          content: {}
          description: |
            **id** is already a site favorite
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site favorite
      tags:
      - favorites
      x-codegen-request-body-name: favoriteSiteBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}/favorite-sites/{siteId}:
    delete:
      deprecated: true
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites/{favoriteId}` instead.

        Deletes site **siteId** from the favorite site list of person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteFavorite
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site favorite
      tags:
      - favorites
      x-accepts: application/json
    get:
      deprecated: true
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites/{favoriteId}` instead.

        Gets information on favorite site **siteId** of person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getFavoriteSite
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a favorite site
      tags:
      - favorites
      x-accepts: application/json
  /people/{personId}/favorites:
    get:
      description: |
        Gets a list of favorites for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        The default sort order for the returned list of favorites is type ascending, createdAt descending.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        *   `type`
        *   `createdAt`
        *   `title`

        You can use the **where** parameter to restrict the list in the response
        to entries of a specific kind. The **where** parameter takes a value.
        The value is a single predicate that can include one or more **EXISTS**
        conditions. The **EXISTS** condition uses a single operand to limit the
        list to include entries that include that one property. The property values are:

        *   `target/file`
        *   `target/folder`
        *   `target/site`

        For example, the following **where** parameter restricts the returned list to the file favorites for a person:

        ```SQL
        (EXISTS(target/file))
        ```
        You can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.


        For example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:

        ```SQL
        (EXISTS(target/file) OR EXISTS(target/folder))
        ```
      operationId: listFavorites
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about favorites, the following optional fields can be requested:
          * path (note, this only applies to files and folders)
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritePaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist or the current user does not have permission to access the favorites of **personId**
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List favorites
      tags:
      - favorites
      x-accepts: application/json
    post:
      description: |
        Favorite a **site**, **file**, or **folder** in the repository.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        **Note:** You can favorite more than one entity by
        specifying a list of objects in the JSON body like this:

        ```JSON
        [
          {
               "target": {
                  "file": {
                     "guid": "abcde-01234-...."
                  }
               }
           },
           {
               "target": {
                  "file": {
                     "guid": "abcde-09863-...."
                  }
               }
           },
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createFavorite
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about favorites, the following optional fields can be requested:
          * path (note, this only applies to files and folders)
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteBodyCreate'
        description: |
          An object identifying the entity to be favorited.

          The object consists of a single property which is an object with the name `site`, `file`, or `folder`.
          The content of that object is the `guid` of the target entity.

          For example, to favorite a file the following body would be used:

          ```JSON
          {
             "target": {
                "file": {
                   "guid": "abcde-01234-...."
                }
             }
          }
          ```
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **favoriteBodyCreate** invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist, or the target entity does not exist,
            or a favorite already exists with the specified id, or an
            entity exists with the id of the posted object
            but is not of the same type of the posted object
        "409":
          content: {}
          description: The target **guid** has already been favorited
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a favorite
      tags:
      - favorites
      x-codegen-request-body-name: favoriteBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}/favorites/{favoriteId}:
    delete:
      description: |
        Deletes **favoriteId** as a favorite of person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteFavorite
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a favorite.
        in: path
        name: favoriteId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **favoriteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a favorite
      tags:
      - favorites
      x-accepts: application/json
    get:
      description: |
        Gets favorite **favoriteId** for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getFavorite
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a favorite.
        in: path
        name: favoriteId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about favorites, the following optional fields can be requested:
          * path (note, this only applies to files and folders)
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **favoriteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a favorite
      tags:
      - favorites
      x-accepts: application/json
  /people/{personId}/networks:
    get:
      description: |
        Gets a list of network memberships for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listNetworksForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List network membership
      tags:
      - networks
      x-accepts: application/json
  /people/{personId}/networks/{networkId}:
    get:
      description: |
        Gets network information on a single network specified by **networkId** for **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getNetworkForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a network.
        in: path
        name: networkId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **networkId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get network information
      tags:
      - networks
      x-accepts: application/json
  /people/{personId}/preferences:
    get:
      description: |
        Gets a list of preferences for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
        Note that each preference consists of an **id** and a **value**.

        The **value** can be of any JSON type.
      operationId: listPreferences
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferencePaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have access to the preferences for **personId**
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List preferences
      tags:
      - preferences
      x-accepts: application/json
  /people/{personId}/preferences/{preferenceName}:
    get:
      description: |
        Gets a specific preference for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getPreference
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The name of the preference.
        in: path
        name: preferenceName
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have access to the preferences for **personId**
        "404":
          content: {}
          description: |
            **personId** or **preferenceName** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a preference
      tags:
      - preferences
      x-accepts: application/json
  /people/{personId}/site-membership-requests:
    get:
      description: |
        Gets a list of the current site membership requests for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listSiteMembershipRequestsForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site membership requests
      tags:
      - sites
      x-accepts: application/json
    post:
      description: |
        Create a site membership request for yourself on the site with the identifier of **id**, specified in the JSON body.
        The result of the request differs depending on the type of site.

        * For a **public** site, you join the site immediately as a SiteConsumer.
        * For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager.
        * You cannot request membership of a **private** site. Members are invited by the site administrator.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         **Note:** You can create site membership requests for more than one site by
        specifying a list of sites in the JSON body like this:

        ```JSON
        [
          {
            "message": "Please can you add me",
            "id": "test-site-1",
            "title": "Request for test site 1",
          },
          {
            "message": "Please can you add me",
            "id": "test-site-2",
            "title": "Request for test site 2",
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSiteMembershipRequestForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipRequestBodyCreate'
        description: Site membership request details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **id** is invalid, or the user is already invited,
            or **siteMembershipRequestBodyCreate** invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **id** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site membership request
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipRequestBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}/site-membership-requests/{siteId}:
    delete:
      description: |
        Deletes the site membership request to site **siteId** for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembershipRequestForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site membership request
      tags:
      - sites
      x-accepts: application/json
    get:
      description: |
        Gets the site membership request for site **siteId** for person **personId**, if one exists.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembershipRequestForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site membership request
      tags:
      - sites
      x-accepts: application/json
    put:
      description: |
        Updates the message for the site membership request to site **siteId** for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: updateSiteMembershipRequestForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipRequestBodyUpdate'
        description: The new message to display
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **id** is invalid
            or **siteMembershipRequestBodyUpdate** invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a site membership request
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipRequestBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}/sites:
    get:
      description: |
        Gets a list of site membership information for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.

        Example to filter by **visibility**, use any one of:

        ```
        (visibility='PRIVATE')
        (visibility='PUBLIC')
        (visibility='MODERATED')
        ```

        Example to filter by site **preset**:

        ```
        (preset='site-dashboard')
        ```

        The default sort order for the returned list is for sites to be sorted by ascending title.
        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * title
        * role
      operationId: listSiteMembershipsForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Use the relations parameter to include one or more related entities
          in a single response.
        explode: false
        in: query
        name: relations
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteRolePaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site memberships
      tags:
      - sites
      x-accepts: application/json
  /people/{personId}/sites/{siteId}:
    delete:
      description: |
        Deletes person **personId** as a member of site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembershipForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site membership
      tags:
      - sites
      x-accepts: application/json
    get:
      description: |
        Gets site membership information for person **personId** on site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembershipForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteRoleEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** or **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site membership
      tags:
      - sites
      x-accepts: application/json
  /people/{personId}/groups:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

         Gets a list of group membership information for person **personId**.

         You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         You can use the **include** parameter to return additional information.

         You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**
         clause will return just the root groups:

         ```
         (isRoot=true)
         ```

         The **where** parameter can also be used to filter by ***zone***. This may be combined with isRoot to narrow
         a result set even further. For example, the following where clause will only return groups belonging to the
         `MY.ZONE` zone.

         ```
         where=(zones in ('MY.ZONE'))
         ```

         This may be combined with the isRoot filter, as shown below:

         ```
         where=(isRoot=false AND zones in ('MY.ZONE'))
         ```

         ***Note:*** restrictions include
         * `AND` is the only supported operator when combining `isRoot` and `zones` filters
         * Only one zone is supported by the filter
         * The quoted zone name must be placed in parenthesis — a 400 error will result if these are omitted.


         The default sort order for the returned list is for groups to be sorted by ascending displayName.
         You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
         * id
         * displayName
      operationId: listGroupMembershipsForPerson
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Returns additional information about the group. The following optional fields can be requested:
          * parentIds
          * zones
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy** or **personId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List group memberships
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-accepts: application/json
  /people/{personId}/request-password-reset:
    post:
      deprecated: true
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 7.1, and will be removed in the future.

        Initiates the reset password workflow to send an email with reset password instruction to the user's registered email.

        The client is mandatory in the request body. For example:
        ```JSON
        {
          "client": "myClient"
        }
        ```
        **Note:** The client must be registered before this API can send an email. See [server documentation]. However, out-of-the-box
        share is registered as a default client, so you could pass **share** as the client name:
        ```JSON
        {
          "client": "share"
        }
        ```
        **Note:** No authentication is required to call this endpoint.
      operationId: requestPasswordReset
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientBody'
        description: The client name to send email with app-specific url.
        required: true
      responses:
        "202":
          content: {}
          description: |
            Successful response or even when the **personId** does not exist or the user is disabled by an Administrator
        "404":
          content: {}
          description: |
            **client** is not registered
      summary: Request password reset
      tags:
      - people
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: clientBody
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}/reset-password:
    post:
      deprecated: true
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 7.1, and will be removed in the future.
        Resets user's password

        The password, id and key properties are mandatory in the request body. For example:
        ```JSON
        {
          "password":"newPassword",
          "id":"activiti$10",
          "key":"4dad6d00-0daf-413a-b200-f64af4e12345"
        }
        ```
        **Note:** No authentication is required to call this endpoint.
      operationId: resetPassword
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetBody'
        description: The reset password details
        required: true
      responses:
        "202":
          content: {}
          description: |
            Successful response or even when no workflow instance is found with the given **id** or the workflow instance is
            invalid (already been used or expired) or the given **personId** does not match the person's id requesting
            the password reset or the given workflow **key** does not match the recovered key.
        "400":
          content: {}
          description: |
            Invalid parameter: Value of **password**, **id** or **key** is invalid
      summary: Reset password
      tags:
      - people
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: passwordResetBody
      x-contentType: application/json
      x-accepts: application/json
  /people/{personId}/avatar:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Deletes the avatar image related to person **personId**.

        You must be the person or have admin rights to update a person's avatar.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteAvatarImage
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete the avatar
            image for **personId**
        "404":
          content: {}
          description: |
            **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete avatar image
      tags:
      - people
      x-alfresco-since: 5.2.2
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets the avatar image related to the person **personId**. If the person has no related avatar then
        the **placeholder** query parameter can be optionally used to request a placeholder image to be returned.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getAvatarImage
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          If **true** and there is no avatar for this **personId**
          then the placeholder image is returned, rather than a 404 response.
        in: query
        name: placeholder
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **personId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **personId** does not exist or avatar does not exist (and no placeholder requested)
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get avatar image
      tags:
      - people
      x-alfresco-since: 5.2.2
      x-accepts: application/octet-stream
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Updates the avatar image related to the person **personId**.

        The request body should be the binary stream for the avatar image. The content type of the file
        should be an image file. This will be used to generate an "avatar" thumbnail rendition.

        You must be the person or have admin rights to update a person's avatar.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: updateAvatarImage
      parameters:
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        description: The binary content
        required: true
      responses:
        "200":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **personId** is not a valid format or the avatar cannot be uploaded
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to update the avatar
            image for **personId**
        "404":
          content: {}
          description: |
            **personId** does not exist
        "413":
          content: {}
          description: Content exceeds individual file size limit (configured for
            network/system)
        "501":
          content: {}
          description: Renditions/thumbnails are disabled for the system
        "507":
          content: {}
          description: Content exceeds overall storage quota limit configured for
            the network/system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update avatar image
      tags:
      - people
      x-alfresco-since: 5.2.2
      x-codegen-request-body-name: contentBodyUpdate
      x-contentType: application/octet-stream
      x-accepts: application/json
  /sites:
    get:
      description: |
        Gets a list of sites in this repository.

        You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.

        Example to filter by **visibility**, use any one of:

        ```
        (visibility='PRIVATE')
        (visibility='PUBLIC')
        (visibility='MODERATED')
        ```

        Example to filter by site **preset**:

        ```
        (preset='site-dashboard')
        ```

        The default sort order for the returned list is for sites to be sorted by ascending title.
        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * title
        * description

        You can use the **relations** parameter to include one or more related
        entities in a single response and so reduce network traffic.

        The entity types in Alfresco are organized in a tree structure.
        The **sites** entity has two children, **containers** and **members**.
        The following relations parameter returns all the container and member
        objects related to each site:

        ```
        containers,members
        ```
      operationId: listSites
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Use the relations parameter to include one or more related entities
          in a single response.
        explode: false
        in: query
        name: relations
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List sites
      tags:
      - sites
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Creates a default site with the given details.  Unless explicitly specified, the site id will be generated
        from the site title. The site id must be unique and only contain alphanumeric and/or dash characters.

        Note: the id of a site cannot be updated once the site has been created.

        For example, to create a public site called "Marketing" the following body could be used:
        ```JSON
        {
          "title": "Marketing",
          "visibility": "PUBLIC"
        }
        ```

        The creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.

        **Note:** if skipped then such a site will **not** work within Share.

        The addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.

        The creator will be added as a member with Site Manager role.

        When you create a site, a container called **documentLibrary** is created for you in the new site.
        This container is the root folder for content stored in the site.
      operationId: createSite
      parameters:
      - description: Flag to indicate whether the Share-specific (surf) configuration
          files for the site should not be created.
        in: query
        name: skipConfiguration
        schema:
          default: false
          type: boolean
      - description: Flag to indicate whether the site should not be added to the
          user's site favorites.
        in: query
        name: skipAddToFavorites
        schema:
          default: false
          type: boolean
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteBodyCreate'
        description: The site details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **id**, **title**, or **description** exceed the maximum length;
            or **id** contains invalid characters; or **siteBodyCreate** invalid
        "401":
          content: {}
          description: Authentication failed
        "409":
          content: {}
          description: Site with the given identifier already exists
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site
      tags:
      - sites
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: siteBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /sites/{siteId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the site with **siteId**.
      operationId: deleteSite
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Flag to indicate whether the site should be permanently deleted
          i.e. bypass the trashcan.
        in: query
        name: permanent
        schema:
          default: false
          type: boolean
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete the site that
            is visible to them.
        "404":
          content: {}
          description: |
            **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site
      tags:
      - sites
      x-alfresco-since: "5.2"
      x-accepts: application/json
    get:
      description: |
        Gets information for site **siteId**.

        You can use the **relations** parameter to include one or more related
        entities in a single response and so reduce network traffic.

        The entity types in Alfresco are organized in a tree structure.
        The **sites** entity has two children, **containers** and **members**.
        The following relations parameter returns all the container and member
        objects related to the site **siteId**:

        ```
        containers,members
        ```
      operationId: getSite
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Use the relations parameter to include one or more related entities
          in a single response.
        explode: false
        in: query
        name: relations
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site
      tags:
      - sites
      x-accepts: application/json
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Update the details for the given site **siteId**. Site Manager or otherwise a
        (site) admin can update title, description or visibility.

        Note: the id of a site cannot be updated once the site has been created.
      operationId: updateSite
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteBodyUpdate'
        description: The site information to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **siteBodyUpdate** invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to update the site that
            is visible to them.
        "404":
          content: {}
          description: |
            **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a site
      tags:
      - sites
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: siteBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /sites/{siteId}/containers:
    get:
      description: Gets a list of containers for the site **siteId**.
      operationId: listSiteContainers
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteContainerPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site containers
      tags:
      - sites
      x-accepts: application/json
  /sites/{siteId}/containers/{containerId}:
    get:
      description: Gets information on the container **containerId** in site **siteId**.
      operationId: getSiteContainer
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The unique identifier of a site container.
        in: path
        name: containerId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteContainerEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** or **containerId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site container
      tags:
      - sites
      x-accepts: application/json
  /site-membership-requests:
    get:
      description: |
        Get the list of site membership requests the user can action.

        You can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:

        ```
        (siteId=mySite)
        ```

        The **where** parameter can also be used to filter by ***personId***. For example:

        ```
        where=(personId=person)
        ```

        This may be combined with the siteId filter, as shown below:

        ```
        where=(siteId=mySite AND personId=person))
        ```
      operationId: getSiteMembershipRequests
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestWithPersonPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get site membership requests
      tags:
      - sites
      x-accepts: application/json
  /sites/{siteId}/site-membership-requests/{inviteeId}/approve:
    post:
      description: |
        Approve a site membership request.
      operationId: approveSiteMembershipRequest
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The invitee user name.
        in: path
        name: inviteeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipApprovalBody'
        description: |
          Accepting a request to join, optionally, allows assignment of a role to the user.
        required: false
      responses:
        "200":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **siteId** or **inviteeId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to approve membership
            request
        "404":
          content: {}
          description: |
            **siteId** or **inviteeId** does not exist
        "422":
          content: {}
          description: |
            Integrity exception or not allowed to approve membership request.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Approve a site membership request
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipApprovalBody
      x-contentType: application/json
      x-accepts: application/json
  /sites/{siteId}/site-membership-requests/{inviteeId}/reject:
    post:
      description: |
        Reject a site membership request.
      operationId: rejectSiteMembershipRequest
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The invitee user name.
        in: path
        name: inviteeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipRejectionBody'
        description: |
          Rejecting a request to join, optionally, allows the inclusion of comment.
        required: false
      responses:
        "200":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **siteId** or **inviteeId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to reject membership
            request
        "404":
          content: {}
          description: |
            **siteId** or **inviteeId** does not exist
        "422":
          content: {}
          description: |
            Integrity exception or not allowed to reject membership request.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Reject a site membership request
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipRejectionBody
      x-contentType: application/json
      x-accepts: application/json
  /sites/{siteId}/members:
    get:
      description: Gets a list of site memberships for site **siteId**.
      operationId: listSiteMemberships
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Optionally filter the list.
          *   ```where=(isMemberOfGroup=false|true)```
        in: query
        name: where
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site memberships
      tags:
      - sites
      x-accepts: application/json
    post:
      description: |
        Creates a site membership for person **personId** on site **siteId**.

        You can set the **role** to one of four types:

        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager

        **Note:** You can create more than one site membership by
        specifying a list of people in the JSON body like this:

        ```JSON
        [
          {
            "role": "SiteConsumer",
            "id": "joe"
          },
          {
            "role": "SiteConsumer",
            "id": "fred"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSiteMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyCreate'
        description: The person to add and their role
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **role** or **id** is invalid
            or **siteMembershipBodyCreate** invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to invite a person
        "404":
          content: {}
          description: |
            **siteId** or **personId** does not exist
        "409":
          content: {}
          description: Person with this **id** is already a member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site membership
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /sites/{siteId}/members/{personId}:
    delete:
      description: |
        Deletes person **personId** as a member of site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** or **personId** does not exist
        "422":
          content: {}
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site membership
      tags:
      - sites
      x-accepts: application/json
    get:
      description: |
        Gets site membership information for person **personId** on site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** or **personId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site membership
      tags:
      - sites
      x-accepts: application/json
    put:
      description: |
        Update the membership of person **personId** in site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        You can set the **role** to one of four types:

        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
      operationId: updateSiteMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The identifier of a person.
        in: path
        name: personId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyUpdate'
        description: The persons new role
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **role** does not exist
            or **siteMembershipBodyUpdate** invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** or **personId** does not exist
        "422":
          content: {}
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a site membership
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /sites/{siteId}/group-members:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets a list of group membership for site **siteId**.
      operationId: listSiteGroups
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List group membership for site
      tags:
      - sites
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Creates a site membership for group **groupId** on site **siteId**.
        You can set the **role** to one of four types:
        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
        **Note:** You can create more than one site membership by
        specifying a list of group in the JSON body like this:

        ```JSON
          [
           {
             "role": "SiteConsumer",
             "id": "authorityId"
           },
           {
             "role": "SiteConsumer",
             "id": "authorityId"
           }
          ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:
        ```JSON
          {
            "list": {
              "pagination": {
                "count": 2,
                "hasMoreItems": false,
                "totalItems": 2,
                "skipCount": 0,
                "maxItems": 100
              },
              "entries": [
                {
                  "entry": {
                    ...
                  }
                },
                {
                  "entry": {
                    ...
                  }
                }
              ]
            }
          }
        ```
      operationId: createSiteGroupMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyCreate'
        description: The group to add and their role
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **role** or **id** is invalid
            or **siteMembershipBodyCreate** invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to invite a Group
        "404":
          content: {}
          description: |
            **siteId** or **groupId** does not exist
        "409":
          content: {}
          description: Group with this **id** is already a member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site membership for group
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /sites/{siteId}/group-members/{groupId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Deletes group **groupId** as a member of site **siteId**.
      operationId: deleteSiteGroupMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** or **groupId** does not exist
        "422":
          content: {}
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete groupId
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a group membership for site
      tags:
      - sites
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets site membership information for group **groupId** on site **siteId**.
      operationId: getSiteGroupMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** or **groupId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get information about site membership of group
      tags:
      - sites
      x-accepts: application/json
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Update the membership of person **groupId** in site **siteId**.
        You can set the **role** to one of four types:
        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
      operationId: updateSiteGroupMembership
      parameters:
      - description: The identifier of a site.
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyUpdate'
        description: The groupId new role
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **role** does not exist
            or **siteMembershipBodyUpdate** invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **siteId** or **groupId** does not exist
        "422":
          content: {}
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update group
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update site membership of group
      tags:
      - sites
      x-codegen-request-body-name: siteMembershipBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /tags:
    get:
      description: |
        Gets a list of tags in this repository.

        You can use the **include** parameter to return additional **values** information.
      operationId: listTags
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Returns additional information about the tag. The following optional fields can be requested:
          * count
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List tags
      tags:
      - tags
      x-accepts: application/json
  /tags/{tagId}:
    get:
      description: Get a specific tag with **tagId**.
      operationId: getTag
      parameters:
      - description: The identifier of a tag.
        in: path
        name: tagId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                id: ed2444b5-d0c1-440b-b5b8-34a53e578091
                tag: test tag 1
              schema:
                $ref: '#/components/schemas/TagEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **tagId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a tag
      tags:
      - tags
      x-accepts: application/json
    put:
      description: Updates the tag **tagId**.
      operationId: updateTag
      parameters:
      - description: The identifier of a tag.
        in: path
        name: tagId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagBody'
        description: The updated tag
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **tagBodyUpdate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **tagId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a tag
      tags:
      - tags
      x-codegen-request-body-name: tagBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /networks/{networkId}:
    get:
      description: Gets information for a network **networkId**.
      operationId: getNetwork
      parameters:
      - description: The identifier of a network.
        in: path
        name: networkId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **networkId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a network
      tags:
      - networks
      x-accepts: application/json
  /shared-links:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Get a list of links that the current user has read permission on source node.

        The list is ordered in descending modified order.

        **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately.
      operationId: listSharedLinks
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          Optionally filter the list by "sharedByUser" userid of person who shared the link (can also use -me-)

          *   ```where=(sharedByUser='jbloggs')```

          *   ```where=(sharedByUser='-me-')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the shared link, the following optional fields can be requested:
          * allowableOperations
          * path
          * properties
          * isFavorite
          * aspectNames
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List shared links
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set,
        so the shared link would become invalid when the expiry date is reached. For example:

        ```JSON
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-3333333333",
            "expiresAt": "2017-03-23T23:00:00.000+0000"
          }
        ```

        **Note:** You can create shared links to more than one file
        specifying a list of **nodeId**s in the JSON body like this:

        ```JSON
        [
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-4444444444"
          },
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-5555555555"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSharedLink
      parameters:
      - description: |
          Returns additional information about the shared link, the following optional fields can be requested:
          * allowableOperations
          * path
          * properties
          * isFavorite
          * aspectNames
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLinkBodyCreate'
        description: The nodeId to create a shared link for.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **nodeId** is not a valid format, or does not identify a file,
            or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date
            has already passed
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to create **sharedId**
            (for example, no read permission)
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "409":
          content: {}
          description: Shared link already exists for **nodeId**
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a shared link to a file
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: sharedLinkBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /shared-links/{sharedId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the shared link with identifier **sharedId**.
      operationId: deleteSharedLink
      parameters:
      - description: The identifier of a shared link to a file.
        in: path
        name: sharedId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete **sharedId**
        "404":
          content: {}
          description: |
            **sharedId** does not exist
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Deletes a shared link
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets minimal information for the file with shared link identifier **sharedId**.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLink
      parameters:
      - description: The identifier of a shared link to a file.
        in: path
        name: sharedId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "404":
          content: {}
          description: |
            **sharedId** does not exist
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a shared link
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /shared-links/{sharedId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the file with shared link identifier **sharedId**.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkContent
      parameters:
      - description: The identifier of a shared link to a file.
        in: path
        name: sharedId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "404":
          content: {}
          description: |
            **sharedId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: Range Not Satisfiable
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get shared link content
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-accepts: application/octet-stream
  /shared-links/{sharedId}/renditions:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of the rendition information for the file with shared link identifier **sharedId**.

        This API method returns rendition information, including the rendition id, for each rendition
        where the rendition status is CREATED, which means the rendition is available to view/download.

        **Note:** No authentication is required to call this endpoint.
      operationId: listSharedLinkRenditions
      parameters:
      - description: The identifier of a shared link to a file.
        in: path
        name: sharedId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "404":
          content: {}
          description: |
            **sharedId** does not exist
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List renditions for a shared link
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /shared-links/{sharedId}/renditions/{renditionId}:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets rendition information for the file with shared link identifier **sharedId**.

        This API method returns rendition information where the rendition status is CREATED,
        which means the rendition is available to view/download.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkRendition
      parameters:
      - description: The identifier of a shared link to a file.
        in: path
        name: sharedId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid
        "404":
          content: {}
          description: |
            **sharedId**  or **renditionId** does not exist (ie. not CREATED)
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get shared link rendition information
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /shared-links/{sharedId}/renditions/{renditionId}/content:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for file with shared link identifier **sharedId**.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkRenditionContent
      parameters:
      - description: The identifier of a shared link to a file.
        in: path
        name: sharedId
        required: true
        schema:
          type: string
      - description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
        in: path
        name: renditionId
        required: true
        schema:
          type: string
      - description: |
          **true** enables a web browser to download the file as an attachment.
          **false** means a web browser may preview the file in a new tab or window.

          You can only set this parameter to **false** if the content type of the file is in the supported list;
          for example, certain image files and PDF files.

          If the content type is not supported for preview, then a value of **false**  is ignored, and
          the attachment will be returned in the response.
        in: query
        name: attachment
        schema:
          default: true
          type: boolean
      - description: |
          Only returns the content if it has been modified since the date provided.
          Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
        in: header
        name: If-Modified-Since
        schema:
          format: date-time
          type: string
      - description: |
          The Range header indicates the part of a document that the server should return.
          Single part request supported, for example: bytes=1-10.
        in: header
        name: Range
        schema:
          format: bytes
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response
        "206":
          content: {}
          description: Partial Content
        "304":
          content: {}
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          content: {}
          description: |
            Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid
        "404":
          content: {}
          description: |
            **sharedId** does not exist
        "412":
          content: {}
          description: |
            Content is archived and is inaccessible
        "416":
          content: {}
          description: Range Not Satisfiable
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get shared link rendition content
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-accepts: application/octet-stream
  /shared-links/{sharedId}/email:
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Sends email with app-specific url including identifier **sharedId**.

        The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info:
        ```JSON
        {
            "client": "myClient",
            "recipientEmails": ["john.doe@acme.com", "joe.bloggs@acme.com"]
        }
        ```
        A plain text message property can be optionally provided in the request body to customise the sent email.
        Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco).
        For example, to email a shared link with a messages and a locale:
        ```JSON
        {
            "client": "myClient",
            "recipientEmails": ["john.doe@acme.com", "joe.bloggs@acme.com"],
            "message": "myMessage",
            "locale":"en-GB"
        }
        ```
        **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box
         share is registered as a default client, so you could pass **share** as the client name:
        ```JSON
        {
            "client": "share",
            "recipientEmails": ["john.doe@acme.com"]
        }
        ```
      operationId: emailSharedLink
      parameters:
      - description: The identifier of a shared link to a file.
        in: path
        name: sharedId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLinkBodyEmail'
        description: The shared link email to send.
        required: true
      responses:
        "202":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **sharedId** is not a valid format
            or **sharedLinkBodyEmail** invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **sharedId** does not exist or **client** is not registered
        "501":
          content: {}
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Email shared link
      tags:
      - shared-links
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: sharedLinkBodyEmail
      x-contentType: application/json
      x-accepts: application/json
  /probes/{probeId}:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 6.0 and newer versions.

        Returns a status of 200 to indicate success and 503 for failure.

        The readiness probe is normally only used to check repository startup.

        The liveness probe should then be used to check the repository is still responding to requests.

        **Note:** No authentication is required to call this endpoint.
      operationId: getProbe
      parameters:
      - description: |
          The name of the probe:
          * -ready-
          * -live-
        in: path
        name: probeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbeEntry'
          description: Successful response
        "404":
          content: {}
          description: |
            **probeId** does not exist
        "503":
          content: {}
          description: Service Unavailable - Probe failure status.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Check readiness and liveness of the repository
      tags:
      - probes
      x-alfresco-since: "6.0"
      x-accepts: application/json
  /queries/nodes:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of nodes that match the given search criteria.

        The search term is used to look for nodes that match against name, title, description, full text content or tags.

        The search term:
        - must contain a minimum of 3 alphanumeric characters
        - allows "quoted term"
        - can optionally use '*' for wildcard matching

        By default, file and folder types will be searched unless a specific type is provided as a query parameter.

        By default, the search will be across the repository unless a specific root node id is provided to start the search from.

        You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * name
        * modifiedAt
        * createdAt
      operationId: findNodes
      parameters:
      - description: The term to search for.
        in: query
        name: term
        required: true
        schema:
          type: string
      - description: |
          The id of the node to start the search from.

          Supports the aliases -my-, -root- and -shared-.
        in: query
        name: rootNodeId
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          Restrict the returned results to only those of the given node type and its sub-types
        in: query
        name: nodeType
        schema:
          type: string
      - description: |
          Returns additional information about the node. The following optional fields can be requested:
          * allowableOperations
          * aspectNames
          * isLink
          * isFavorite
          * isDirectLinkEnabled
          * isLocked
          * path
          * properties
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **nodeType** unknown, or **orderBy** invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **rootNodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find nodes
      tags:
      - queries
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /queries/sites:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of sites that match the given search criteria.

        The search term is used to look for sites that match against site id, title or description.

        The search term:
        - must contain a minimum of 2 alphanumeric characters
        - can optionally use '*' for wildcard matching within the term

        The default sort order for the returned list is for sites to be sorted by ascending id.
        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * title
        * description
      operationId: findSites
      parameters:
      - description: The term to search for.
        in: query
        name: term
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **orderBy** invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find sites
      tags:
      - queries
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /queries/people:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of people that match the given search criteria.

        The search term is used to look for matches against person id, firstname and lastname.

        The search term:
        - must contain a minimum of 2 alphanumeric characters
        - can optionally use '*' for wildcard matching within the term

        You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * firstName
        * lastName
      operationId: findPeople
      parameters:
      - description: |
          The term to search for.
        in: query
        name: term
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **orderBy** invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find people
      tags:
      - queries
      x-alfresco-since: "5.2"
      x-accepts: application/json
  /groups:
    get:
      description: "**Note:** this endpoint is available in Alfresco 5.2.1 and newer\
        \ versions.\n\nGets a list of groups.\n\nYou can use the **include** parameter\
        \ to return additional information.\n\nYou can use the **where** parameter\
        \ to filter the returned groups by **isRoot**. For example, the following\
        \ **where**\nclause will return just the root groups:\n\n```\n(isRoot=true)\n\
        ```\n\nThe **where** parameter can also be used to filter by ***zone*** and\
        \ ***displayName***.\nThey may be combined with isRoot to narrow a result\
        \ set even further. \nFor example, the following where clause will only return\
        \ groups belonging to the `MY.ZONE` zone.\n\n```\nwhere=(zones in ('MY.ZONE'))\n\
        ```\n\nThis may be combined with the isRoot filter, as shown below:\n\n```\n\
        where=(isRoot=false AND zones in ('MY.ZONE'))\n```\nThe following where clause\
        \ will only return groups with displayName `MY.GROUP.NAME`. \n\n```\nwhere=(displayName\
        \ in ('MY.GROUP.NAME'))\n```\nThis may be combined with the isRoot and zones\
        \ filter, as shown below:\n\n```\nwhere=(isRoot=false AND displayName in ('MY.GROUP.NAME'))\n\
        ```\n\n```\nwhere=(zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))\n\
        ```\n\n```\nwhere=(isRoot=false AND zones in ('MY.ZONE') AND displayName in\
        \ ('MY.GROUP.NAME'))\n```\n\n***Note:*** restrictions include\n* `AND` is\
        \ the only supported operator when combining `isRoot`, `zones` and `displayName`\
        \ filters\n* Only one zone is supported by the filter\n* Only one displayName\
        \ is supported by the filter\n* The quoted zone name and displayName must\
        \ be placed in parenthesis — a 400 error will result if these are omitted.\n\
        \nThe default sort order for the returned list is for groups to be sorted\
        \ by ascending displayName.\nYou can override the default by using the **orderBy**\
        \ parameter. You can specify one of the following fields in the **orderBy**\
        \ parameter:\n* id\n* displayName\n"
      operationId: listGroups
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Returns additional information about the group. The following optional fields can be requested:
          * parentIds
          * zones
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount**, or **orderBy**, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List groups
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Create a group.

        The group id must start with "GROUP\_". If this is omitted it will be added automatically.
        This format is also returned when listing groups or group memberships. It should be noted
        that the other group-related operations also expect the id to start with "GROUP\_".

        If one or more parentIds are specified then the group will be created and become a member
        of each of the specified parent groups.

        If no parentIds are specified then the group will be created as a root group.

        The group will be created in the **APP.DEFAULT** and **AUTH.ALF** zones.

        You must have admin rights to create a group.
      operationId: createGroup
      parameters:
      - description: |
          Returns additional information about the group. The following optional fields can be requested:
          * parentIds
          * zones
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBodyCreate'
        description: The group to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: invalid **groupBodyCreate**
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to create a group
        "404":
          content: {}
          description: |
            **parentIds** does not exist
        "409":
          content: {}
          description: |
            **id** clashes with an existing group
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a group
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: groupBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /groups/{groupId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Delete group **groupId**.

        The option to cascade delete applies this recursively to any hierarchy of group members.
        In this case, removing a group member does not delete the person or sub-group itself.
        If a removed sub-group no longer has any parent groups then it becomes a root group.

        You must have admin rights to delete a group.
      operationId: deleteGroup
      parameters:
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: |
          If **true** then the delete will be applied in cascade to sub-groups.
        in: query
        name: cascade
        schema:
          default: false
          type: boolean
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **groupId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to delete a group member
        "404":
          content: {}
          description: |
            **groupId** does not exist
        "409":
          content: {}
          description: |
            Trying to delete a pre-defined system group, such as GROUP_EVERYONE.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a group
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Get details for group **groupId**.

        You can use the **include** parameter to return additional information.
      operationId: getGroup
      parameters:
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the group. The following optional fields can be requested:
          * parentIds
          * zones
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: invalid **groupId**
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **groupId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get group details
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-accepts: application/json
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Update details (displayName) for group **groupId**.

        You must have admin rights to update a group.
      operationId: updateGroup
      parameters:
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: |
          Returns additional information about the group. The following optional fields can be requested:
          * parentIds
          * zones
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBodyUpdate'
        description: The group information to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **groupId** or **groupBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to update a group
        "404":
          content: {}
          description: |
            **groupId** does not exist
        "409":
          content: {}
          description: |
            Trying to modify a pre-defined system group, such as GROUP_EVERYONE
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update group details
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: groupBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /groups/{groupId}/members:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Gets a list of the group memberships for the group **groupId**.

        You can use the **where** parameter to filter the returned groups by **memberType**.

        Example to filter by **memberType**, use any one of:

        ```
        (memberType='GROUP')
        (memberType='PERSON')
        ```

        The default sort order for the returned list is for group members to be sorted by ascending displayName.
        You can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:
        * id
        * displayName
      operationId: listGroupMemberships
      parameters:
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A string to restrict the returned objects by using a predicate.
        in: query
        name: where
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **groupId** does not exist
        "405":
          content: {}
          description: |
            Trying to list all members of a pre-defined system group, such as GROUP_EVERYONE
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List memberships of a group
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-accepts: application/json
    post:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Create a group membership (for an existing person or group) within a group **groupId**.

        If the added group was previously a root group then it becomes a non-root group since it now has a parent.

        It is an error to specify an **id** that does not exist.

        You must have admin rights to create a group membership.
      operationId: createGroupMembership
      parameters:
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMembershipBodyCreate'
        description: The group membership to add (person or sub-group).
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **groupId** or **groupMembershipBodyCreate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to create a group membership
        "404":
          content: {}
          description: |
            **groupId** or *id* (of group or person) does not exist
        "409":
          content: {}
          description: |
            Trying to modify a pre-defined system group, such as GROUP_EVERYONE.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a group membership
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: groupMembershipBodyCreate
      x-contentType: application/json
      x-accepts: application/json
  /groups/{groupId}/members/{groupMemberId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Delete group member **groupMemberId** (person or sub-group) from group **groupId**.

        Removing a group member does not delete the person or sub-group itself.

        If a removed sub-group no longer has any parent groups then it becomes a root group.

        You must have admin rights to delete a group membership.
      operationId: deleteGroupMembership
      parameters:
      - description: The identifier of a group.
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: The identifier of a person or group.
        in: path
        name: groupMemberId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **groupId**, or **groupMemberId** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to delete a group membership
        "404":
          content: {}
          description: |
            **groupId** or **groupMemberId** does not exist
        "409":
          content: {}
          description: |
            Trying to delete a member of a pre-defined system group, such as GROUP_EVERYONE
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a group membership
      tags:
      - groups
      x-alfresco-since: 5.2.1
      x-accepts: application/json
  /audit-applications:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of audit applications in this repository.

        This list may include pre-configured audit applications, if enabled, such as:

        * alfresco-access
        * CMISChangeLog
        * Alfresco Tagging Service
        * Alfresco Sync Service (used by Enterprise Cloud Sync)

        You must have admin rights to retrieve audit information.
      operationId: listAuditApps
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditAppPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to retrieve audit information
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List audit applications
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-accepts: application/json
  /audit-applications/{auditApplicationId}:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Get status of an audit application **auditApplicationId**.

        You must have admin rights to retrieve audit information.

        You can use the **include** parameter to return the minimum and/or maximum audit record id for the application.
      operationId: getAuditApp
      parameters:
      - description: The identifier of an audit application.
        in: path
        name: auditApplicationId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Also include the current minimum and/or maximum audit entry ids for the application. The following optional fields can be requested:
          * max
          * min
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditApp'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: invalid **auditApplicationId**
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to retrieve audit information
        "404":
          content: {}
          description: |
            **applicationId** does not exist
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get audit application info
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-accepts: application/json
    put:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Disable or re-enable the audit application **auditApplicationId**.

        New audit entries will not be created for a disabled audit application until
        it is re-enabled (and system-wide auditing is also enabled).

        Note, it is still possible to query &/or delete any existing audit entries even
        if auditing is disabled for the audit application.

        You must have admin rights to update audit application.
      operationId: updateAuditApp
      parameters:
      - description: The identifier of an audit application.
        in: path
        name: auditApplicationId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditBodyUpdate'
        description: The audit application to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditApp'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **auditApplicationId** is not a valid format or **auditAppBodyUpdate** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to update audit application
        "404":
          content: {}
          description: |
            **auditApplicationId** does not exist
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update audit application info
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-codegen-request-body-name: auditAppBodyUpdate
      x-contentType: application/json
      x-accepts: application/json
  /audit-applications/{auditApplicationId}/audit-entries:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Permanently delete audit entries for an audit application **auditApplicationId**.

        The **where** clause must be specified, either with an inclusive time period or for
        an inclusive range of ids. The delete is within the context of the given audit application.

        For example:

        *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```
        *   ```where=(id BETWEEN ('1234', '4321')```

        You must have admin rights to delete audit information.
      operationId: deleteAuditEntriesForAuditApp
      parameters:
      - description: The identifier of an audit application.
        in: path
        name: auditApplicationId
        required: true
        schema:
          type: string
      - description: |
          Audit entries to permanently delete for an audit application, given an inclusive time period or range of ids. For example:

          *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```
          *   ```where=(id BETWEEN ('1234', '4321')```
        in: query
        name: where
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **auditApplicationId** is not a valid format or invalid **where**
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete audit information
        "404":
          content: {}
          description: |
            **auditApplicationId** does not exist
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Permanently delete audit entries for an audit application
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of audit entries for audit application **auditApplicationId**.

        You can use the **include** parameter to return additional **values** information.

        The list can be filtered by one or more of:
        * **createdByUser** person id
        * **createdAt** inclusive time period
        * **id** inclusive range of ids
        * **valuesKey** audit entry values contains the exact matching key
        * **valuesValue** audit entry values contains the exact matching value

        The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**
        modifier to specify an ascending or descending sort order.

        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.

        You must have admin rights to retrieve audit information.
      operationId: listAuditEntriesForAuditApp
      parameters:
      - description: The identifier of an audit application.
        in: path
        name: auditApplicationId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          A boolean to control if the response provides the total numbers of items in the collection.
          If not supplied then the default value is false.
        in: query
        name: omitTotalItems
        schema:
          default: false
          type: boolean
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          Optionally filter the list. Here are some examples:

          *   ```where=(createdByUser='jbloggs')```

          *   ```where=(id BETWEEN ('1234', '4321')```

          *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

          *   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

          *   ```where=(valuesKey='/alfresco-access/login/user')```

          *   ```where=(valuesKey='/alfresco-access/transaction/action' and valuesValue='DELETE')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the audit entry. The following optional fields can be requested:
          * values
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: *auditApplicationId** is not a valid format, value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to retrieve audit information
        "404":
          content: {}
          description: |
            **applicationId** does not exist
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List audit entries for an audit application
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-accepts: application/json
  /audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}:
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Permanently delete a single audit entry **auditEntryId**.

        You must have admin rights to delete audit information.
      operationId: deleteAuditEntry
      parameters:
      - description: The identifier of an audit application.
        in: path
        name: auditApplicationId
        required: true
        schema:
          type: string
      - description: The identifier of an audit entry.
        in: path
        name: auditEntryId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **auditApplicationId** or **auditEntryId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: Current user does not have permission to delete audit information
        "404":
          content: {}
          description: |
            **auditApplicationId** or **auditEntryId** does not exist
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Permanently delete an audit entry
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-accepts: application/json
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets audit entry **auditEntryId**.

        You must have admin rights to access audit information.
      operationId: getAuditEntry
      parameters:
      - description: The identifier of an audit application.
        in: path
        name: auditApplicationId
        required: true
        schema:
          type: string
      - description: The identifier of an audit entry.
        in: path
        name: auditEntryId
        required: true
        schema:
          type: string
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryEntry'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: **auditApplicationId** or **auditEntryId** is not a valid format
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to retrieve audit information
        "404":
          content: {}
          description: |
            **auditApplicationId** or **auditEntryId** does not exist
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get audit entry
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-accepts: application/json
  /nodes/{nodeId}/audit-entries:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of audit entries for node **nodeId**.

        The list can be filtered by **createdByUser** and for a given inclusive time period.

        The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**
        modifier to specify an ascending or descending sort order.

        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.

        This relies on the pre-configured 'alfresco-access' audit application.
      operationId: listAuditEntriesForNode
      parameters:
      - description: The identifier of a node.
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          Optionally filter the list. Here are some examples:

          *   ```where=(createdByUser='-me-')```

          *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

          *   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```
        in: query
        name: where
        schema:
          type: string
      - description: |
          Returns additional information about the audit entry. The following optional fields can be requested:
          * values
        explode: false
        in: query
        name: include
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryPaging'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: *nodeId** is not a valid format, value of **maxItems** or **skipCount** is invalid
        "401":
          content: {}
          description: Authentication failed
        "403":
          content: {}
          description: User does not have permission to retrieve audit information
        "404":
          content: {}
          description: |
            **nodeId** does not exist
        "501":
          content: {}
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List audit entries for a node
      tags:
      - audit
      x-alfresco-since: 5.2.2
      x-accepts: application/json
  /action-definitions:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of all available actions

        The default sort order for the returned list is for actions to be sorted by ascending name.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        * name
        * title
      operationId: listActions
      parameters:
      - description: |
          The number of entities that exist in the collection before those included in this list.
          If not supplied then the default value is 0.
        in: query
        name: skipCount
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: |
          The maximum number of items to return in the list.
          If not supplied then the default value is 100.
        in: query
        name: maxItems
        schema:
          default: 100
          minimum: 1
          type: integer
      - description: |
          A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
          sort the list by one or more fields.

          Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
          above to check if any fields used in this method have a descending default search order.

          To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
        explode: false
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          A list of field names.

          You can use this parameter to restrict the fields
          returned within a response if, for example, you want to save on overall bandwidth.

          The list applies to a returned individual
          entity or entries within a collection.

          If the API method also supports the **include**
          parameter, then the fields specified in the **include**
          parameter are returned in addition to those specified in the **fields** parameter.
        explode: false
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionList'
          description: Successful response
        "400":
          content: {}
          description: |
            Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid
        "401":
          content: {}
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve list of available actions
      tags:
      - actions
      x-alfresco-since: 5.2.2
      x-accepts: application/json
  /action-definitions/{actionDefinitionId}:
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Retrieve the details of the action denoted by **actionDefinitionId**.
      operationId: actionDetails
      parameters:
      - description: The identifier of an action definition.
        in: path
        name: actionDefinitionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionEntry'
          description: Successful response
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **actionDefinitionId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve the details of an action definition
      tags:
      - actions
      x-alfresco-since: 5.2.2
      x-accepts: application/json
  /action-executions:
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer\
        \ versions.\n\nExecutes an action\n\nAn action may be executed against a node\
        \ specified by **targetId**. For example:\n\n```\n{\n  \"actionDefinitionId\"\
        : \"copy\",\n  \"targetId\": \"4c4b3c43-f18b-43ff-af84-751f16f1ddfd\",\n \
        \ \"params\": {\n  \t\"destination-folder\": \"34219f79-66fa-4ebf-b371-118598af898c\"\
        \n  }\n}\n```\n\nPerforming a POST with the request body shown above will\
        \ result in the node identified by ```targetId```\nbeing copied to the destination\
        \ folder specified in the ```params``` object by the key ```destination-folder```.\n\
        \n**targetId** is optional, however, currently **targetId** must be a valid\
        \ node ID.\nIn the future, actions may be executed against different entity\
        \ types or\nexecuted without the need for the context of an entity.\n\n\n\
        Parameters supplied to the action within the ```params``` object will be converted\
        \ to the expected type,\nwhere possible using the DefaultTypeConverter class.\
        \ In addition:\n\n* Node IDs may be supplied in their short form (implicit\
        \ workspace://SpacesStore prefix)\n* Aspect names may be supplied using their\
        \ short form, e.g. cm:versionable or cm:auditable\n\nIn this example, we add\
        \ the aspect ```cm:versionable``` to a node using the QName resolution mentioned\
        \ above:\n\n```\n{\n  \"actionDefinitionId\": \"add-features\",\n  \"targetId\"\
        : \"16349e3f-2977-44d1-93f2-73c12b8083b5\",\n  \"params\": {\n  \t\"aspect-name\"\
        : \"cm:versionable\"\n  }\n}\n```\n\nThe ```actionDefinitionId``` is the ```id```\
        \ of an action definition as returned by\nthe _list actions_ operations (e.g.\
        \ GET /action-definitions).\n\nThe action will be executed **asynchronously**\
        \ with a `202` HTTP response signifying that\nthe request has been accepted\
        \ successfully. The response body contains the unique ID of the action\npending\
        \ execution. The ID may be used, for example to correlate an execution with\
        \ output in the server logs.\n"
      operationId: actionExec
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionBodyExec'
        description: Action execution details
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionExecResultEntry'
          description: |
            Action execution request accepted and pending execution.
        "400":
          content: {}
          description: |
            Invalid parameter: **actionDefinitionId** missing but required by the action
        "401":
          content: {}
          description: Authentication failed
        "404":
          content: {}
          description: |
            **actionDefinitionId** or **targetId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Execute an action
      tags:
      - actions
      x-alfresco-since: 5.2.2
      x-codegen-request-body-name: actionBodyExec
      x-contentType: application/json
      x-accepts: application/json
components:
  parameters:
    actionDefinitionIdParam:
      description: The identifier of an action definition.
      in: path
      name: actionDefinitionId
      required: true
      schema:
        type: string
    nodeIdParam:
      description: The identifier of a node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeIdWithAliasParam:
      description: |
        The identifier of a node. You can also use one of these well-known aliases:
        * -my-
        * -shared-
        * -root-
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeParentIdParam:
      description: The identifier of a parent node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeParentIdWithAliasParam:
      description: |
        The identifier of a parent node. You can also use one of these well-known aliases:
        * -my-
        * -shared-
        * -root-
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeChildIdWithAliasParam:
      description: |
        The identifier of a child node. You can also use one of these well-known aliases:
        * -my-
        * -shared-
        * -root-
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeSourceIdParam:
      description: The identifier of a source node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeTargetIdParam:
      description: The identifier of a target node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeMinimalEntryIncludeParam:
      description: |
        Returns additional information about the node. The following optional fields can be requested:
        * allowableOperations
        * aspectNames
        * association
        * isLink
        * isFavorite
        * isDirectLinkEnabled
        * isLocked
        * path
        * properties
        * permissions
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    nodeAssocMinimalEntryIncludeParam:
      description: |
        Returns additional information about the node. The following optional fields can be requested:
        * allowableOperations
        * aspectNames
        * isLink
        * isFavorite
        * isDirectLinkEnabled
        * isLocked
        * path
        * properties
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    nodeEntryIncludeParam:
      description: |
        Returns additional information about the node. The following optional fields can be requested:
        * allowableOperations
        * association
        * isLink
        * isFavorite
        * isDirectLinkEnabled
        * isLocked
        * path
        * permissions
        * definition
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    groupEntryIncludeParam:
      description: |
        Returns additional information about the group. The following optional fields can be requested:
        * parentIds
        * zones
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    personMinimalEntryIncludeParam:
      description: |
        Returns additional information about the person. The following optional fields can be requested:
        * properties
        * aspectNames
        * capabilities
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    tagEntryIncludeParam:
      description: |
        Returns additional information about the tag. The following optional fields can be requested:
        * count
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    sharedIdParam:
      description: The identifier of a shared link to a file.
      in: path
      name: sharedId
      required: true
      schema:
        type: string
    sharedLinkEntryIncludeParam:
      description: |
        Returns additional information about the shared link, the following optional fields can be requested:
        * allowableOperations
        * path
        * properties
        * isFavorite
        * aspectNames
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    renditionIdParam:
      description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
      in: path
      name: renditionId
      required: true
      schema:
        type: string
    versionIdParam:
      description: The identifier of a version, ie. version label, within the version
        history of a node.
      in: path
      name: versionId
      required: true
      schema:
        type: string
    versionMinimalEntryIncludeParam:
      description: |
        Returns additional information about the version node. The following optional fields can be requested:
        * properties
        * aspectNames
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    personIdParam:
      description: The identifier of a person.
      in: path
      name: personId
      required: true
      schema:
        type: string
    groupIdParam:
      description: The identifier of a group.
      in: path
      name: groupId
      required: true
      schema:
        type: string
    groupMemberIdParam:
      description: The identifier of a person or group.
      in: path
      name: groupMemberId
      required: true
      schema:
        type: string
    siteIdParam:
      description: The identifier of a site.
      in: path
      name: siteId
      required: true
      schema:
        type: string
    inviteeIdParam:
      description: The invitee user name.
      in: path
      name: inviteeId
      required: true
      schema:
        type: string
    tagIdParam:
      description: The identifier of a tag.
      in: path
      name: tagId
      required: true
      schema:
        type: string
    networkIdParam:
      description: The identifier of a network.
      in: path
      name: networkId
      required: true
      schema:
        type: string
    commentIdParam:
      description: The identifier of a comment.
      in: path
      name: commentId
      required: true
      schema:
        type: string
    ratingIdParam:
      description: The identifier of a rating.
      in: path
      name: ratingId
      required: true
      schema:
        type: string
    favoriteIdParam:
      description: The identifier of a favorite.
      in: path
      name: favoriteId
      required: true
      schema:
        type: string
    skipCountParam:
      description: |
        The number of entities that exist in the collection before those included in this list.
        If not supplied then the default value is 0.
      in: query
      name: skipCount
      schema:
        default: 0
        minimum: 0
        type: integer
    omitTotalItemsParam:
      description: |
        A boolean to control if the response provides the total numbers of items in the collection.
        If not supplied then the default value is false.
      in: query
      name: omitTotalItems
      schema:
        default: false
        type: boolean
    maxItemsParam:
      description: |
        The maximum number of items to return in the list.
        If not supplied then the default value is 100.
      in: query
      name: maxItems
      schema:
        default: 100
        minimum: 1
        type: integer
    fieldsParam:
      description: |
        A list of field names.

        You can use this parameter to restrict the fields
        returned within a response if, for example, you want to save on overall bandwidth.

        The list applies to a returned individual
        entity or entries within a collection.

        If the API method also supports the **include**
        parameter, then the fields specified in the **include**
        parameter are returned in addition to those specified in the **fields** parameter.
      explode: false
      in: query
      name: fields
      schema:
        items:
          type: string
        type: array
      style: form
    orderByParam:
      description: |
        A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
        sort the list by one or more fields.

        Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
        above to check if any fields used in this method have a descending default search order.

        To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
      explode: false
      in: query
      name: orderBy
      schema:
        items:
          type: string
        type: array
      style: form
    whereParam:
      description: A string to restrict the returned objects by using a predicate.
      in: query
      name: where
      schema:
        type: string
    includeSourceParam:
      description: Also include **source** (in addition to **entries**) with folder
        information on **nodeId**
      in: query
      name: includeSource
      schema:
        type: boolean
    relationsParam:
      description: Use the relations parameter to include one or more related entities
        in a single response.
      explode: false
      in: query
      name: relations
      schema:
        items:
          type: string
        type: array
      style: form
    attachmentParam:
      description: |
        **true** enables a web browser to download the file as an attachment.
        **false** means a web browser may preview the file in a new tab or window.

        You can only set this parameter to **false** if the content type of the file is in the supported list;
        for example, certain image files and PDF files.

        If the content type is not supported for preview, then a value of **false**  is ignored, and
        the attachment will be returned in the response.
      in: query
      name: attachment
      schema:
        default: true
        type: boolean
    ifModifiedSinceHeader:
      description: |
        Only returns the content if it has been modified since the date provided.
        Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
      in: header
      name: If-Modified-Since
      schema:
        format: date-time
        type: string
    RangeHeader:
      description: |
        The Range header indicates the part of a document that the server should return.
        Single part request supported, for example: bytes=1-10.
      in: header
      name: Range
      schema:
        format: bytes
        type: string
    downloadIdParam:
      description: The identifier of a download node.
      in: path
      name: downloadId
      required: true
      schema:
        type: string
    favoriteEntryIncludeParam:
      description: |
        Returns additional information about favorites, the following optional fields can be requested:
        * path (note, this only applies to files and folders)
        * properties
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    auditApplicationIdParam:
      description: The identifier of an audit application.
      in: path
      name: auditApplicationId
      required: true
      schema:
        type: string
    auditApplicationIncludeParam:
      description: |
        Also include the current minimum and/or maximum audit entry ids for the application. The following optional fields can be requested:
        * max
        * min
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    auditEntryIdParam:
      description: The identifier of an audit entry.
      in: path
      name: auditEntryId
      required: true
      schema:
        type: string
    auditMinimalEntryIncludeParam:
      description: |
        Returns additional information about the audit entry. The following optional fields can be requested:
        * values
      explode: false
      in: query
      name: include
      schema:
        items:
          type: string
        type: array
      style: form
    contentPropNameParam:
      description: |
        The namespace-prefix property name of content.
        Delimiter between namespace-prefix and property name can be either colon (':') or underscore ('_') character (e.g., 'cm:content' or 'cm_content').
      in: path
      name: contentPropName
      required: true
      schema:
        type: string
  schemas:
    Error:
      properties:
        error:
          $ref: '#/components/schemas/Error_error'
      required:
      - error
      type: object
    Capabilities:
      example:
        isMutable: true
        isGuest: true
        isAdmin: true
      properties:
        isAdmin:
          type: boolean
        isGuest:
          type: boolean
        isMutable:
          type: boolean
      type: object
    Pagination:
      example:
        maxItems: 5
        hasMoreItems: true
        totalItems: 6
        count: 0
        skipCount: 1
      properties:
        count:
          description: |
            The number of objects in the entries array.
          format: int64
          type: integer
        hasMoreItems:
          description: |
            A boolean value which is **true** if there are more entities in the collection
            beyond those in this response. A true value means a request with a larger value
            for the **skipCount** or the **maxItems** parameter will return more entities.
          type: boolean
        totalItems:
          description: |
            An integer describing the total number of entities in the collection.
            The API might not be able to determine this value,
            in which case this property will not be present.
          format: int64
          type: integer
        skipCount:
          description: |
            An integer describing how many entities exist in the collection before
            those included in this list. If there was no **skipCount** parameter then the
            default value is 0.
          format: int64
          type: integer
        maxItems:
          description: |
            The value of the **maxItems** parameter used to generate this list.
            If there was no **maxItems** parameter then the default value is 100.
          format: int64
          type: integer
      type: object
    SiteBodyCreate:
      example:
        visibility: PUBLIC
        description: description
        id: id
        title: title
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        visibility:
          default: PUBLIC
          enum:
          - PUBLIC
          - PRIVATE
          - MODERATED
          type: string
      required:
      - title
      - visibility
      type: object
    SitePaging:
      example:
        list:
          entries:
          - entry:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
          - entry:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SitePaging_list'
      required:
      - list
      type: object
    SiteEntry:
      example:
        entry:
          role: SiteConsumer
          visibility: PRIVATE
          guid: guid
          description: description
          id: id
          preset: preset
          title: title
      properties:
        entry:
          $ref: '#/components/schemas/Site'
      required:
      - entry
      type: object
    Site:
      example:
        role: SiteConsumer
        visibility: PRIVATE
        guid: guid
        description: description
        id: id
        preset: preset
        title: title
      properties:
        id:
          type: string
        guid:
          type: string
        title:
          type: string
        description:
          type: string
        visibility:
          enum:
          - PRIVATE
          - MODERATED
          - PUBLIC
          type: string
        preset:
          type: string
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - guid
      - id
      - title
      - visibility
      type: object
    SiteBodyUpdate:
      example:
        visibility: PRIVATE
        description: description
        title: title
      properties:
        title:
          type: string
        description:
          type: string
        visibility:
          enum:
          - PRIVATE
          - MODERATED
          - PUBLIC
          type: string
      type: object
    SiteContainerPaging:
      example:
        list:
          entries:
          - entry:
              id: id
              folderId: folderId
          - entry:
              id: id
              folderId: folderId
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SiteContainerPaging_list'
      required:
      - list
      type: object
    SiteContainerEntry:
      example:
        entry:
          id: id
          folderId: folderId
      properties:
        entry:
          $ref: '#/components/schemas/SiteContainer'
      required:
      - entry
      type: object
    SiteContainer:
      example:
        id: id
        folderId: folderId
      properties:
        id:
          type: string
        folderId:
          type: string
      required:
      - folderId
      - id
      type: object
    SiteMembershipBodyCreate:
      example:
        role: SiteConsumer
        id: id
      properties:
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
        id:
          type: string
      required:
      - id
      - role
      type: object
    SiteMembershipBodyUpdate:
      example:
        role: SiteConsumer
      properties:
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - role
      type: object
    SiteMemberPaging:
      example:
        list:
          entries:
          - entry:
              role: SiteConsumer
              person:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              id: id
              isMemberOfGroup: true
          - entry:
              role: SiteConsumer
              person:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              id: id
              isMemberOfGroup: true
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SiteMemberPaging_list'
      required:
      - list
      type: object
    SiteMemberEntry:
      example:
        entry:
          role: SiteConsumer
          person:
            googleId: googleId
            lastName: lastName
            userStatus: userStatus
            capabilities:
              isMutable: true
              isGuest: true
              isAdmin: true
            displayName: displayName
            jobTitle: jobTitle
            statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
            mobile: mobile
            emailNotificationsEnabled: true
            description: description
            telephone: telephone
            enabled: true
            aspectNames:
            - aspectNames
            - aspectNames
            firstName: firstName
            skypeId: skypeId
            avatarId: avatarId
            instantMessageId: instantMessageId
            location: location
            company:
              address3: address3
              address2: address2
              address1: address1
              organization: organization
              postcode: postcode
              telephone: telephone
              fax: fax
              email: email
            id: id
            email: email
            properties: '{}'
          id: id
          isMemberOfGroup: true
      properties:
        entry:
          $ref: '#/components/schemas/SiteMember'
      required:
      - entry
      type: object
    SiteMember:
      example:
        role: SiteConsumer
        person:
          googleId: googleId
          lastName: lastName
          userStatus: userStatus
          capabilities:
            isMutable: true
            isGuest: true
            isAdmin: true
          displayName: displayName
          jobTitle: jobTitle
          statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
          mobile: mobile
          emailNotificationsEnabled: true
          description: description
          telephone: telephone
          enabled: true
          aspectNames:
          - aspectNames
          - aspectNames
          firstName: firstName
          skypeId: skypeId
          avatarId: avatarId
          instantMessageId: instantMessageId
          location: location
          company:
            address3: address3
            address2: address2
            address1: address1
            organization: organization
            postcode: postcode
            telephone: telephone
            fax: fax
            email: email
          id: id
          email: email
          properties: '{}'
        id: id
        isMemberOfGroup: true
      properties:
        id:
          type: string
        person:
          $ref: '#/components/schemas/Person'
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
        isMemberOfGroup:
          type: boolean
      required:
      - id
      - person
      - role
      type: object
    SiteGroupPaging:
      example:
        list:
          entries:
          - entry:
              role: SiteConsumer
              id: id
              group:
                displayName: displayName
                id: id
                memberType: GROUP
          - entry:
              role: SiteConsumer
              id: id
              group:
                displayName: displayName
                id: id
                memberType: GROUP
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SiteGroupPaging_list'
      required:
      - list
      type: object
    SiteGroupEntry:
      example:
        entry:
          role: SiteConsumer
          id: id
          group:
            displayName: displayName
            id: id
            memberType: GROUP
      properties:
        entry:
          $ref: '#/components/schemas/SiteGroup'
      required:
      - entry
      type: object
    SiteGroup:
      example:
        role: SiteConsumer
        id: id
        group:
          displayName: displayName
          id: id
          memberType: GROUP
      properties:
        id:
          type: string
        group:
          $ref: '#/components/schemas/GroupMember'
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - group
      - id
      - role
      type: object
    SiteRolePaging:
      example:
        list:
          entries:
          - entry:
              site:
                role: SiteConsumer
                visibility: PRIVATE
                guid: guid
                description: description
                id: id
                preset: preset
                title: title
              role: SiteConsumer
              guid: guid
              id: id
          - entry:
              site:
                role: SiteConsumer
                visibility: PRIVATE
                guid: guid
                description: description
                id: id
                preset: preset
                title: title
              role: SiteConsumer
              guid: guid
              id: id
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SiteRolePaging_list'
      required:
      - list
      type: object
    SiteRoleEntry:
      example:
        entry:
          site:
            role: SiteConsumer
            visibility: PRIVATE
            guid: guid
            description: description
            id: id
            preset: preset
            title: title
          role: SiteConsumer
          guid: guid
          id: id
      properties:
        entry:
          $ref: '#/components/schemas/SiteRole'
      required:
      - entry
      type: object
    SiteRole:
      example:
        site:
          role: SiteConsumer
          visibility: PRIVATE
          guid: guid
          description: description
          id: id
          preset: preset
          title: title
        role: SiteConsumer
        guid: guid
        id: id
      properties:
        site:
          $ref: '#/components/schemas/Site'
        id:
          type: string
        guid:
          type: string
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - guid
      - id
      - role
      - site
      type: object
    PersonBodyCreate:
      example:
        googleId: googleId
        lastName: lastName
        userStatus: userStatus
        jobTitle: jobTitle
        mobile: mobile
        emailNotificationsEnabled: true
        description: description
        telephone: telephone
        enabled: true
        aspectNames:
        - aspectNames
        - aspectNames
        firstName: firstName
        skypeId: skypeId
        password: password
        instantMessageId: instantMessageId
        location: location
        company:
          address3: address3
          address2: address2
          address1: address1
          organization: organization
          postcode: postcode
          telephone: telephone
          fax: fax
          email: email
        id: id
        email: email
        properties: '{}'
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        description:
          type: string
        email:
          type: string
        skypeId:
          type: string
        googleId:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        location:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        mobile:
          type: string
        telephone:
          type: string
        userStatus:
          type: string
        enabled:
          default: true
          type: boolean
        emailNotificationsEnabled:
          default: true
          type: boolean
        password:
          type: string
        aspectNames:
          items:
            type: string
          type: array
        properties:
          properties: {}
          type: object
      required:
      - email
      - firstName
      - id
      - password
      type: object
    PersonBodyUpdate:
      example:
        googleId: googleId
        lastName: lastName
        userStatus: userStatus
        oldPassword: oldPassword
        jobTitle: jobTitle
        mobile: mobile
        emailNotificationsEnabled: true
        description: description
        telephone: telephone
        enabled: true
        aspectNames:
        - aspectNames
        - aspectNames
        firstName: firstName
        skypeId: skypeId
        password: password
        instantMessageId: instantMessageId
        location: location
        company:
          address3: address3
          address2: address2
          address1: address1
          organization: organization
          postcode: postcode
          telephone: telephone
          fax: fax
          email: email
        email: email
        properties: '{}'
      properties:
        firstName:
          type: string
        lastName:
          type: string
        description:
          type: string
        email:
          type: string
        skypeId:
          type: string
        googleId:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        location:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        mobile:
          type: string
        telephone:
          type: string
        userStatus:
          type: string
        enabled:
          type: boolean
        emailNotificationsEnabled:
          type: boolean
        password:
          type: string
        oldPassword:
          type: string
        aspectNames:
          items:
            type: string
          type: array
        properties:
          properties: {}
          type: object
      type: object
    PersonPaging:
      example:
        list:
          entries:
          - entry:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
          - entry:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/PersonPaging_list'
      type: object
    PersonEntry:
      example:
        entry:
          googleId: googleId
          lastName: lastName
          userStatus: userStatus
          capabilities:
            isMutable: true
            isGuest: true
            isAdmin: true
          displayName: displayName
          jobTitle: jobTitle
          statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
          mobile: mobile
          emailNotificationsEnabled: true
          description: description
          telephone: telephone
          enabled: true
          aspectNames:
          - aspectNames
          - aspectNames
          firstName: firstName
          skypeId: skypeId
          avatarId: avatarId
          instantMessageId: instantMessageId
          location: location
          company:
            address3: address3
            address2: address2
            address1: address1
            organization: organization
            postcode: postcode
            telephone: telephone
            fax: fax
            email: email
          id: id
          email: email
          properties: '{}'
      properties:
        entry:
          $ref: '#/components/schemas/Person'
      required:
      - entry
      type: object
    Person:
      example:
        googleId: googleId
        lastName: lastName
        userStatus: userStatus
        capabilities:
          isMutable: true
          isGuest: true
          isAdmin: true
        displayName: displayName
        jobTitle: jobTitle
        statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
        mobile: mobile
        emailNotificationsEnabled: true
        description: description
        telephone: telephone
        enabled: true
        aspectNames:
        - aspectNames
        - aspectNames
        firstName: firstName
        skypeId: skypeId
        avatarId: avatarId
        instantMessageId: instantMessageId
        location: location
        company:
          address3: address3
          address2: address2
          address1: address1
          organization: organization
          postcode: postcode
          telephone: telephone
          fax: fax
          email: email
        id: id
        email: email
        properties: '{}'
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        description:
          type: string
        avatarId:
          type: string
        email:
          type: string
        skypeId:
          type: string
        googleId:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        location:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        mobile:
          type: string
        telephone:
          type: string
        statusUpdatedAt:
          format: date-time
          type: string
        userStatus:
          type: string
        enabled:
          default: true
          type: boolean
        emailNotificationsEnabled:
          default: true
          type: boolean
        aspectNames:
          items:
            type: string
          type: array
        properties:
          properties: {}
          type: object
        capabilities:
          $ref: '#/components/schemas/Capabilities'
      required:
      - email
      - enabled
      - firstName
      - id
      type: object
    Company:
      example:
        address3: address3
        address2: address2
        address1: address1
        organization: organization
        postcode: postcode
        telephone: telephone
        fax: fax
        email: email
      properties:
        organization:
          type: string
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        postcode:
          type: string
        telephone:
          type: string
        fax:
          type: string
        email:
          type: string
      type: object
    GroupPaging:
      example:
        list:
          entries:
          - entry:
              isRoot: true
              displayName: displayName
              parentIds:
              - parentIds
              - parentIds
              id: id
              zones:
              - zones
              - zones
          - entry:
              isRoot: true
              displayName: displayName
              parentIds:
              - parentIds
              - parentIds
              id: id
              zones:
              - zones
              - zones
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/GroupPaging_list'
      type: object
    GroupEntry:
      example:
        entry:
          isRoot: true
          displayName: displayName
          parentIds:
          - parentIds
          - parentIds
          id: id
          zones:
          - zones
          - zones
      properties:
        entry:
          $ref: '#/components/schemas/Group'
      required:
      - entry
      type: object
    Group:
      example:
        isRoot: true
        displayName: displayName
        parentIds:
        - parentIds
        - parentIds
        id: id
        zones:
        - zones
        - zones
      properties:
        id:
          type: string
        displayName:
          type: string
        isRoot:
          default: true
          type: boolean
        parentIds:
          items:
            type: string
          type: array
        zones:
          items:
            type: string
          type: array
      required:
      - displayName
      - id
      - isRoot
      type: object
    GroupMemberPaging:
      example:
        list:
          entries:
          - entry:
              displayName: displayName
              id: id
              memberType: GROUP
          - entry:
              displayName: displayName
              id: id
              memberType: GROUP
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/GroupMemberPaging_list'
      type: object
    GroupMemberEntry:
      example:
        entry:
          displayName: displayName
          id: id
          memberType: GROUP
      properties:
        entry:
          $ref: '#/components/schemas/GroupMember'
      required:
      - entry
      type: object
    GroupMember:
      example:
        displayName: displayName
        id: id
        memberType: GROUP
      properties:
        id:
          type: string
        displayName:
          type: string
        memberType:
          enum:
          - GROUP
          - PERSON
          type: string
      required:
      - displayName
      - id
      - memberType
      type: object
    GroupMembershipBodyCreate:
      example:
        id: id
        memberType: GROUP
      properties:
        id:
          type: string
        memberType:
          enum:
          - GROUP
          - PERSON
          type: string
      required:
      - id
      - memberType
      type: object
    GroupBodyCreate:
      example:
        displayName: displayName
        parentIds:
        - parentIds
        - parentIds
        id: id
      properties:
        id:
          type: string
        displayName:
          type: string
        parentIds:
          items:
            type: string
          type: array
      required:
      - displayName
      - id
      type: object
    GroupBodyUpdate:
      example:
        displayName: displayName
      properties:
        displayName:
          type: string
      required:
      - displayName
      type: object
    CommentBody:
      example:
        content: content
      properties:
        content:
          type: string
      required:
      - content
      type: object
    CommentPaging:
      example:
        list:
          entries:
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              createdBy:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              edited: true
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              canEdit: true
              modifiedBy:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              canDelete: true
              id: id
              title: title
              content: content
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              createdBy:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              edited: true
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              canEdit: true
              modifiedBy:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              canDelete: true
              id: id
              title: title
              content: content
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/CommentPaging_list'
      required:
      - list
      type: object
    CommentEntry:
      example:
        entry:
          createdAt: 2000-01-23T04:56:07.000+00:00
          createdBy:
            googleId: googleId
            lastName: lastName
            userStatus: userStatus
            capabilities:
              isMutable: true
              isGuest: true
              isAdmin: true
            displayName: displayName
            jobTitle: jobTitle
            statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
            mobile: mobile
            emailNotificationsEnabled: true
            description: description
            telephone: telephone
            enabled: true
            aspectNames:
            - aspectNames
            - aspectNames
            firstName: firstName
            skypeId: skypeId
            avatarId: avatarId
            instantMessageId: instantMessageId
            location: location
            company:
              address3: address3
              address2: address2
              address1: address1
              organization: organization
              postcode: postcode
              telephone: telephone
              fax: fax
              email: email
            id: id
            email: email
            properties: '{}'
          edited: true
          modifiedAt: 2000-01-23T04:56:07.000+00:00
          canEdit: true
          modifiedBy:
            googleId: googleId
            lastName: lastName
            userStatus: userStatus
            capabilities:
              isMutable: true
              isGuest: true
              isAdmin: true
            displayName: displayName
            jobTitle: jobTitle
            statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
            mobile: mobile
            emailNotificationsEnabled: true
            description: description
            telephone: telephone
            enabled: true
            aspectNames:
            - aspectNames
            - aspectNames
            firstName: firstName
            skypeId: skypeId
            avatarId: avatarId
            instantMessageId: instantMessageId
            location: location
            company:
              address3: address3
              address2: address2
              address1: address1
              organization: organization
              postcode: postcode
              telephone: telephone
              fax: fax
              email: email
            id: id
            email: email
            properties: '{}'
          canDelete: true
          id: id
          title: title
          content: content
      properties:
        entry:
          $ref: '#/components/schemas/Comment'
      required:
      - entry
      type: object
    Comment:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        createdBy:
          googleId: googleId
          lastName: lastName
          userStatus: userStatus
          capabilities:
            isMutable: true
            isGuest: true
            isAdmin: true
          displayName: displayName
          jobTitle: jobTitle
          statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
          mobile: mobile
          emailNotificationsEnabled: true
          description: description
          telephone: telephone
          enabled: true
          aspectNames:
          - aspectNames
          - aspectNames
          firstName: firstName
          skypeId: skypeId
          avatarId: avatarId
          instantMessageId: instantMessageId
          location: location
          company:
            address3: address3
            address2: address2
            address1: address1
            organization: organization
            postcode: postcode
            telephone: telephone
            fax: fax
            email: email
          id: id
          email: email
          properties: '{}'
        edited: true
        modifiedAt: 2000-01-23T04:56:07.000+00:00
        canEdit: true
        modifiedBy:
          googleId: googleId
          lastName: lastName
          userStatus: userStatus
          capabilities:
            isMutable: true
            isGuest: true
            isAdmin: true
          displayName: displayName
          jobTitle: jobTitle
          statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
          mobile: mobile
          emailNotificationsEnabled: true
          description: description
          telephone: telephone
          enabled: true
          aspectNames:
          - aspectNames
          - aspectNames
          firstName: firstName
          skypeId: skypeId
          avatarId: avatarId
          instantMessageId: instantMessageId
          location: location
          company:
            address3: address3
            address2: address2
            address1: address1
            organization: organization
            postcode: postcode
            telephone: telephone
            fax: fax
            email: email
          id: id
          email: email
          properties: '{}'
        canDelete: true
        id: id
        title: title
        content: content
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        createdBy:
          $ref: '#/components/schemas/Person'
        createdAt:
          format: date-time
          type: string
        edited:
          type: boolean
        modifiedBy:
          $ref: '#/components/schemas/Person'
        modifiedAt:
          format: date-time
          type: string
        canEdit:
          type: boolean
        canDelete:
          type: boolean
      required:
      - canDelete
      - canEdit
      - content
      - createdAt
      - createdBy
      - edited
      - id
      - modifiedAt
      - modifiedBy
      - title
      type: object
    TagBody:
      example:
        tag: tag
      properties:
        tag:
          type: string
      required:
      - tag
      type: object
    TagPaging:
      example:
        list:
          entries:
          - entry:
              count: 0.8008281904610115
              id: id
              tag: tag
          - entry:
              count: 0.8008281904610115
              id: id
              tag: tag
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/TagPaging_list'
      required:
      - list
      type: object
    TagEntry:
      example:
        entry:
          count: 0.8008281904610115
          id: id
          tag: tag
      properties:
        entry:
          $ref: '#/components/schemas/Tag'
      required:
      - entry
      type: object
    Tag:
      example:
        count: 0.8008281904610115
        id: id
        tag: tag
      properties:
        id:
          type: string
        tag:
          type: string
        count:
          type: number
      required:
      - id
      - tag
      type: object
    PersonNetworkPaging:
      example:
        list:
          entries:
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              paidNetwork: true
              subscriptionLevel: Free
              quotas:
              - usage: 6
                limit: 0
                id: id
              - usage: 6
                limit: 0
                id: id
              isEnabled: true
              id: id
              homeNetwork: true
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              paidNetwork: true
              subscriptionLevel: Free
              quotas:
              - usage: 6
                limit: 0
                id: id
              - usage: 6
                limit: 0
                id: id
              isEnabled: true
              id: id
              homeNetwork: true
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/PersonNetworkPaging_list'
      required:
      - list
      type: object
    PersonNetworkEntry:
      example:
        entry:
          createdAt: 2000-01-23T04:56:07.000+00:00
          paidNetwork: true
          subscriptionLevel: Free
          quotas:
          - usage: 6
            limit: 0
            id: id
          - usage: 6
            limit: 0
            id: id
          isEnabled: true
          id: id
          homeNetwork: true
      properties:
        entry:
          $ref: '#/components/schemas/PersonNetwork'
      required:
      - entry
      type: object
    PersonNetwork:
      description: |
        A network is the group of users and sites that belong to an organization.
        Networks are organized by email domain. When a user signs up for an
        Alfresco account , their email domain becomes their Home Network.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        paidNetwork: true
        subscriptionLevel: Free
        quotas:
        - usage: 6
          limit: 0
          id: id
        - usage: 6
          limit: 0
          id: id
        isEnabled: true
        id: id
        homeNetwork: true
      properties:
        id:
          description: This network's unique id
          type: string
        homeNetwork:
          description: Is this the home network?
          type: boolean
        isEnabled:
          type: boolean
        createdAt:
          format: date-time
          type: string
        paidNetwork:
          type: boolean
        subscriptionLevel:
          enum:
          - Free
          - Standard
          - Enterprise
          type: string
        quotas:
          items:
            $ref: '#/components/schemas/NetworkQuota'
          type: array
      required:
      - id
      - isEnabled
      type: object
    NetworkQuota:
      description: |
        Limits and usage of each quota. A network will have quotas for File space,
        the number of sites in the network, the number of people in the network,
        and the number of network administrators
      example:
        usage: 6
        limit: 0
        id: id
      properties:
        id:
          type: string
        limit:
          format: int64
          type: integer
        usage:
          format: int64
          type: integer
      required:
      - id
      - limit
      - usage
      type: object
    RatingBody:
      example:
        myRating: myRating
        id: likes
      properties:
        id:
          default: likes
          description: The rating scheme type. Possible values are likes and fiveStar.
          enum:
          - likes
          - fiveStar
          type: string
        myRating:
          description: The rating. The type is specific to the rating scheme, boolean
            for the likes and an integer for the fiveStar
          type: string
      required:
      - id
      - myRating
      type: object
    RatingPaging:
      example:
        list:
          entries:
          - entry:
              myRating: myRating
              ratedAt: 2000-01-23T04:56:07.000+00:00
              id: id
              aggregate:
                average: 6
                numberOfRatings: 0
          - entry:
              myRating: myRating
              ratedAt: 2000-01-23T04:56:07.000+00:00
              id: id
              aggregate:
                average: 6
                numberOfRatings: 0
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/RatingPaging_list'
      required:
      - list
      type: object
    RatingEntry:
      example:
        entry:
          myRating: myRating
          ratedAt: 2000-01-23T04:56:07.000+00:00
          id: id
          aggregate:
            average: 6
            numberOfRatings: 0
      properties:
        entry:
          $ref: '#/components/schemas/Rating'
      required:
      - entry
      type: object
    Rating:
      description: |
        A person can rate an item of content by liking it. They can also remove
        their like of an item of content. API methods exist to get a list of
        ratings and to add a new rating.
      example:
        myRating: myRating
        ratedAt: 2000-01-23T04:56:07.000+00:00
        id: id
        aggregate:
          average: 6
          numberOfRatings: 0
      properties:
        id:
          type: string
        aggregate:
          $ref: '#/components/schemas/Rating_aggregate'
        ratedAt:
          format: date-time
          type: string
        myRating:
          description: The rating. The type is specific to the rating scheme, boolean
            for the likes and an integer for the fiveStar.
          type: string
      required:
      - aggregate
      - id
      type: object
    FavoriteBodyCreate:
      example:
        target: '{}'
      properties:
        target:
          properties: {}
          type: object
      required:
      - target
      type: object
    FavoritePaging:
      example:
        list:
          entries:
          - entry:
              targetGuid: targetGuid
              createdAt: 2000-01-23T04:56:07.000+00:00
              properties: '{}'
              target: '{}'
          - entry:
              targetGuid: targetGuid
              createdAt: 2000-01-23T04:56:07.000+00:00
              properties: '{}'
              target: '{}'
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/FavoritePaging_list'
      required:
      - list
      type: object
    FavoriteEntry:
      example:
        entry:
          targetGuid: targetGuid
          createdAt: 2000-01-23T04:56:07.000+00:00
          properties: '{}'
          target: '{}'
      properties:
        entry:
          $ref: '#/components/schemas/Favorite'
      required:
      - entry
      type: object
    Favorite:
      description: |
        A favorite describes an Alfresco entity that a person has marked as a favorite.
        The target can be a site, file or folder.
      example:
        targetGuid: targetGuid
        createdAt: 2000-01-23T04:56:07.000+00:00
        properties: '{}'
        target: '{}'
      properties:
        targetGuid:
          description: The guid of the object that is a favorite.
          type: string
        createdAt:
          description: The time the object was made a favorite.
          format: date-time
          type: string
        target:
          properties: {}
          type: object
        properties:
          description: A subset of the target favorite properties, system properties
            and properties already available in the target are excluded.
          properties: {}
          type: object
      required:
      - target
      - targetGuid
      type: object
    FavoriteSiteBodyCreate:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    FavoriteSiteEntry:
      example:
        entry:
          id: id
      properties:
        entry:
          $ref: '#/components/schemas/FavoriteSite'
      required:
      - entry
      type: object
    FavoriteSite:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    ActivityPaging:
      example:
        list:
          entries:
          - entry:
              postedAt: 2000-01-23T04:56:07.000+00:00
              feedPersonId: feedPersonId
              postPersonId: postPersonId
              siteId: siteId
              activitySummary:
                key: activitySummary
              id: 0
              activityType: activityType
          - entry:
              postedAt: 2000-01-23T04:56:07.000+00:00
              feedPersonId: feedPersonId
              postPersonId: postPersonId
              siteId: siteId
              activitySummary:
                key: activitySummary
              id: 0
              activityType: activityType
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/ActivityPaging_list'
      required:
      - list
      type: object
    ActivityEntry:
      example:
        entry:
          postedAt: 2000-01-23T04:56:07.000+00:00
          feedPersonId: feedPersonId
          postPersonId: postPersonId
          siteId: siteId
          activitySummary:
            key: activitySummary
          id: 0
          activityType: activityType
      properties:
        entry:
          $ref: '#/components/schemas/Activity'
      required:
      - entry
      type: object
    Activity:
      description: |
        Activities describe any past activity in a site,
        for example creating an item of content, commenting on a node,
        liking an item of content.
      example:
        postedAt: 2000-01-23T04:56:07.000+00:00
        feedPersonId: feedPersonId
        postPersonId: postPersonId
        siteId: siteId
        activitySummary:
          key: activitySummary
        id: 0
        activityType: activityType
      properties:
        postPersonId:
          description: The id of the person who performed the activity
          type: string
        id:
          description: The unique id of the activity
          format: int64
          type: integer
        siteId:
          description: The unique id of the site on which the activity was performed
          type: string
        postedAt:
          description: The date time at which the activity was performed
          format: date-time
          type: string
        feedPersonId:
          description: The feed on which this activity was posted
          type: string
        activitySummary:
          additionalProperties:
            type: string
          description: An object summarizing the activity
          type: object
        activityType:
          description: The type of the activity posted
          type: string
      required:
      - activityType
      - feedPersonId
      - id
      - postPersonId
      type: object
    PreferencePaging:
      example:
        list:
          entries:
          - entry:
              id: id
              value: value
          - entry:
              id: id
              value: value
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/PreferencePaging_list'
      required:
      - list
      type: object
    PreferenceEntry:
      example:
        entry:
          id: id
          value: value
      properties:
        entry:
          $ref: '#/components/schemas/Preference'
      required:
      - entry
      type: object
    Preference:
      description: |
        A specific preference.
      example:
        id: id
        value: value
      properties:
        id:
          description: The unique id of the preference
          type: string
        value:
          description: The value of the preference. Note that this can be of any JSON
            type.
          type: string
      required:
      - id
      type: object
    SiteMembershipRequestBodyCreate:
      example:
        client: client
        id: id
        message: message
        title: title
      properties:
        message:
          type: string
        id:
          type: string
        title:
          type: string
        client:
          description: |
            Optional client name used when sending an email to the end user, defaults to "share" if not provided.
            **Note:** The client must be registered before this API can send an email.
            **Note:** This is available in Alfresco 7.0.0 and newer versions.
          type: string
      required:
      - id
      type: object
    SiteMembershipRequestBodyUpdate:
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    SiteMembershipRequestPaging:
      example:
        list:
          entries:
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              site:
                role: SiteConsumer
                visibility: PRIVATE
                guid: guid
                description: description
                id: id
                preset: preset
                title: title
              id: id
              message: message
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              site:
                role: SiteConsumer
                visibility: PRIVATE
                guid: guid
                description: description
                id: id
                preset: preset
                title: title
              id: id
              message: message
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SiteMembershipRequestPaging_list'
      required:
      - list
      type: object
    SiteMembershipRequestEntry:
      example:
        entry:
          createdAt: 2000-01-23T04:56:07.000+00:00
          site:
            role: SiteConsumer
            visibility: PRIVATE
            guid: guid
            description: description
            id: id
            preset: preset
            title: title
          id: id
          message: message
      properties:
        entry:
          $ref: '#/components/schemas/SiteMembershipRequest'
      required:
      - entry
      type: object
    SiteMembershipRequest:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        site:
          role: SiteConsumer
          visibility: PRIVATE
          guid: guid
          description: description
          id: id
          preset: preset
          title: title
        id: id
        message: message
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        site:
          $ref: '#/components/schemas/Site'
        message:
          type: string
      required:
      - createdAt
      - id
      - site
      type: object
    SiteMembershipRequestWithPersonPaging:
      example:
        list:
          entries:
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              site:
                role: SiteConsumer
                visibility: PRIVATE
                guid: guid
                description: description
                id: id
                preset: preset
                title: title
              person:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              id: id
              message: message
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              site:
                role: SiteConsumer
                visibility: PRIVATE
                guid: guid
                description: description
                id: id
                preset: preset
                title: title
              person:
                googleId: googleId
                lastName: lastName
                userStatus: userStatus
                capabilities:
                  isMutable: true
                  isGuest: true
                  isAdmin: true
                displayName: displayName
                jobTitle: jobTitle
                statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
                mobile: mobile
                emailNotificationsEnabled: true
                description: description
                telephone: telephone
                enabled: true
                aspectNames:
                - aspectNames
                - aspectNames
                firstName: firstName
                skypeId: skypeId
                avatarId: avatarId
                instantMessageId: instantMessageId
                location: location
                company:
                  address3: address3
                  address2: address2
                  address1: address1
                  organization: organization
                  postcode: postcode
                  telephone: telephone
                  fax: fax
                  email: email
                id: id
                email: email
                properties: '{}'
              id: id
              message: message
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SiteMembershipRequestWithPersonPaging_list'
      required:
      - list
      type: object
    SiteMembershipRequestWithPersonEntry:
      example:
        entry:
          createdAt: 2000-01-23T04:56:07.000+00:00
          site:
            role: SiteConsumer
            visibility: PRIVATE
            guid: guid
            description: description
            id: id
            preset: preset
            title: title
          person:
            googleId: googleId
            lastName: lastName
            userStatus: userStatus
            capabilities:
              isMutable: true
              isGuest: true
              isAdmin: true
            displayName: displayName
            jobTitle: jobTitle
            statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
            mobile: mobile
            emailNotificationsEnabled: true
            description: description
            telephone: telephone
            enabled: true
            aspectNames:
            - aspectNames
            - aspectNames
            firstName: firstName
            skypeId: skypeId
            avatarId: avatarId
            instantMessageId: instantMessageId
            location: location
            company:
              address3: address3
              address2: address2
              address1: address1
              organization: organization
              postcode: postcode
              telephone: telephone
              fax: fax
              email: email
            id: id
            email: email
            properties: '{}'
          id: id
          message: message
      properties:
        entry:
          $ref: '#/components/schemas/SiteMembershipRequestWithPerson'
      required:
      - entry
      type: object
    SiteMembershipRequestWithPerson:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        site:
          role: SiteConsumer
          visibility: PRIVATE
          guid: guid
          description: description
          id: id
          preset: preset
          title: title
        person:
          googleId: googleId
          lastName: lastName
          userStatus: userStatus
          capabilities:
            isMutable: true
            isGuest: true
            isAdmin: true
          displayName: displayName
          jobTitle: jobTitle
          statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
          mobile: mobile
          emailNotificationsEnabled: true
          description: description
          telephone: telephone
          enabled: true
          aspectNames:
          - aspectNames
          - aspectNames
          firstName: firstName
          skypeId: skypeId
          avatarId: avatarId
          instantMessageId: instantMessageId
          location: location
          company:
            address3: address3
            address2: address2
            address1: address1
            organization: organization
            postcode: postcode
            telephone: telephone
            fax: fax
            email: email
          id: id
          email: email
          properties: '{}'
        id: id
        message: message
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        site:
          $ref: '#/components/schemas/Site'
        person:
          $ref: '#/components/schemas/Person'
        message:
          type: string
      required:
      - createdAt
      - id
      - person
      - site
      type: object
    SiteMembershipApprovalBody:
      example:
        role: role
      properties:
        role:
          type: string
      type: object
    SiteMembershipRejectionBody:
      example:
        comment: comment
      properties:
        comment:
          type: string
      type: object
    UserInfo:
      example:
        displayName: displayName
        id: id
      properties:
        displayName:
          type: string
        id:
          type: string
      required:
      - displayName
      - id
      type: object
    ContentInfo:
      example:
        sizeInBytes: 0
        mimeTypeName: mimeTypeName
        mimeType: mimeType
        encoding: encoding
      properties:
        mimeType:
          type: string
        mimeTypeName:
          type: string
        sizeInBytes:
          format: int64
          type: integer
        encoding:
          type: string
      required:
      - mimeType
      type: object
    AssociationInfo:
      properties:
        assocType:
          type: string
      required:
      - assocType
      type: object
    AssociationBody:
      example:
        targetId: targetId
        assocType: assocType
      properties:
        targetId:
          type: string
        assocType:
          type: string
      required:
      - assocType
      - targetId
      type: object
    ChildAssociationInfo:
      properties:
        assocType:
          type: string
        isPrimary:
          type: boolean
      required:
      - assocType
      - isPrimary
      type: object
    ChildAssociationBody:
      example:
        assocType: assocType
        childId: childId
      properties:
        childId:
          type: string
        assocType:
          type: string
      required:
      - assocType
      - childId
      type: object
    PathElement:
      example:
        aspectNames:
        - aspectNames
        - aspectNames
        name: name
        id: id
        nodeType: nodeType
      properties:
        id:
          type: string
        name:
          type: string
        nodeType:
          type: string
        aspectNames:
          items:
            type: string
          type: array
      type: object
    PathInfo:
      example:
        elements:
        - aspectNames:
          - aspectNames
          - aspectNames
          name: name
          id: id
          nodeType: nodeType
        - aspectNames:
          - aspectNames
          - aspectNames
          name: name
          id: id
          nodeType: nodeType
        name: name
        isComplete: true
      properties:
        elements:
          items:
            $ref: '#/components/schemas/PathElement'
          type: array
        name:
          type: string
        isComplete:
          type: boolean
      type: object
    PermissionElement:
      example:
        authorityId: authorityId
        name: name
        accessStatus: ALLOWED
      properties:
        authorityId:
          type: string
        name:
          type: string
        accessStatus:
          default: ALLOWED
          enum:
          - ALLOWED
          - DENIED
          type: string
      type: object
    PermissionsInfo:
      example:
        isInheritanceEnabled: true
        settable:
        - settable
        - settable
        locallySet:
        - authorityId: authorityId
          name: name
          accessStatus: ALLOWED
        - authorityId: authorityId
          name: name
          accessStatus: ALLOWED
        inherited:
        - authorityId: authorityId
          name: name
          accessStatus: ALLOWED
        - authorityId: authorityId
          name: name
          accessStatus: ALLOWED
      properties:
        isInheritanceEnabled:
          type: boolean
        inherited:
          items:
            $ref: '#/components/schemas/PermissionElement'
          type: array
        locallySet:
          items:
            $ref: '#/components/schemas/PermissionElement'
          type: array
        settable:
          items:
            type: string
          type: array
      type: object
    PermissionsBody:
      example:
        isInheritanceEnabled: true
        locallySet:
        - authorityId: authorityId
          name: name
          accessStatus: ALLOWED
        - authorityId: authorityId
          name: name
          accessStatus: ALLOWED
      properties:
        isInheritanceEnabled:
          type: boolean
        locallySet:
          items:
            $ref: '#/components/schemas/PermissionElement'
          type: array
      type: object
    NodeBodyCreate:
      example:
        aspectNames:
        - aspectNames
        - aspectNames
        permissions:
          isInheritanceEnabled: true
          locallySet:
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
        relativePath: relativePath
        name: name
        association:
          assocType: assocType
        secondaryChildren:
        - assocType: assocType
          childId: childId
        - assocType: assocType
          childId: childId
        definition:
          properties:
          - isProtected: true
            defaultValue: defaultValue
            dataType: dataType
            isMultiValued: true
            description: description
            isMandatoryEnforced: true
            id: id
            title: title
            constraints:
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            isMandatory: true
          - isProtected: true
            defaultValue: defaultValue
            dataType: dataType
            isMultiValued: true
            description: description
            isMandatoryEnforced: true
            id: id
            title: title
            constraints:
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            isMandatory: true
        nodeType: nodeType
        targets:
        - targetId: targetId
          assocType: assocType
        - targetId: targetId
          assocType: assocType
        properties: '{}'
      properties:
        name:
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        aspectNames:
          items:
            type: string
          type: array
        properties:
          properties: {}
          type: object
        permissions:
          $ref: '#/components/schemas/PermissionsBody'
        definition:
          $ref: '#/components/schemas/Definition'
        relativePath:
          type: string
        association:
          $ref: '#/components/schemas/NodeBodyCreate_association'
        secondaryChildren:
          items:
            $ref: '#/components/schemas/ChildAssociationBody'
          type: array
        targets:
          items:
            $ref: '#/components/schemas/AssociationBody'
          type: array
      required:
      - name
      - nodeType
      type: object
    NodeBodyUpdate:
      example:
        aspectNames:
        - aspectNames
        - aspectNames
        permissions:
          isInheritanceEnabled: true
          locallySet:
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
        name: name
        nodeType: nodeType
        properties:
          key: properties
      properties:
        name:
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        aspectNames:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          type: object
        permissions:
          $ref: '#/components/schemas/PermissionsBody'
      type: object
    NodeBodyCopy:
      example:
        targetParentId: targetParentId
        name: name
      properties:
        targetParentId:
          type: string
        name:
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
      required:
      - targetParentId
      type: object
    NodeBodyMove:
      example:
        targetParentId: targetParentId
        name: name
      properties:
        targetParentId:
          type: string
        name:
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
      required:
      - targetParentId
      type: object
    NodeBodyLock:
      example:
        timeToExpire: 0
        lifetime: PERSISTENT
        type: ALLOW_OWNER_CHANGES
      properties:
        timeToExpire:
          minimum: 0
          type: integer
        type:
          default: ALLOW_OWNER_CHANGES
          enum:
          - ALLOW_OWNER_CHANGES
          - FULL
          type: string
        lifetime:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - EPHEMERAL
          type: string
      type: object
    NodePaging:
      example:
        list:
          entries:
          - entry:
              isLink: true
              isFile: true
              isDirectLinkEnabled: true
              createdByUser:
                displayName: displayName
                id: id
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              nodeType: nodeType
              parentId: parentId
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              aspectNames:
              - aspectNames
              - aspectNames
              createdAt: 2000-01-23T04:56:07.000+00:00
              path:
                elements:
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                name: name
                isComplete: true
              isFolder: true
              permissions:
                isInheritanceEnabled: true
                settable:
                - settable
                - settable
                locallySet:
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
                inherited:
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
              isLocked: false
              modifiedByUser:
                displayName: displayName
                id: id
              name: name
              definition:
                properties:
                - isProtected: true
                  defaultValue: defaultValue
                  dataType: dataType
                  isMultiValued: true
                  description: description
                  isMandatoryEnforced: true
                  id: id
                  title: title
                  constraints:
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  isMandatory: true
                - isProtected: true
                  defaultValue: defaultValue
                  dataType: dataType
                  isMultiValued: true
                  description: description
                  isMandatoryEnforced: true
                  id: id
                  title: title
                  constraints:
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  isMandatory: true
              id: id
              properties: '{}'
              allowableOperations:
              - allowableOperations
              - allowableOperations
              isFavorite: true
          - entry:
              isLink: true
              isFile: true
              isDirectLinkEnabled: true
              createdByUser:
                displayName: displayName
                id: id
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              nodeType: nodeType
              parentId: parentId
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              aspectNames:
              - aspectNames
              - aspectNames
              createdAt: 2000-01-23T04:56:07.000+00:00
              path:
                elements:
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                name: name
                isComplete: true
              isFolder: true
              permissions:
                isInheritanceEnabled: true
                settable:
                - settable
                - settable
                locallySet:
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
                inherited:
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
                - authorityId: authorityId
                  name: name
                  accessStatus: ALLOWED
              isLocked: false
              modifiedByUser:
                displayName: displayName
                id: id
              name: name
              definition:
                properties:
                - isProtected: true
                  defaultValue: defaultValue
                  dataType: dataType
                  isMultiValued: true
                  description: description
                  isMandatoryEnforced: true
                  id: id
                  title: title
                  constraints:
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  isMandatory: true
                - isProtected: true
                  defaultValue: defaultValue
                  dataType: dataType
                  isMultiValued: true
                  description: description
                  isMandatoryEnforced: true
                  id: id
                  title: title
                  constraints:
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  - description: description
                    id: id
                    type: type
                    title: title
                    parameters:
                      key: '{}'
                  isMandatory: true
              id: id
              properties: '{}'
              allowableOperations:
              - allowableOperations
              - allowableOperations
              isFavorite: true
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
          source:
            isLink: true
            isFile: true
            isDirectLinkEnabled: true
            createdByUser:
              displayName: displayName
              id: id
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            nodeType: nodeType
            parentId: parentId
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            aspectNames:
            - aspectNames
            - aspectNames
            createdAt: 2000-01-23T04:56:07.000+00:00
            path:
              elements:
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              name: name
              isComplete: true
            isFolder: true
            permissions:
              isInheritanceEnabled: true
              settable:
              - settable
              - settable
              locallySet:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              inherited:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
            isLocked: false
            modifiedByUser:
              displayName: displayName
              id: id
            name: name
            definition:
              properties:
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
            id: id
            properties: '{}'
            allowableOperations:
            - allowableOperations
            - allowableOperations
            isFavorite: true
      properties:
        list:
          $ref: '#/components/schemas/NodePaging_list'
      type: object
    NodeAssociationPaging:
      example:
        list:
          entries:
          - {}
          - {}
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
          source:
            isLink: true
            isFile: true
            isDirectLinkEnabled: true
            createdByUser:
              displayName: displayName
              id: id
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            nodeType: nodeType
            parentId: parentId
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            aspectNames:
            - aspectNames
            - aspectNames
            createdAt: 2000-01-23T04:56:07.000+00:00
            path:
              elements:
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              name: name
              isComplete: true
            isFolder: true
            permissions:
              isInheritanceEnabled: true
              settable:
              - settable
              - settable
              locallySet:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              inherited:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
            isLocked: false
            modifiedByUser:
              displayName: displayName
              id: id
            name: name
            definition:
              properties:
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
            id: id
            properties: '{}'
            allowableOperations:
            - allowableOperations
            - allowableOperations
            isFavorite: true
      properties:
        list:
          $ref: '#/components/schemas/NodeAssociationPaging_list'
      type: object
    NodeChildAssociationPaging:
      example:
        list:
          entries:
          - {}
          - {}
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
          source:
            isLink: true
            isFile: true
            isDirectLinkEnabled: true
            createdByUser:
              displayName: displayName
              id: id
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            nodeType: nodeType
            parentId: parentId
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            aspectNames:
            - aspectNames
            - aspectNames
            createdAt: 2000-01-23T04:56:07.000+00:00
            path:
              elements:
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              name: name
              isComplete: true
            isFolder: true
            permissions:
              isInheritanceEnabled: true
              settable:
              - settable
              - settable
              locallySet:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              inherited:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
            isLocked: false
            modifiedByUser:
              displayName: displayName
              id: id
            name: name
            definition:
              properties:
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
            id: id
            properties: '{}'
            allowableOperations:
            - allowableOperations
            - allowableOperations
            isFavorite: true
      properties:
        list:
          $ref: '#/components/schemas/NodeChildAssociationPaging_list'
      type: object
    NodeAssociationEntry:
      example: {}
      properties:
        entry:
          $ref: '#/components/schemas/NodeAssociation'
      required:
      - entry
      type: object
    NodeAssociation:
      allOf:
      - $ref: '#/components/schemas/Node'
      - $ref: '#/components/schemas/NodeAssociation_allOf'
    NodeChildAssociationEntry:
      example: {}
      properties:
        entry:
          $ref: '#/components/schemas/NodeChildAssociation'
      required:
      - entry
      type: object
    NodeChildAssociation:
      allOf:
      - $ref: '#/components/schemas/Node'
      - $ref: '#/components/schemas/NodeChildAssociation_allOf'
    AssociationEntry:
      example:
        entry:
          targetId: targetId
          assocType: assocType
      properties:
        entry:
          $ref: '#/components/schemas/Association'
      required:
      - entry
      type: object
    Association:
      example:
        targetId: targetId
        assocType: assocType
      properties:
        targetId:
          type: string
        assocType:
          type: string
      required:
      - assocType
      - targetId
      type: object
    ChildAssociationEntry:
      example:
        entry:
          assocType: assocType
          childId: childId
      properties:
        entry:
          $ref: '#/components/schemas/ChildAssociation'
      required:
      - entry
      type: object
    ChildAssociation:
      example:
        assocType: assocType
        childId: childId
      properties:
        childId:
          type: string
        assocType:
          type: string
      required:
      - assocType
      - childId
      type: object
    NodeEntry:
      example:
        entry:
          isLink: true
          isFile: true
          isDirectLinkEnabled: true
          createdByUser:
            displayName: displayName
            id: id
          modifiedAt: 2000-01-23T04:56:07.000+00:00
          nodeType: nodeType
          parentId: parentId
          content:
            sizeInBytes: 0
            mimeTypeName: mimeTypeName
            mimeType: mimeType
            encoding: encoding
          aspectNames:
          - aspectNames
          - aspectNames
          createdAt: 2000-01-23T04:56:07.000+00:00
          path:
            elements:
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            name: name
            isComplete: true
          isFolder: true
          permissions:
            isInheritanceEnabled: true
            settable:
            - settable
            - settable
            locallySet:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            inherited:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
          isLocked: false
          modifiedByUser:
            displayName: displayName
            id: id
          name: name
          definition:
            properties:
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
          id: id
          properties: '{}'
          allowableOperations:
          - allowableOperations
          - allowableOperations
          isFavorite: true
      properties:
        entry:
          $ref: '#/components/schemas/Node'
      required:
      - entry
      type: object
    Node:
      example:
        isLink: true
        isFile: true
        isDirectLinkEnabled: true
        createdByUser:
          displayName: displayName
          id: id
        modifiedAt: 2000-01-23T04:56:07.000+00:00
        nodeType: nodeType
        parentId: parentId
        content:
          sizeInBytes: 0
          mimeTypeName: mimeTypeName
          mimeType: mimeType
          encoding: encoding
        aspectNames:
        - aspectNames
        - aspectNames
        createdAt: 2000-01-23T04:56:07.000+00:00
        path:
          elements:
          - aspectNames:
            - aspectNames
            - aspectNames
            name: name
            id: id
            nodeType: nodeType
          - aspectNames:
            - aspectNames
            - aspectNames
            name: name
            id: id
            nodeType: nodeType
          name: name
          isComplete: true
        isFolder: true
        permissions:
          isInheritanceEnabled: true
          settable:
          - settable
          - settable
          locallySet:
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
          inherited:
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
          - authorityId: authorityId
            name: name
            accessStatus: ALLOWED
        isLocked: false
        modifiedByUser:
          displayName: displayName
          id: id
        name: name
        definition:
          properties:
          - isProtected: true
            defaultValue: defaultValue
            dataType: dataType
            isMultiValued: true
            description: description
            isMandatoryEnforced: true
            id: id
            title: title
            constraints:
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            isMandatory: true
          - isProtected: true
            defaultValue: defaultValue
            dataType: dataType
            isMultiValued: true
            description: description
            isMandatoryEnforced: true
            id: id
            title: title
            constraints:
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            - description: description
              id: id
              type: type
              title: title
              parameters:
                key: '{}'
            isMandatory: true
        id: id
        properties: '{}'
        allowableOperations:
        - allowableOperations
        - allowableOperations
        isFavorite: true
      properties:
        id:
          type: string
        name:
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        isFolder:
          type: boolean
        isFile:
          type: boolean
        isLocked:
          default: false
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: '#/components/schemas/UserInfo'
        parentId:
          type: string
        isLink:
          type: boolean
        isFavorite:
          type: boolean
        isDirectLinkEnabled:
          type: boolean
        content:
          $ref: '#/components/schemas/ContentInfo'
        aspectNames:
          items:
            type: string
          type: array
        properties:
          properties: {}
          type: object
        allowableOperations:
          items:
            type: string
          type: array
        path:
          $ref: '#/components/schemas/PathInfo'
        permissions:
          $ref: '#/components/schemas/PermissionsInfo'
        definition:
          $ref: '#/components/schemas/Definition'
      required:
      - createdAt
      - createdByUser
      - id
      - isFile
      - isFolder
      - modifiedAt
      - modifiedByUser
      - name
      - nodeType
      type: object
    ProbeEntry:
      example:
        entry:
          message: message
      properties:
        entry:
          $ref: '#/components/schemas/ProbeEntry_entry'
      required:
      - entry
      type: object
    DirectAccessUrlBodyCreate:
      example:
        attachment: true
      properties:
        attachment:
          description: URL type (embedded/attachment).
          type: boolean
      type: object
    DirectAccessUrlEntry:
      example:
        entry:
          contentUrl: contentUrl
          attachment: true
          expiresAt: 2000-01-23T04:56:07.000+00:00
      properties:
        entry:
          $ref: '#/components/schemas/DirectAccessUrl'
      required:
      - entry
      type: object
    DirectAccessUrl:
      example:
        contentUrl: contentUrl
        attachment: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
      properties:
        contentUrl:
          description: The direct access URL of a binary content
          type: string
        attachment:
          description: Flag to control the download method, **true** for attachment
            URL, **false** for embedded URL
          type: boolean
        expiresAt:
          description: The direct access URL would become invalid when the expiry
            date is reached
          format: date-time
          type: string
      required:
      - contentUrl
      type: object
    SharedLinkBodyCreate:
      example:
        nodeId: nodeId
        expiresAt: 2000-01-23T04:56:07.000+00:00
      properties:
        nodeId:
          type: string
        expiresAt:
          format: date-time
          type: string
      required:
      - nodeId
      type: object
    SharedLinkBodyEmail:
      example:
        client: client
        recipientEmails:
        - recipientEmails
        - recipientEmails
        message: message
        locale: locale
      properties:
        client:
          type: string
        message:
          type: string
        locale:
          type: string
        recipientEmails:
          items:
            type: string
          type: array
      type: object
    SharedLinkPaging:
      example:
        list:
          entries:
          - entry:
              allowableOperationsOnTarget:
              - allowableOperationsOnTarget
              - allowableOperationsOnTarget
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              description: description
              title: title
              expiresAt: 2000-01-23T04:56:07.000+00:00
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              aspectNames:
              - aspectNames
              - aspectNames
              path:
                elements:
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                name: name
                isComplete: true
              modifiedByUser:
                displayName: displayName
                id: id
              name: name
              id: id
              nodeId: nodeId
              sharedByUser:
                displayName: displayName
                id: id
              allowableOperations:
              - allowableOperations
              - allowableOperations
              properties: '{}'
              isFavorite: true
          - entry:
              allowableOperationsOnTarget:
              - allowableOperationsOnTarget
              - allowableOperationsOnTarget
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              description: description
              title: title
              expiresAt: 2000-01-23T04:56:07.000+00:00
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              aspectNames:
              - aspectNames
              - aspectNames
              path:
                elements:
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                - aspectNames:
                  - aspectNames
                  - aspectNames
                  name: name
                  id: id
                  nodeType: nodeType
                name: name
                isComplete: true
              modifiedByUser:
                displayName: displayName
                id: id
              name: name
              id: id
              nodeId: nodeId
              sharedByUser:
                displayName: displayName
                id: id
              allowableOperations:
              - allowableOperations
              - allowableOperations
              properties: '{}'
              isFavorite: true
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/SharedLinkPaging_list'
      required:
      - list
      type: object
    SharedLinkEntry:
      example:
        entry:
          allowableOperationsOnTarget:
          - allowableOperationsOnTarget
          - allowableOperationsOnTarget
          modifiedAt: 2000-01-23T04:56:07.000+00:00
          description: description
          title: title
          expiresAt: 2000-01-23T04:56:07.000+00:00
          content:
            sizeInBytes: 0
            mimeTypeName: mimeTypeName
            mimeType: mimeType
            encoding: encoding
          aspectNames:
          - aspectNames
          - aspectNames
          path:
            elements:
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            name: name
            isComplete: true
          modifiedByUser:
            displayName: displayName
            id: id
          name: name
          id: id
          nodeId: nodeId
          sharedByUser:
            displayName: displayName
            id: id
          allowableOperations:
          - allowableOperations
          - allowableOperations
          properties: '{}'
          isFavorite: true
      properties:
        entry:
          $ref: '#/components/schemas/SharedLink'
      required:
      - entry
      type: object
    SharedLink:
      example:
        allowableOperationsOnTarget:
        - allowableOperationsOnTarget
        - allowableOperationsOnTarget
        modifiedAt: 2000-01-23T04:56:07.000+00:00
        description: description
        title: title
        expiresAt: 2000-01-23T04:56:07.000+00:00
        content:
          sizeInBytes: 0
          mimeTypeName: mimeTypeName
          mimeType: mimeType
          encoding: encoding
        aspectNames:
        - aspectNames
        - aspectNames
        path:
          elements:
          - aspectNames:
            - aspectNames
            - aspectNames
            name: name
            id: id
            nodeType: nodeType
          - aspectNames:
            - aspectNames
            - aspectNames
            name: name
            id: id
            nodeType: nodeType
          name: name
          isComplete: true
        modifiedByUser:
          displayName: displayName
          id: id
        name: name
        id: id
        nodeId: nodeId
        sharedByUser:
          displayName: displayName
          id: id
        allowableOperations:
        - allowableOperations
        - allowableOperations
        properties: '{}'
        isFavorite: true
      properties:
        id:
          type: string
        expiresAt:
          format: date-time
          type: string
        nodeId:
          type: string
        name:
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        title:
          type: string
        description:
          type: string
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        sharedByUser:
          $ref: '#/components/schemas/UserInfo'
        content:
          $ref: '#/components/schemas/ContentInfo'
        allowableOperations:
          description: |
            The allowable operations for the Quickshare link itself. See allowableOperationsOnTarget for the
            allowable operations pertaining to the linked content node.
          items:
            type: string
          type: array
        allowableOperationsOnTarget:
          description: |
            The allowable operations for the content node being shared.
          items:
            type: string
          type: array
        isFavorite:
          type: boolean
        properties:
          description: |
            A subset of the target node's properties, system properties and properties already available in the SharedLink are excluded.
          properties: {}
          type: object
        aspectNames:
          items:
            type: string
          type: array
        path:
          $ref: '#/components/schemas/PathInfo'
      type: object
    RenditionBodyCreate:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    RenditionEntry:
      example:
        entry:
          id: id
          content:
            sizeInBytes: 0
            mimeTypeName: mimeTypeName
            mimeType: mimeType
            encoding: encoding
          status: CREATED
      properties:
        entry:
          $ref: '#/components/schemas/Rendition'
      required:
      - entry
      type: object
    Rendition:
      example:
        id: id
        content:
          sizeInBytes: 0
          mimeTypeName: mimeTypeName
          mimeType: mimeType
          encoding: encoding
        status: CREATED
      properties:
        id:
          type: string
        content:
          $ref: '#/components/schemas/ContentInfo'
        status:
          enum:
          - CREATED
          - NOT_CREATED
          type: string
      type: object
    RenditionPaging:
      example:
        list:
          entries:
          - entry:
              id: id
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              status: CREATED
          - entry:
              id: id
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              status: CREATED
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/RenditionPaging_list'
      type: object
    DeletedNodesPaging:
      example:
        list:
          entries:
          - {}
          - {}
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/DeletedNodesPaging_list'
      type: object
    DeletedNodeEntry:
      example: {}
      properties:
        entry:
          $ref: '#/components/schemas/DeletedNode'
      type: object
    DeletedNode:
      allOf:
      - $ref: '#/components/schemas/Node'
      - $ref: '#/components/schemas/DeletedNode_allOf'
    DeletedNodeBodyRestore:
      example:
        targetParentId: targetParentId
        assocType: assocType
      properties:
        targetParentId:
          type: string
        assocType:
          type: string
      type: object
    RevertBody:
      example:
        comment: comment
        majorVersion: true
      properties:
        majorVersion:
          type: boolean
        comment:
          type: string
      type: object
    VersionPaging:
      example:
        list:
          entries:
          - entry:
              aspectNames:
              - aspectNames
              - aspectNames
              isFolder: true
              isFile: true
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              modifiedByUser:
                displayName: displayName
                id: id
              versionComment: versionComment
              name: name
              id: id
              nodeType: nodeType
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              properties: '{}'
          - entry:
              aspectNames:
              - aspectNames
              - aspectNames
              isFolder: true
              isFile: true
              modifiedAt: 2000-01-23T04:56:07.000+00:00
              modifiedByUser:
                displayName: displayName
                id: id
              versionComment: versionComment
              name: name
              id: id
              nodeType: nodeType
              content:
                sizeInBytes: 0
                mimeTypeName: mimeTypeName
                mimeType: mimeType
                encoding: encoding
              properties: '{}'
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/VersionPaging_list'
      type: object
    VersionEntry:
      example:
        entry:
          aspectNames:
          - aspectNames
          - aspectNames
          isFolder: true
          isFile: true
          modifiedAt: 2000-01-23T04:56:07.000+00:00
          modifiedByUser:
            displayName: displayName
            id: id
          versionComment: versionComment
          name: name
          id: id
          nodeType: nodeType
          content:
            sizeInBytes: 0
            mimeTypeName: mimeTypeName
            mimeType: mimeType
            encoding: encoding
          properties: '{}'
      properties:
        entry:
          $ref: '#/components/schemas/Version'
      type: object
    Version:
      example:
        aspectNames:
        - aspectNames
        - aspectNames
        isFolder: true
        isFile: true
        modifiedAt: 2000-01-23T04:56:07.000+00:00
        modifiedByUser:
          displayName: displayName
          id: id
        versionComment: versionComment
        name: name
        id: id
        nodeType: nodeType
        content:
          sizeInBytes: 0
          mimeTypeName: mimeTypeName
          mimeType: mimeType
          encoding: encoding
        properties: '{}'
      properties:
        id:
          type: string
        versionComment:
          type: string
        name:
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        isFolder:
          type: boolean
        isFile:
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        content:
          $ref: '#/components/schemas/ContentInfo'
        aspectNames:
          items:
            type: string
          type: array
        properties:
          properties: {}
          type: object
      required:
      - id
      - isFile
      - isFolder
      - modifiedAt
      - modifiedByUser
      - name
      - nodeType
      type: object
    DownloadBodyCreate:
      example:
        nodeIds:
        - nodeIds
        - nodeIds
      properties:
        nodeIds:
          items:
            type: string
          type: array
      required:
      - nodeIds
      type: object
    DownloadEntry:
      example:
        entry:
          filesAdded: 0
          bytesAdded: 6
          totalBytes: 5
          id: id
          totalFiles: 1
          status: PENDING
      properties:
        entry:
          $ref: '#/components/schemas/Download'
      required:
      - entry
      type: object
    Download:
      example:
        filesAdded: 0
        bytesAdded: 6
        totalBytes: 5
        id: id
        totalFiles: 1
        status: PENDING
      properties:
        filesAdded:
          description: number of files added so far in the zip
          type: integer
        bytesAdded:
          description: number of bytes added so far in the zip
          type: integer
        id:
          description: the id of the download node
          type: string
        totalFiles:
          description: the total number of files to be added in the zip
          type: integer
        totalBytes:
          description: the total number of bytes to be added in the zip
          type: integer
        status:
          default: PENDING
          description: the current status of the download node creation
          enum:
          - PENDING
          - CANCELLED
          - IN_PROGRESS
          - DONE
          - MAX_CONTENT_SIZE_EXCEEDED
          type: string
      type: object
    ClientBody:
      example:
        client: client
      properties:
        client:
          description: the client name
          type: string
      required:
      - client
      type: object
    PasswordResetBody:
      example:
        password: password
        id: id
        key: key
      properties:
        password:
          description: the new password
          type: string
        id:
          description: the workflow id provided in the reset password email
          type: string
        key:
          description: the workflow key provided in the reset password email
          type: string
      required:
      - id
      - key
      - password
      type: object
    AuditAppPaging:
      example:
        list:
          entries:
          - entry:
              maxEntryId: 0
              isEnabled: true
              name: name
              minEntryId: 6
              id: id
          - entry:
              maxEntryId: 0
              isEnabled: true
              name: name
              minEntryId: 6
              id: id
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/AuditAppPaging_list'
      type: object
    AuditAppEntry:
      example:
        entry:
          maxEntryId: 0
          isEnabled: true
          name: name
          minEntryId: 6
          id: id
      properties:
        entry:
          $ref: '#/components/schemas/AuditApp'
      type: object
    AuditApp:
      example:
        maxEntryId: 0
        isEnabled: true
        name: name
        minEntryId: 6
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        isEnabled:
          default: true
          type: boolean
        maxEntryId:
          type: integer
        minEntryId:
          type: integer
      required:
      - id
      type: object
    AuditBodyUpdate:
      example:
        isEnabled: true
      properties:
        isEnabled:
          type: boolean
      type: object
    AuditEntryPaging:
      example:
        list:
          entries:
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              createdByUser:
                displayName: displayName
                id: id
              values: '{}'
              auditApplicationId: auditApplicationId
              id: id
          - entry:
              createdAt: 2000-01-23T04:56:07.000+00:00
              createdByUser:
                displayName: displayName
                id: id
              values: '{}'
              auditApplicationId: auditApplicationId
              id: id
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/AuditEntryPaging_list'
      type: object
    AuditEntryEntry:
      example:
        entry:
          createdAt: 2000-01-23T04:56:07.000+00:00
          createdByUser:
            displayName: displayName
            id: id
          values: '{}'
          auditApplicationId: auditApplicationId
          id: id
      properties:
        entry:
          $ref: '#/components/schemas/AuditEntry'
      type: object
    AuditEntry:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        createdByUser:
          displayName: displayName
          id: id
        values: '{}'
        auditApplicationId: auditApplicationId
        id: id
      properties:
        id:
          type: string
        auditApplicationId:
          type: string
        createdByUser:
          $ref: '#/components/schemas/UserInfo'
        createdAt:
          format: date-time
          type: string
        values:
          properties: {}
          type: object
      required:
      - auditApplicationId
      - createdAt
      - createdByUser
      - id
      type: object
    ActionDefinitionList:
      example:
        list:
          entries:
          - applicableTypes:
            - applicableTypes
            - applicableTypes
            parameterDefinitions:
            - displayLabel: displayLabel
              name: name
              type: type
              multiValued: true
              mandatory: true
            - displayLabel: displayLabel
              name: name
              type: type
              multiValued: true
              mandatory: true
            name: name
            trackStatus: true
            description: description
            id: id
            title: title
          - applicableTypes:
            - applicableTypes
            - applicableTypes
            parameterDefinitions:
            - displayLabel: displayLabel
              name: name
              type: type
              multiValued: true
              mandatory: true
            - displayLabel: displayLabel
              name: name
              type: type
              multiValued: true
              mandatory: true
            name: name
            trackStatus: true
            description: description
            id: id
            title: title
          pagination:
            maxItems: 5
            hasMoreItems: true
            totalItems: 6
            count: 0
            skipCount: 1
      properties:
        list:
          $ref: '#/components/schemas/ActionDefinitionList_list'
      type: object
    ActionDefinitionEntry:
      example:
        entry:
          applicableTypes:
          - applicableTypes
          - applicableTypes
          parameterDefinitions:
          - displayLabel: displayLabel
            name: name
            type: type
            multiValued: true
            mandatory: true
          - displayLabel: displayLabel
            name: name
            type: type
            multiValued: true
            mandatory: true
          name: name
          trackStatus: true
          description: description
          id: id
          title: title
      properties:
        entry:
          $ref: '#/components/schemas/ActionDefinition'
      required:
      - entry
      type: object
    ActionDefinition:
      example:
        applicableTypes:
        - applicableTypes
        - applicableTypes
        parameterDefinitions:
        - displayLabel: displayLabel
          name: name
          type: type
          multiValued: true
          mandatory: true
        - displayLabel: displayLabel
          name: name
          type: type
          multiValued: true
          mandatory: true
        name: name
        trackStatus: true
        description: description
        id: id
        title: title
      properties:
        id:
          description: Identifier of the action definition — used for example when
            executing an action
          type: string
        name:
          description: name of the action definition, e.g. "move"
          type: string
        title:
          description: title of the action definition, e.g. "Move"
          type: string
        description:
          description: describes the action definition, e.g. "This will move the matched
            item to another space."
          type: string
        applicableTypes:
          description: QNames of the types this action applies to
          items:
            type: string
          type: array
        trackStatus:
          description: whether the basic action definition supports action tracking
            or not
          type: boolean
        parameterDefinitions:
          items:
            $ref: '#/components/schemas/ActionParameterDefinition'
          type: array
      required:
      - applicableTypes
      - id
      - trackStatus
      type: object
    ActionParameterDefinition:
      example:
        displayLabel: displayLabel
        name: name
        type: type
        multiValued: true
        mandatory: true
      properties:
        name:
          type: string
        type:
          type: string
        multiValued:
          type: boolean
        mandatory:
          type: boolean
        displayLabel:
          type: string
      type: object
    ActionBodyExec:
      example:
        targetId: targetId
        actionDefinitionId: actionDefinitionId
        params: '{}'
      properties:
        actionDefinitionId:
          type: string
        targetId:
          description: The entity upon which to execute the action, typically a node
            ID or similar.
          type: string
        params:
          properties: {}
          type: object
      required:
      - actionDefinitionId
      type: object
    ActionExecResultEntry:
      example:
        entry:
          id: id
      properties:
        entry:
          $ref: '#/components/schemas/ActionExecResult'
      required:
      - entry
      type: object
    ActionExecResult:
      example:
        id: id
      properties:
        id:
          description: The unique identifier of the action pending execution
          type: string
      required:
      - id
      type: object
    Definition:
      example:
        properties:
        - isProtected: true
          defaultValue: defaultValue
          dataType: dataType
          isMultiValued: true
          description: description
          isMandatoryEnforced: true
          id: id
          title: title
          constraints:
          - description: description
            id: id
            type: type
            title: title
            parameters:
              key: '{}'
          - description: description
            id: id
            type: type
            title: title
            parameters:
              key: '{}'
          isMandatory: true
        - isProtected: true
          defaultValue: defaultValue
          dataType: dataType
          isMultiValued: true
          description: description
          isMandatoryEnforced: true
          id: id
          title: title
          constraints:
          - description: description
            id: id
            type: type
            title: title
            parameters:
              key: '{}'
          - description: description
            id: id
            type: type
            title: title
            parameters:
              key: '{}'
          isMandatory: true
      properties:
        properties:
          description: List of property definitions effective for this node as the
            result of combining the type with all aspects.
          items:
            $ref: '#/components/schemas/Property'
          type: array
      type: object
    Property:
      example:
        isProtected: true
        defaultValue: defaultValue
        dataType: dataType
        isMultiValued: true
        description: description
        isMandatoryEnforced: true
        id: id
        title: title
        constraints:
        - description: description
          id: id
          type: type
          title: title
          parameters:
            key: '{}'
        - description: description
          id: id
          type: type
          title: title
          parameters:
            key: '{}'
        isMandatory: true
      properties:
        id:
          type: string
        title:
          description: the human-readable title
          type: string
        description:
          description: the human-readable description
          type: string
        defaultValue:
          description: the default value
          type: string
        dataType:
          description: the name of the property type (e.g. d:text)
          type: string
        isMultiValued:
          description: define if the property is multi-valued
          type: boolean
        isMandatory:
          description: define if the property is mandatory
          type: boolean
        isMandatoryEnforced:
          description: define if the presence of mandatory properties is enforced
          type: boolean
        isProtected:
          description: define if the property is system maintained
          type: boolean
        constraints:
          description: list of constraints defined for the property
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
      required:
      - id
      type: object
    Constraint:
      example:
        description: description
        id: id
        type: type
        title: title
        parameters:
          key: '{}'
      properties:
        id:
          type: string
        type:
          description: the type of the constraint
          type: string
        title:
          description: the human-readable constraint title
          type: string
        description:
          description: the human-readable constraint description
          type: string
        parameters:
          additionalProperties:
            properties: {}
            type: object
          type: object
      required:
      - id
      type: object
    ContentStorageInfo:
      description: |
        Response object holding storage properties related data for given content.
      example:
        storageProperties:
          key: storageProperties
        id: id
      properties:
        id:
          description: |
            Content type property identifier (e.g. cm:content). Inside this object only colon (':') delimiter for namespace-prefix will be used.
          type: string
        storageProperties:
          additionalProperties:
            type: string
          description: |
            A map (String-String) of storage properties for given content.
          type: object
      required:
      - id
      type: object
    RestoreArchivedContentRequest:
      description: |
        Request object holding restore content from artchive related paramteres for given content.
      example:
        restorePriority: restorePriority
      properties:
        restorePriority:
          description: Restore from archive priority (Standard/High - to be mapped
            to Storage Provider specific values in Cloud Connectors)
          type: string
      type: object
    ArchiveContentRequest:
      description: |
        Request object holding archive content related paramteres for given content.
      example:
        archiveParams:
          key: archiveParams
      properties:
        archiveParams:
          additionalProperties:
            type: string
          description: |
            Optional map (String-String) of archive request properties for given content.
          type: object
      type: object
    Error_error:
      properties:
        errorKey:
          type: string
        statusCode:
          format: int32
          type: integer
        briefSummary:
          type: string
        stackTrace:
          type: string
        descriptionURL:
          type: string
        logId:
          type: string
      required:
      - briefSummary
      - descriptionURL
      - stackTrace
      - statusCode
      type: object
    SitePaging_list:
      example:
        entries:
        - entry:
            role: SiteConsumer
            visibility: PRIVATE
            guid: guid
            description: description
            id: id
            preset: preset
            title: title
        - entry:
            role: SiteConsumer
            visibility: PRIVATE
            guid: guid
            description: description
            id: id
            preset: preset
            title: title
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SiteEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    SiteContainerPaging_list:
      example:
        entries:
        - entry:
            id: id
            folderId: folderId
        - entry:
            id: id
            folderId: folderId
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SiteContainerEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    SiteMemberPaging_list:
      example:
        entries:
        - entry:
            role: SiteConsumer
            person:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            id: id
            isMemberOfGroup: true
        - entry:
            role: SiteConsumer
            person:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            id: id
            isMemberOfGroup: true
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SiteMemberEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    SiteGroupPaging_list:
      example:
        entries:
        - entry:
            role: SiteConsumer
            id: id
            group:
              displayName: displayName
              id: id
              memberType: GROUP
        - entry:
            role: SiteConsumer
            id: id
            group:
              displayName: displayName
              id: id
              memberType: GROUP
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SiteGroupEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    SiteRolePaging_list:
      example:
        entries:
        - entry:
            site:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
            role: SiteConsumer
            guid: guid
            id: id
        - entry:
            site:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
            role: SiteConsumer
            guid: guid
            id: id
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SiteRoleEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    PersonPaging_list:
      example:
        entries:
        - entry:
            googleId: googleId
            lastName: lastName
            userStatus: userStatus
            capabilities:
              isMutable: true
              isGuest: true
              isAdmin: true
            displayName: displayName
            jobTitle: jobTitle
            statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
            mobile: mobile
            emailNotificationsEnabled: true
            description: description
            telephone: telephone
            enabled: true
            aspectNames:
            - aspectNames
            - aspectNames
            firstName: firstName
            skypeId: skypeId
            avatarId: avatarId
            instantMessageId: instantMessageId
            location: location
            company:
              address3: address3
              address2: address2
              address1: address1
              organization: organization
              postcode: postcode
              telephone: telephone
              fax: fax
              email: email
            id: id
            email: email
            properties: '{}'
        - entry:
            googleId: googleId
            lastName: lastName
            userStatus: userStatus
            capabilities:
              isMutable: true
              isGuest: true
              isAdmin: true
            displayName: displayName
            jobTitle: jobTitle
            statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
            mobile: mobile
            emailNotificationsEnabled: true
            description: description
            telephone: telephone
            enabled: true
            aspectNames:
            - aspectNames
            - aspectNames
            firstName: firstName
            skypeId: skypeId
            avatarId: avatarId
            instantMessageId: instantMessageId
            location: location
            company:
              address3: address3
              address2: address2
              address1: address1
              organization: organization
              postcode: postcode
              telephone: telephone
              fax: fax
              email: email
            id: id
            email: email
            properties: '{}'
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/PersonEntry'
          type: array
      type: object
    GroupPaging_list:
      example:
        entries:
        - entry:
            isRoot: true
            displayName: displayName
            parentIds:
            - parentIds
            - parentIds
            id: id
            zones:
            - zones
            - zones
        - entry:
            isRoot: true
            displayName: displayName
            parentIds:
            - parentIds
            - parentIds
            id: id
            zones:
            - zones
            - zones
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/GroupEntry'
          type: array
      type: object
    GroupMemberPaging_list:
      example:
        entries:
        - entry:
            displayName: displayName
            id: id
            memberType: GROUP
        - entry:
            displayName: displayName
            id: id
            memberType: GROUP
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/GroupMemberEntry'
          type: array
      type: object
    CommentPaging_list:
      example:
        entries:
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            createdBy:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            edited: true
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            canEdit: true
            modifiedBy:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            canDelete: true
            id: id
            title: title
            content: content
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            createdBy:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            edited: true
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            canEdit: true
            modifiedBy:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            canDelete: true
            id: id
            title: title
            content: content
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/CommentEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    TagPaging_list:
      example:
        entries:
        - entry:
            count: 0.8008281904610115
            id: id
            tag: tag
        - entry:
            count: 0.8008281904610115
            id: id
            tag: tag
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/TagEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    PersonNetworkPaging_list:
      example:
        entries:
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            paidNetwork: true
            subscriptionLevel: Free
            quotas:
            - usage: 6
              limit: 0
              id: id
            - usage: 6
              limit: 0
              id: id
            isEnabled: true
            id: id
            homeNetwork: true
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            paidNetwork: true
            subscriptionLevel: Free
            quotas:
            - usage: 6
              limit: 0
              id: id
            - usage: 6
              limit: 0
              id: id
            isEnabled: true
            id: id
            homeNetwork: true
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/PersonNetworkEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    RatingPaging_list:
      example:
        entries:
        - entry:
            myRating: myRating
            ratedAt: 2000-01-23T04:56:07.000+00:00
            id: id
            aggregate:
              average: 6
              numberOfRatings: 0
        - entry:
            myRating: myRating
            ratedAt: 2000-01-23T04:56:07.000+00:00
            id: id
            aggregate:
              average: 6
              numberOfRatings: 0
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/RatingEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    Rating_aggregate:
      example:
        average: 6
        numberOfRatings: 0
      properties:
        numberOfRatings:
          type: integer
        average:
          type: integer
      required:
      - numberOfRatings
      type: object
    FavoritePaging_list:
      example:
        entries:
        - entry:
            targetGuid: targetGuid
            createdAt: 2000-01-23T04:56:07.000+00:00
            properties: '{}'
            target: '{}'
        - entry:
            targetGuid: targetGuid
            createdAt: 2000-01-23T04:56:07.000+00:00
            properties: '{}'
            target: '{}'
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/FavoriteEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    ActivityPaging_list:
      example:
        entries:
        - entry:
            postedAt: 2000-01-23T04:56:07.000+00:00
            feedPersonId: feedPersonId
            postPersonId: postPersonId
            siteId: siteId
            activitySummary:
              key: activitySummary
            id: 0
            activityType: activityType
        - entry:
            postedAt: 2000-01-23T04:56:07.000+00:00
            feedPersonId: feedPersonId
            postPersonId: postPersonId
            siteId: siteId
            activitySummary:
              key: activitySummary
            id: 0
            activityType: activityType
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/ActivityEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    PreferencePaging_list:
      example:
        entries:
        - entry:
            id: id
            value: value
        - entry:
            id: id
            value: value
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/PreferenceEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    SiteMembershipRequestPaging_list:
      example:
        entries:
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            site:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
            id: id
            message: message
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            site:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
            id: id
            message: message
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SiteMembershipRequestEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    SiteMembershipRequestWithPersonPaging_list:
      example:
        entries:
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            site:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
            person:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            id: id
            message: message
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            site:
              role: SiteConsumer
              visibility: PRIVATE
              guid: guid
              description: description
              id: id
              preset: preset
              title: title
            person:
              googleId: googleId
              lastName: lastName
              userStatus: userStatus
              capabilities:
                isMutable: true
                isGuest: true
                isAdmin: true
              displayName: displayName
              jobTitle: jobTitle
              statusUpdatedAt: 2000-01-23T04:56:07.000+00:00
              mobile: mobile
              emailNotificationsEnabled: true
              description: description
              telephone: telephone
              enabled: true
              aspectNames:
              - aspectNames
              - aspectNames
              firstName: firstName
              skypeId: skypeId
              avatarId: avatarId
              instantMessageId: instantMessageId
              location: location
              company:
                address3: address3
                address2: address2
                address1: address1
                organization: organization
                postcode: postcode
                telephone: telephone
                fax: fax
                email: email
              id: id
              email: email
              properties: '{}'
            id: id
            message: message
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SiteMembershipRequestWithPersonEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    NodeBodyCreate_association:
      example:
        assocType: assocType
      properties:
        assocType:
          type: string
      type: object
    NodePaging_list:
      example:
        entries:
        - entry:
            isLink: true
            isFile: true
            isDirectLinkEnabled: true
            createdByUser:
              displayName: displayName
              id: id
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            nodeType: nodeType
            parentId: parentId
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            aspectNames:
            - aspectNames
            - aspectNames
            createdAt: 2000-01-23T04:56:07.000+00:00
            path:
              elements:
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              name: name
              isComplete: true
            isFolder: true
            permissions:
              isInheritanceEnabled: true
              settable:
              - settable
              - settable
              locallySet:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              inherited:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
            isLocked: false
            modifiedByUser:
              displayName: displayName
              id: id
            name: name
            definition:
              properties:
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
            id: id
            properties: '{}'
            allowableOperations:
            - allowableOperations
            - allowableOperations
            isFavorite: true
        - entry:
            isLink: true
            isFile: true
            isDirectLinkEnabled: true
            createdByUser:
              displayName: displayName
              id: id
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            nodeType: nodeType
            parentId: parentId
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            aspectNames:
            - aspectNames
            - aspectNames
            createdAt: 2000-01-23T04:56:07.000+00:00
            path:
              elements:
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              name: name
              isComplete: true
            isFolder: true
            permissions:
              isInheritanceEnabled: true
              settable:
              - settable
              - settable
              locallySet:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              inherited:
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
              - authorityId: authorityId
                name: name
                accessStatus: ALLOWED
            isLocked: false
            modifiedByUser:
              displayName: displayName
              id: id
            name: name
            definition:
              properties:
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
              - isProtected: true
                defaultValue: defaultValue
                dataType: dataType
                isMultiValued: true
                description: description
                isMandatoryEnforced: true
                id: id
                title: title
                constraints:
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                - description: description
                  id: id
                  type: type
                  title: title
                  parameters:
                    key: '{}'
                isMandatory: true
            id: id
            properties: '{}'
            allowableOperations:
            - allowableOperations
            - allowableOperations
            isFavorite: true
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
        source:
          isLink: true
          isFile: true
          isDirectLinkEnabled: true
          createdByUser:
            displayName: displayName
            id: id
          modifiedAt: 2000-01-23T04:56:07.000+00:00
          nodeType: nodeType
          parentId: parentId
          content:
            sizeInBytes: 0
            mimeTypeName: mimeTypeName
            mimeType: mimeType
            encoding: encoding
          aspectNames:
          - aspectNames
          - aspectNames
          createdAt: 2000-01-23T04:56:07.000+00:00
          path:
            elements:
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            name: name
            isComplete: true
          isFolder: true
          permissions:
            isInheritanceEnabled: true
            settable:
            - settable
            - settable
            locallySet:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            inherited:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
          isLocked: false
          modifiedByUser:
            displayName: displayName
            id: id
          name: name
          definition:
            properties:
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
          id: id
          properties: '{}'
          allowableOperations:
          - allowableOperations
          - allowableOperations
          isFavorite: true
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/NodeEntry'
          type: array
        source:
          $ref: '#/components/schemas/Node'
      type: object
    NodeAssociationPaging_list:
      example:
        entries:
        - {}
        - {}
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
        source:
          isLink: true
          isFile: true
          isDirectLinkEnabled: true
          createdByUser:
            displayName: displayName
            id: id
          modifiedAt: 2000-01-23T04:56:07.000+00:00
          nodeType: nodeType
          parentId: parentId
          content:
            sizeInBytes: 0
            mimeTypeName: mimeTypeName
            mimeType: mimeType
            encoding: encoding
          aspectNames:
          - aspectNames
          - aspectNames
          createdAt: 2000-01-23T04:56:07.000+00:00
          path:
            elements:
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            name: name
            isComplete: true
          isFolder: true
          permissions:
            isInheritanceEnabled: true
            settable:
            - settable
            - settable
            locallySet:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            inherited:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
          isLocked: false
          modifiedByUser:
            displayName: displayName
            id: id
          name: name
          definition:
            properties:
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
          id: id
          properties: '{}'
          allowableOperations:
          - allowableOperations
          - allowableOperations
          isFavorite: true
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/NodeAssociationEntry'
          type: array
        source:
          $ref: '#/components/schemas/Node'
      type: object
    NodeChildAssociationPaging_list:
      example:
        entries:
        - {}
        - {}
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
        source:
          isLink: true
          isFile: true
          isDirectLinkEnabled: true
          createdByUser:
            displayName: displayName
            id: id
          modifiedAt: 2000-01-23T04:56:07.000+00:00
          nodeType: nodeType
          parentId: parentId
          content:
            sizeInBytes: 0
            mimeTypeName: mimeTypeName
            mimeType: mimeType
            encoding: encoding
          aspectNames:
          - aspectNames
          - aspectNames
          createdAt: 2000-01-23T04:56:07.000+00:00
          path:
            elements:
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            - aspectNames:
              - aspectNames
              - aspectNames
              name: name
              id: id
              nodeType: nodeType
            name: name
            isComplete: true
          isFolder: true
          permissions:
            isInheritanceEnabled: true
            settable:
            - settable
            - settable
            locallySet:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            inherited:
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
            - authorityId: authorityId
              name: name
              accessStatus: ALLOWED
          isLocked: false
          modifiedByUser:
            displayName: displayName
            id: id
          name: name
          definition:
            properties:
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
            - isProtected: true
              defaultValue: defaultValue
              dataType: dataType
              isMultiValued: true
              description: description
              isMandatoryEnforced: true
              id: id
              title: title
              constraints:
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              - description: description
                id: id
                type: type
                title: title
                parameters:
                  key: '{}'
              isMandatory: true
          id: id
          properties: '{}'
          allowableOperations:
          - allowableOperations
          - allowableOperations
          isFavorite: true
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/NodeChildAssociationEntry'
          type: array
        source:
          $ref: '#/components/schemas/Node'
      type: object
    NodeAssociation_allOf:
      properties:
        association:
          $ref: '#/components/schemas/AssociationInfo'
      type: object
    NodeChildAssociation_allOf:
      properties:
        association:
          $ref: '#/components/schemas/ChildAssociationInfo'
      type: object
    ProbeEntry_entry:
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    SharedLinkPaging_list:
      example:
        entries:
        - entry:
            allowableOperationsOnTarget:
            - allowableOperationsOnTarget
            - allowableOperationsOnTarget
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            description: description
            title: title
            expiresAt: 2000-01-23T04:56:07.000+00:00
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            aspectNames:
            - aspectNames
            - aspectNames
            path:
              elements:
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              name: name
              isComplete: true
            modifiedByUser:
              displayName: displayName
              id: id
            name: name
            id: id
            nodeId: nodeId
            sharedByUser:
              displayName: displayName
              id: id
            allowableOperations:
            - allowableOperations
            - allowableOperations
            properties: '{}'
            isFavorite: true
        - entry:
            allowableOperationsOnTarget:
            - allowableOperationsOnTarget
            - allowableOperationsOnTarget
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            description: description
            title: title
            expiresAt: 2000-01-23T04:56:07.000+00:00
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            aspectNames:
            - aspectNames
            - aspectNames
            path:
              elements:
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              - aspectNames:
                - aspectNames
                - aspectNames
                name: name
                id: id
                nodeType: nodeType
              name: name
              isComplete: true
            modifiedByUser:
              displayName: displayName
              id: id
            name: name
            id: id
            nodeId: nodeId
            sharedByUser:
              displayName: displayName
              id: id
            allowableOperations:
            - allowableOperations
            - allowableOperations
            properties: '{}'
            isFavorite: true
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/SharedLinkEntry'
          type: array
      required:
      - entries
      - pagination
      type: object
    RenditionPaging_list:
      example:
        entries:
        - entry:
            id: id
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            status: CREATED
        - entry:
            id: id
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            status: CREATED
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/RenditionEntry'
          type: array
      type: object
    DeletedNodesPaging_list:
      example:
        entries:
        - {}
        - {}
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/DeletedNodeEntry'
          type: array
      type: object
    DeletedNode_allOf:
      properties:
        archivedByUser:
          $ref: '#/components/schemas/UserInfo'
        archivedAt:
          format: date-time
          type: string
      required:
      - archivedAt
      - archivedByUser
      type: object
    VersionPaging_list:
      example:
        entries:
        - entry:
            aspectNames:
            - aspectNames
            - aspectNames
            isFolder: true
            isFile: true
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            modifiedByUser:
              displayName: displayName
              id: id
            versionComment: versionComment
            name: name
            id: id
            nodeType: nodeType
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            properties: '{}'
        - entry:
            aspectNames:
            - aspectNames
            - aspectNames
            isFolder: true
            isFile: true
            modifiedAt: 2000-01-23T04:56:07.000+00:00
            modifiedByUser:
              displayName: displayName
              id: id
            versionComment: versionComment
            name: name
            id: id
            nodeType: nodeType
            content:
              sizeInBytes: 0
              mimeTypeName: mimeTypeName
              mimeType: mimeType
              encoding: encoding
            properties: '{}'
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/VersionEntry'
          type: array
      type: object
    AuditAppPaging_list:
      example:
        entries:
        - entry:
            maxEntryId: 0
            isEnabled: true
            name: name
            minEntryId: 6
            id: id
        - entry:
            maxEntryId: 0
            isEnabled: true
            name: name
            minEntryId: 6
            id: id
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/AuditAppEntry'
          type: array
      type: object
    AuditEntryPaging_list:
      example:
        entries:
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            createdByUser:
              displayName: displayName
              id: id
            values: '{}'
            auditApplicationId: auditApplicationId
            id: id
        - entry:
            createdAt: 2000-01-23T04:56:07.000+00:00
            createdByUser:
              displayName: displayName
              id: id
            values: '{}'
            auditApplicationId: auditApplicationId
            id: id
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/AuditEntryEntry'
          type: array
      type: object
    ActionDefinitionList_list:
      example:
        entries:
        - applicableTypes:
          - applicableTypes
          - applicableTypes
          parameterDefinitions:
          - displayLabel: displayLabel
            name: name
            type: type
            multiValued: true
            mandatory: true
          - displayLabel: displayLabel
            name: name
            type: type
            multiValued: true
            mandatory: true
          name: name
          trackStatus: true
          description: description
          id: id
          title: title
        - applicableTypes:
          - applicableTypes
          - applicableTypes
          parameterDefinitions:
          - displayLabel: displayLabel
            name: name
            type: type
            multiValued: true
            mandatory: true
          - displayLabel: displayLabel
            name: name
            type: type
            multiValued: true
            mandatory: true
          name: name
          trackStatus: true
          description: description
          id: id
          title: title
        pagination:
          maxItems: 5
          hasMoreItems: true
          totalItems: 6
          count: 0
          skipCount: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        entries:
          items:
            $ref: '#/components/schemas/ActionDefinition'
          type: array
      type: object
  securitySchemes:
    basicAuth:
      description: HTTP Basic Authentication
      scheme: basic
      type: http
x-original-swagger-version: "2.0"

