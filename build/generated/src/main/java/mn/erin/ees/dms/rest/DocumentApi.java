/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mn.erin.ees.dms.rest;

import mn.erin.ees.dms.rest.model.DocumentRestModel;
import mn.erin.ees.dms.rest.model.ErrorRestModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-26T16:10:30.236985800+08:00[Asia/Ulaanbaatar]")
@Validated
@Api(value = "document", description = "the document API")
public interface DocumentApi {

    default DocumentApiDelegate getDelegate() {
        return new DocumentApiDelegate() {};
    }

    /**
     * POST /document/create/{organizationId}/{groupId}/{createdUser}/{documentName}/{documentType}/{createdDate}/{description} : upload documents
     *
     * @param organizationId ID of the organization (required)
     * @param groupId ID of the group (required)
     * @param createdUser ID of the user (required)
     * @param documentName ID of the organization (required)
     * @param documentType ID of the group (required)
     * @param createdDate ID of the user (required)
     * @param description ID of the user (required)
     * @param file  (required)
     * @return Successful (status code 201)
     *         or Input data invalid (status code 400)
     *         or Unauthorized (status code 401)
     *         or Selected folder does not exit (status code 404)
     *         or General document list JSON model (status code 200)
     */
    @ApiOperation(value = "upload documents", nickname = "createDocument", notes = "", response = DocumentRestModel.class, tags={ "Documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful", response = DocumentRestModel.class),
        @ApiResponse(code = 400, message = "Input data invalid", response = ErrorRestModel.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Selected folder does not exit"),
        @ApiResponse(code = 200, message = "General document list JSON model") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/document/create/{organizationId}/{groupId}/{createdUser}/{documentName}/{documentType}/{createdDate}/{description}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<DocumentRestModel> createDocument(@ApiParam(value = "ID of the organization", required = true) @PathVariable("organizationId") String organizationId,@ApiParam(value = "ID of the group", required = true) @PathVariable("groupId") String groupId,@ApiParam(value = "ID of the user", required = true) @PathVariable("createdUser") String createdUser,@ApiParam(value = "ID of the organization", required = true) @PathVariable("documentName") String documentName,@ApiParam(value = "ID of the group", required = true) @PathVariable("documentType") String documentType,@ApiParam(value = "ID of the user", required = true) @PathVariable("createdDate") String createdDate,@ApiParam(value = "ID of the user", required = true) @PathVariable("description") String description,@ApiParam(value = "") @Valid @RequestPart(value = "file", required = true) MultipartFile file) {
        return getDelegate().createDocument(organizationId, groupId, createdUser, documentName, documentType, createdDate, description, file);
    }


    /**
     * GET /document/get/{organizationId}/{groupId} : returns all documents
     *
     * @param organizationId ID of the organization (required)
     * @param groupId ID of the group (required)
     * @return Document list (status code 200)
     */
    @ApiOperation(value = "returns all documents", nickname = "getDocuments", notes = "", response = DocumentRestModel.class, responseContainer = "List", tags={ "Documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Document list", response = DocumentRestModel.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document/get/{organizationId}/{groupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DocumentRestModel>> getDocuments(@ApiParam(value = "ID of the organization", required = true) @PathVariable("organizationId") String organizationId,@ApiParam(value = "ID of the group", required = true) @PathVariable("groupId") String groupId) {
        return getDelegate().getDocuments(organizationId, groupId);
    }


    /**
     * GET /document/content/{contentId} : return file
     *
     * @param contentId ID of the content (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "return file", nickname = "getFile", notes = "", response = org.springframework.core.io.Resource.class, tags={ "Document Content", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = org.springframework.core.io.Resource.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/document/content/{contentId}",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getFile(@ApiParam(value = "ID of the content", required = true) @PathVariable("contentId") String contentId) {
        return getDelegate().getFile(contentId);
    }

}
